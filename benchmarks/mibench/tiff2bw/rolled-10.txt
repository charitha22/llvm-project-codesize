/home/rodrigo/llvm/loop-rerolling/build/release/bin/clang -std=gnu89 -B /usr/bin -Os -fno-vectorize -fno-slp-vectorize -fno-unroll-loops -c src/tif_luv.c -o src/tif_luv.o   -fuse-ld=
clang-12: warning: argument unused during compilation: '-fuse-ld=' [-Wunused-command-line-argument]
stores
calls
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   %tif_setupdecode = getelementptr inbounds %struct.tiff, %struct.tiff* %tif, i64 0, i32 21
Here ..
Skipping:   %tif_decodestrip = getelementptr inbounds %struct.tiff, %struct.tiff* %tif, i64 0, i32 28
Skipping:   store i32 (%struct.tiff*, i8*, i32, i16)* @LogLuvDecodeStrip, i32 (%struct.tiff*, i8*, i32, i16)** %tif_decodestrip, align 8, !tbaa !17
destroying tree
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
destroying tree
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
destroying tree
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   %u = alloca double, align 8
Skipping:   %v = alloca double, align 8
Here ..
Skipping:   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1) #9
destroying tree
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   store float 0.000000e+00, float* %arrayidx, align 4, !tbaa !2
Here ..
Skipping:   %arrayidx1 = getelementptr inbounds float, float* %XYZ, i64 1
Here ..
Here ..
I:   br label %cleanup
Last:   br label %cleanup
Schedulable: 1
code gen 0
Gains: 4 - 15 = -11
Unprofitable: deleting generated code
Done!
code gen 1
destroying tree
calls
stores
calls
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   %conv19 = fptrunc double %mul18 to float
Here ..
Here ..
Skipping:   %arrayidx22 = getelementptr inbounds float, float* %XYZ, i64 1
Skipping:   %sub23 = fsub double 1.000000e+00, %mul14
Skipping:   %sub24 = fsub double %sub23, %mul16
Skipping:   %div25 = fdiv double %sub24, %mul16
Skipping:   %mul26 = fmul double %call, %div25
Here ..
Skipping:   %arrayidx28 = getelementptr inbounds float, float* %XYZ, i64 2
Here ..
I:   br label %cleanup
Last:   br label %cleanup
Schedulable: 1
code gen 0
Gains: 5 - 13 = -8
Unprofitable: deleting generated code
Done!
code gen 1
destroying tree
calls
stores
calls
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1) #9
Here ..
Here ..
I:   ret void
Last:   ret void
Schedulable: 1
code gen 0
Gains: 6 - 11 = -5
Unprofitable: deleting generated code
Done!
code gen 1
destroying tree
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %3) #9
Here ..
Here ..
I:   %5 = load i32, i32* %luv.018, align 4, !tbaa !9
Last:   %5 = load i32, i32* %luv.018, align 4, !tbaa !9
Schedulable: 1
code gen 0
Gains: 6 - 11 = -5
Unprofitable: deleting generated code
Done!
code gen 1
destroying tree
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   %mul = fmul double %9, 3.276800e+04
Here ..
Skipping:   %incdec.ptr5 = getelementptr inbounds i16, i16* %luv3.019, i64 2
Here ..
Skipping:   %incdec.ptr8 = getelementptr inbounds i16, i16* %luv3.019, i64 3
Here ..
I:   %incdec.ptr9 = getelementptr inbounds i32, i32* %luv.018, i64 1
Last:   %incdec.ptr9 = getelementptr inbounds i32, i32* %luv.018, i64 1
Schedulable: 1
code gen 0
Gains: 5 - 11 = -6
Unprofitable: deleting generated code
Done!
code gen 1
destroying tree
calls
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %4) #9
Here ..
Here ..
I:   %cmp = icmp sgt i32 %dec20.in, 1
Last:   %cmp = icmp sgt i32 %dec20.in, 1
Schedulable: 1
code gen 0
Gains: 6 - 11 = -5
Unprofitable: deleting generated code
Done!
code gen 1
destroying tree
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   store float 0.000000e+00, float* %arrayidx, align 4, !tbaa !2
Here ..
Skipping:   %arrayidx1 = getelementptr inbounds float, float* %XYZ, i64 1
Here ..
Here ..
I:   br label %cleanup
Last:   br label %cleanup
Schedulable: 1
code gen 0
Gains: 4 - 15 = -11
Unprofitable: deleting generated code
Done!
code gen 1
destroying tree
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   %conv17 = fptrunc double %mul16 to float
Here ..
Here ..
Skipping:   %arrayidx20 = getelementptr inbounds float, float* %XYZ, i64 1
Skipping:   %sub21 = fsub double 1.000000e+00, %mul12
Skipping:   %sub22 = fsub double %sub21, %mul14
Skipping:   %div23 = fdiv double %sub22, %mul14
Skipping:   %mul24 = fmul double %div23, %call
Here ..
Skipping:   %arrayidx26 = getelementptr inbounds float, float* %XYZ, i64 2
Here ..
I:   br label %cleanup
Last:   br label %cleanup
Schedulable: 1
code gen 0
Gains: 5 - 13 = -8
Unprofitable: deleting generated code
Done!
code gen 1
destroying tree
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   store i16 %conv, i16* %luv3.024, align 2, !tbaa !10
Here ..
Skipping:   %shr1 = lshr i32 %3, 8
Skipping:   %and = and i32 %shr1, 255
Skipping:   %conv2 = uitofp i32 %and to double
Skipping:   %add = fadd double %conv2, 5.000000e-01
Skipping:   %mul = fmul double %add, 0x3F63FB013FB013FB
Skipping:   %and3 = and i32 %3, 255
Skipping:   %conv4 = uitofp i32 %and3 to double
Skipping:   %add5 = fadd double %conv4, 5.000000e-01
Skipping:   %mul6 = fmul double %add5, 0x3F63FB013FB013FB
Skipping:   %mul7 = fmul double %mul, 3.276800e+04
Skipping:   %conv8 = fptosi double %mul7 to i16
Skipping:   %incdec.ptr9 = getelementptr inbounds i16, i16* %luv3.024, i64 2
Here ..
Skipping:   %mul10 = fmul double %mul6, 3.276800e+04
Skipping:   %conv11 = fptosi double %mul10 to i16
Skipping:   %incdec.ptr12 = getelementptr inbounds i16, i16* %luv3.024, i64 3
Here ..
I:   %incdec.ptr13 = getelementptr inbounds i32, i32* %luv.025, i64 1
Last:   %incdec.ptr13 = getelementptr inbounds i32, i32* %luv.025, i64 1
Schedulable: 1
code gen 0
Gains: 5 - 13 = -8
Unprofitable: deleting generated code
Done!
code gen 1
destroying tree
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   %conv33 = trunc i32 %shr to i8
Here ..
Skipping:   %incdec.ptr = getelementptr inbounds i8, i8* %op.1, i64 1
Skipping:   %17 = load i32, i32* %tp.194, align 4, !tbaa !22
destroying tree
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   %conv83 = trunc i32 %sub82 to i8
Here ..
Skipping:   %incdec.ptr = getelementptr inbounds i8, i8* %op.2, i64 1
Skipping:   %shr = lshr i32 %and68, %sub18330
Here ..
Skipping:   %incdec.ptr85 = getelementptr inbounds i8, i8* %op.2, i64 2
Here ..
I:   %sub86 = add nsw i32 %occ.2, -2
Last:   %sub86 = add nsw i32 %occ.2, -2
Schedulable: 1
code gen 0
Gains: 3 - 10 = -7
Unprofitable: deleting generated code
Done!
code gen 1
destroying tree
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   store i8 %conv136, i8* %op.4.lcssa, align 1, !tbaa !28
Here ..
Skipping:   %idxprom138 = sext i32 %beg.0279 to i64
Skipping:   %arrayidx139 = getelementptr inbounds i32, i32* %tp.0, i64 %idxprom138
Skipping:   %42 = load i32, i32* %arrayidx139, align 4, !tbaa !24
destroying tree
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   %conv91 = trunc i32 %sub90 to i8
Here ..
Skipping:   %incdec.ptr = getelementptr inbounds i8, i8* %op.2, i64 1
Skipping:   %shr = ashr i32 %conv82, %sub18344
Here ..
Skipping:   %incdec.ptr94 = getelementptr inbounds i8, i8* %op.2, i64 2
Here ..
I:   %sub95 = add nsw i32 %occ.2, -2
Last:   %sub95 = add nsw i32 %occ.2, -2
Schedulable: 1
code gen 0
Gains: 3 - 10 = -7
Unprofitable: deleting generated code
Done!
code gen 1
destroying tree
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   store i8 %conv146, i8* %op.4.lcssa, align 1, !tbaa !28
Here ..
Skipping:   %idxprom148 = sext i32 %beg.0292 to i64
Skipping:   %arrayidx149 = getelementptr inbounds i16, i16* %tp.0, i64 %idxprom148
Skipping:   %41 = load i16, i16* %arrayidx149, align 2, !tbaa !24
destroying tree
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
/home/rodrigo/llvm/loop-rerolling/build/release/bin/clang -std=gnu89 -B /usr/bin -Os -fno-vectorize -fno-slp-vectorize -fno-unroll-loops -c src/tif_swab.c -o src/tif_swab.o   -fuse-ld=
clang-12: warning: argument unused during compilation: '-fuse-ld=' [-Wunused-command-line-argument]
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   %2 = load i8, i8* %0, align 1, !tbaa !2
Here ..
Skipping:   store i8 %1, i8* %0, align 1, !tbaa !2
destroying tree
calls
Done Loop Roller!
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   %2 = load i8, i8* %0, align 1, !tbaa !2
Here ..
Skipping:   store i8 %1, i8* %0, align 1, !tbaa !2
destroying tree
calls
Done Loop Roller!
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   %2 = load i8, i8* %0, align 1, !tbaa !2
Here ..
Skipping:   store i8 %1, i8* %0, align 1, !tbaa !2
destroying tree
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   %2 = load i8, i8* %0, align 1, !tbaa !2
Here ..
Skipping:   store i8 %1, i8* %0, align 1, !tbaa !2
destroying tree
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   %3 = load i8, i8* %1, align 1, !tbaa !2
Here ..
Skipping:   store i8 %2, i8* %1, align 1, !tbaa !2
destroying tree
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   %7 = load i32, i32* %arrayidx1, align 4, !tbaa !7
Here ..
Skipping:   store i32 %6, i32* %arrayidx1, align 4, !tbaa !7
destroying tree
calls
Done Loop Roller!
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   %3 = load i8, i8* %1, align 1, !tbaa !2
Here ..
Skipping:   store i8 %2, i8* %1, align 1, !tbaa !2
destroying tree
calls
stores
calls
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   %7 = load i32, i32* %arrayidx1, align 4, !tbaa !7
Here ..
Skipping:   store i32 %6, i32* %arrayidx1, align 4, !tbaa !7
destroying tree
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   %0 = load i8, i8* %cp.addr.059, align 1, !tbaa !2
Here ..
Skipping:   %arrayidx3 = getelementptr inbounds i8, i8* %cp.addr.059, i64 1
Here ..
Skipping:   %arrayidx7 = getelementptr inbounds i8, i8* %cp.addr.059, i64 2
Here ..
Skipping:   %arrayidx11 = getelementptr inbounds i8, i8* %cp.addr.059, i64 3
Here ..
Skipping:   %arrayidx15 = getelementptr inbounds i8, i8* %cp.addr.059, i64 4
Here ..
Skipping:   %arrayidx19 = getelementptr inbounds i8, i8* %cp.addr.059, i64 5
Here ..
Skipping:   %arrayidx23 = getelementptr inbounds i8, i8* %cp.addr.059, i64 6
Here ..
Skipping:   %arrayidx27 = getelementptr inbounds i8, i8* %cp.addr.059, i64 7
Here ..
Here ..
I:   %add.ptr = getelementptr inbounds i8, i8* %cp.addr.059, i64 8
Last:   %add.ptr = getelementptr inbounds i8, i8* %cp.addr.059, i64 8
Schedulable: 1
code gen 0
Gains: 47 - 9 = 38
Profitable: finishing code generation
; Function Attrs: nofree norecurse nounwind optsize uwtable
define dso_local void @TIFFReverseBits(i8* nocapture %cp, i64 %n) local_unnamed_addr #0 {
entry:
  %cmp58 = icmp ugt i64 %n, 8
  br i1 %cmp58, label %for.body.preheader, label %while.cond.preheader

for.body.preheader:                               ; preds = %entry
  br label %for.body

while.cond.preheader:                             ; preds = %entry
  %cmp31.not55 = icmp eq i64 %n, 0
  br i1 %cmp31.not55, label %while.end, label %while.body.preheader

while.body.preheader.loopexit:                    ; preds = %for.body
  %add.ptr.lcssa = phi i8* [ %add.ptr, %for.body ]
  %sub.lcssa = phi i64 [ %sub, %for.body ]
  br label %while.body.preheader

while.body.preheader:                             ; preds = %while.body.preheader.loopexit, %while.cond.preheader
  %n.addr.0.lcssa66 = phi i64 [ %n, %while.cond.preheader ], [ %sub.lcssa, %while.body.preheader.loopexit ]
  %cp.addr.0.lcssa65 = phi i8* [ %cp, %while.cond.preheader ], [ %add.ptr.lcssa, %while.body.preheader.loopexit ]
  br label %while.body

for.body:                                         ; preds = %for.body.preheader, %for.body
  %n.addr.060 = phi i64 [ %sub, %for.body ], [ %n, %for.body.preheader ]
  %cp.addr.059 = phi i8* [ %add.ptr, %for.body ], [ %cp, %for.body.preheader ]
  %0 = load i8, i8* %cp.addr.059, align 1, !tbaa !2
  %idxprom = zext i8 %0 to i64
  %arrayidx1 = getelementptr inbounds [256 x i8], [256 x i8]* @TIFFBitRevTable, i64 0, i64 %idxprom
  %1 = load i8, i8* %arrayidx1, align 1, !tbaa !2
  store i8 %1, i8* %cp.addr.059, align 1, !tbaa !2
  %arrayidx3 = getelementptr inbounds i8, i8* %cp.addr.059, i64 1
  %2 = load i8, i8* %arrayidx3, align 1, !tbaa !2
  %idxprom4 = zext i8 %2 to i64
  %arrayidx5 = getelementptr inbounds [256 x i8], [256 x i8]* @TIFFBitRevTable, i64 0, i64 %idxprom4
  %3 = load i8, i8* %arrayidx5, align 1, !tbaa !2
  store i8 %3, i8* %arrayidx3, align 1, !tbaa !2
  %arrayidx7 = getelementptr inbounds i8, i8* %cp.addr.059, i64 2
  %4 = load i8, i8* %arrayidx7, align 1, !tbaa !2
  %idxprom8 = zext i8 %4 to i64
  %arrayidx9 = getelementptr inbounds [256 x i8], [256 x i8]* @TIFFBitRevTable, i64 0, i64 %idxprom8
  %5 = load i8, i8* %arrayidx9, align 1, !tbaa !2
  store i8 %5, i8* %arrayidx7, align 1, !tbaa !2
  %arrayidx11 = getelementptr inbounds i8, i8* %cp.addr.059, i64 3
  %6 = load i8, i8* %arrayidx11, align 1, !tbaa !2
  %idxprom12 = zext i8 %6 to i64
  %arrayidx13 = getelementptr inbounds [256 x i8], [256 x i8]* @TIFFBitRevTable, i64 0, i64 %idxprom12
  %7 = load i8, i8* %arrayidx13, align 1, !tbaa !2
  store i8 %7, i8* %arrayidx11, align 1, !tbaa !2
  %arrayidx15 = getelementptr inbounds i8, i8* %cp.addr.059, i64 4
  %8 = load i8, i8* %arrayidx15, align 1, !tbaa !2
  %idxprom16 = zext i8 %8 to i64
  %arrayidx17 = getelementptr inbounds [256 x i8], [256 x i8]* @TIFFBitRevTable, i64 0, i64 %idxprom16
  %9 = load i8, i8* %arrayidx17, align 1, !tbaa !2
  store i8 %9, i8* %arrayidx15, align 1, !tbaa !2
  %arrayidx19 = getelementptr inbounds i8, i8* %cp.addr.059, i64 5
  %10 = load i8, i8* %arrayidx19, align 1, !tbaa !2
  %idxprom20 = zext i8 %10 to i64
  %arrayidx21 = getelementptr inbounds [256 x i8], [256 x i8]* @TIFFBitRevTable, i64 0, i64 %idxprom20
  %11 = load i8, i8* %arrayidx21, align 1, !tbaa !2
  store i8 %11, i8* %arrayidx19, align 1, !tbaa !2
  %arrayidx23 = getelementptr inbounds i8, i8* %cp.addr.059, i64 6
  %12 = load i8, i8* %arrayidx23, align 1, !tbaa !2
  %idxprom24 = zext i8 %12 to i64
  %arrayidx25 = getelementptr inbounds [256 x i8], [256 x i8]* @TIFFBitRevTable, i64 0, i64 %idxprom24
  %13 = load i8, i8* %arrayidx25, align 1, !tbaa !2
  store i8 %13, i8* %arrayidx23, align 1, !tbaa !2
  %arrayidx27 = getelementptr inbounds i8, i8* %cp.addr.059, i64 7
  %14 = load i8, i8* %arrayidx27, align 1, !tbaa !2
  %idxprom28 = zext i8 %14 to i64
  %arrayidx29 = getelementptr inbounds [256 x i8], [256 x i8]* @TIFFBitRevTable, i64 0, i64 %idxprom28
  %15 = load i8, i8* %arrayidx29, align 1, !tbaa !2
  store i8 %15, i8* %arrayidx27, align 1, !tbaa !2
  %add.ptr = getelementptr inbounds i8, i8* %cp.addr.059, i64 8
  %sub = add i64 %n.addr.060, -8
  %cmp = icmp ugt i64 %sub, 8
  br i1 %cmp, label %for.body, label %while.body.preheader.loopexit, !llvm.loop !11

while.body:                                       ; preds = %while.body.preheader, %while.body
  %n.addr.157 = phi i64 [ %dec, %while.body ], [ %n.addr.0.lcssa66, %while.body.preheader ]
  %cp.addr.156 = phi i8* [ %incdec.ptr, %while.body ], [ %cp.addr.0.lcssa65, %while.body.preheader ]
  %dec = add i64 %n.addr.157, -1
  %16 = load i8, i8* %cp.addr.156, align 1, !tbaa !2
  %idxprom32 = zext i8 %16 to i64
  %arrayidx33 = getelementptr inbounds [256 x i8], [256 x i8]* @TIFFBitRevTable, i64 0, i64 %idxprom32
  %17 = load i8, i8* %arrayidx33, align 1, !tbaa !2
  store i8 %17, i8* %cp.addr.156, align 1, !tbaa !2
  %incdec.ptr = getelementptr inbounds i8, i8* %cp.addr.156, i64 1
  %cmp31.not = icmp eq i64 %dec, 0
  br i1 %cmp31.not, label %while.end.loopexit, label %while.body, !llvm.loop !12

while.end.loopexit:                               ; preds = %while.body
  br label %while.end

while.end:                                        ; preds = %while.end.loopexit, %while.cond.preheader
  ret void

rolled.pre:                                       ; No predecessors!

rolled.loop:                                      ; No predecessors!
  %18 = phi i8 
  %19 = zext i8 %18 to i64
  %20 = add i64 %19, 1
  %21 = getelementptr i8, i8* %cp.addr.059, i64 %20
  %22 = load i8, i8* %21, align 1
  %23 = zext i8 %22 to i64
  %24 = getelementptr inbounds [256 x i8], [256 x i8]* @TIFFBitRevTable, i64 0, i64 %23
  %25 = load i8, i8* %24, align 1
  store i8 %25, i8* %21, align 1
  %26 = add i8 %18, 1
  %27 = icmp ne i8 %26, 8

rolled.exit:                                      ; No predecessors!
}

Done!
; Function Attrs: nofree norecurse nounwind optsize uwtable
define dso_local void @TIFFReverseBits(i8* nocapture %cp, i64 %n) local_unnamed_addr #0 {
entry:
  %cmp58 = icmp ugt i64 %n, 8
  br i1 %cmp58, label %for.body.preheader, label %while.cond.preheader

for.body.preheader:                               ; preds = %entry
  br label %for.body

while.cond.preheader:                             ; preds = %entry
  %cmp31.not55 = icmp eq i64 %n, 0
  br i1 %cmp31.not55, label %while.end, label %while.body.preheader

while.body.preheader.loopexit:                    ; preds = %rolled.exit
  %add.ptr.lcssa = phi i8* [ %12, %rolled.exit ]
  %sub.lcssa = phi i64 [ %13, %rolled.exit ]
  br label %while.body.preheader

while.body.preheader:                             ; preds = %while.body.preheader.loopexit, %while.cond.preheader
  %n.addr.0.lcssa66 = phi i64 [ %n, %while.cond.preheader ], [ %sub.lcssa, %while.body.preheader.loopexit ]
  %cp.addr.0.lcssa65 = phi i8* [ %cp, %while.cond.preheader ], [ %add.ptr.lcssa, %while.body.preheader.loopexit ]
  br label %while.body

for.body:                                         ; preds = %for.body.preheader, %rolled.exit
  %n.addr.060 = phi i64 [ %13, %rolled.exit ], [ %n, %for.body.preheader ]
  %cp.addr.059 = phi i8* [ %12, %rolled.exit ], [ %cp, %for.body.preheader ]
  br label %rolled.pre

while.body:                                       ; preds = %while.body.preheader, %while.body
  %n.addr.157 = phi i64 [ %dec, %while.body ], [ %n.addr.0.lcssa66, %while.body.preheader ]
  %cp.addr.156 = phi i8* [ %incdec.ptr, %while.body ], [ %cp.addr.0.lcssa65, %while.body.preheader ]
  %dec = add i64 %n.addr.157, -1
  %0 = load i8, i8* %cp.addr.156, align 1, !tbaa !2
  %idxprom32 = zext i8 %0 to i64
  %arrayidx33 = getelementptr inbounds [256 x i8], [256 x i8]* @TIFFBitRevTable, i64 0, i64 %idxprom32
  %1 = load i8, i8* %arrayidx33, align 1, !tbaa !2
  store i8 %1, i8* %cp.addr.156, align 1, !tbaa !2
  %incdec.ptr = getelementptr inbounds i8, i8* %cp.addr.156, i64 1
  %cmp31.not = icmp eq i64 %dec, 0
  br i1 %cmp31.not, label %while.end.loopexit, label %while.body, !llvm.loop !11

while.end.loopexit:                               ; preds = %while.body
  br label %while.end

while.end:                                        ; preds = %while.end.loopexit, %while.cond.preheader
  ret void

rolled.pre:                                       ; preds = %for.body
  br label %rolled.loop

rolled.loop:                                      ; preds = %rolled.pre, %rolled.loop
  %2 = phi i8 [ 0, %rolled.pre ], [ %10, %rolled.loop ]
  %3 = zext i8 %2 to i64
  %4 = add i64 %3, 1
  %5 = getelementptr i8, i8* %cp.addr.059, i64 %4
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i64
  %8 = getelementptr inbounds [256 x i8], [256 x i8]* @TIFFBitRevTable, i64 0, i64 %7
  %9 = load i8, i8* %8, align 1
  store i8 %9, i8* %5, align 1
  %10 = add i8 %2, 1
  %11 = icmp ne i8 %10, 8
  br i1 %11, label %rolled.loop, label %rolled.exit

rolled.exit:                                      ; preds = %rolled.loop
  %12 = getelementptr inbounds i8, i8* %cp.addr.059, i64 8
  %13 = add i64 %n.addr.060, -8
  %14 = icmp ugt i64 %13, 8
  br i1 %14, label %for.body, label %while.body.preheader.loopexit, !llvm.loop !12
}

code gen 1
destroying tree
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
/home/rodrigo/llvm/loop-rerolling/build/release/bin/clang -std=gnu89 -B /usr/bin -Os -fno-vectorize -fno-slp-vectorize -fno-unroll-loops -c src/tif_zip.c -o src/tif_zip.o   -fuse-ld=
clang-12: warning: argument unused during compilation: '-fuse-ld=' [-Wunused-command-line-argument]
/home/rodrigo/llvm/loop-rerolling/build/release/bin/clang -std=gnu89 -B /usr/bin -Os -fno-vectorize -fno-slp-vectorize -fno-unroll-loops -c src/tif_dirwrite.c -o src/tif_dirwrite.o   -fuse-ld=
clang-12: warning: argument unused during compilation: '-fuse-ld=' [-Wunused-command-line-argument]
src/tif_dirwrite.c:987:28: warning: cast to smaller integer type 'toff_t' (aka 'int') from 'uint32 *' (aka 'unsigned int *') [-Wpointer-to-int-cast]
                (void) TIFFSeekFile(tif, HDROFF(tiff_diroff), SEEK_SET);
                       ~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/tif_dirwrite.c:986:20: note: expanded from macro 'HDROFF'
#define HDROFF(f)       ((toff_t) &(((TIFFHeader*) 0)->f))
                         ^
src/tiffiop.h:168:57: note: expanded from macro 'TIFFSeekFile'
        ((*(tif)->tif_seekproc)((tif)->tif_clientdata,(toff_t)(off),whence))
                                                               ^~~
stores
calls
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   %nextdir = alloca i32, align 4
Skipping:   %diroff = alloca i32, align 4
Skipping:   %dircount = alloca i16, align 2
Here ..
Skipping:   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1) #4
destroying tree
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1) #4
Here ..
Here ..
I:   ret i32 %retval.2
Last:   ret i32 %retval.2
Schedulable: 1
code gen 0
Gains: 6 - 11 = -5
Unprofitable: deleting generated code
Done!
code gen 1
destroying tree
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
destroying tree
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
destroying tree
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   store i32 %mul, i32* %tdir_count, align 4, !tbaa !16
Here ..
Skipping:   %tdir_offset = getelementptr inbounds %struct.TIFFDirEntry, %struct.TIFFDirEntry* %dir, i64 0, i32 3
Here ..
I:   br label %cleanup
Last:   br label %cleanup
Schedulable: 1
code gen 0
Gains: 2 - 15 = -13
Unprofitable: deleting generated code
Done!
code gen 1
destroying tree
calls
stores
calls
stores
calls
Done Loop Roller!
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
destroying tree
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   %idxprom33 = zext i32 %mul31 to i64
Here ..
Skipping:   %add36 = or i32 %mul31, 1
Here ..
Here ..
I:   %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
Last:   %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
Schedulable: 1
code gen 0
Gains: 5 - 11 = -6
Unprofitable: deleting generated code
Done!
code gen 1
destroying tree
calls
stores
calls
stores
calls
Done Loop Roller!
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
destroying tree
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   call void @llvm.lifetime.start.p0i8(i64 20, i8* nonnull %0) #5
Here ..
Skipping:   %1 = bitcast i16* %v to i8*
Here ..
I:   %arraydecay = getelementptr inbounds [10 x i16], [10 x i16]* %buf, i64 0, i64 0
Last:   %arraydecay = getelementptr inbounds [10 x i16], [10 x i16]* %buf, i64 0, i64 0
Schedulable: 1
code gen 0
Gains: 6 - 22 = -16
Unprofitable: deleting generated code
Done!
code gen 1
destroying tree
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %1) #5
Here ..
Here ..
I:   ret i32 %call839
Last:   ret i32 %call839
Schedulable: 1
code gen 0
Gains: 6 - 22 = -16
Unprofitable: deleting generated code
Done!
code gen 1
destroying tree
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
destroying tree
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
destroying tree
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
destroying tree
calls
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
destroying tree
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
destroying tree
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
destroying tree
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
destroying tree
calls
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
destroying tree
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %0) #5
Here ..
Skipping:   %1 = bitcast double* %v to i8*
Here ..
I:   %arraydecay = getelementptr inbounds [10 x double], [10 x double]* %buf, i64 0, i64 0
Last:   %arraydecay = getelementptr inbounds [10 x double], [10 x double]* %buf, i64 0, i64 0
Schedulable: 1
code gen 0
Gains: 6 - 22 = -16
Unprofitable: deleting generated code
Done!
code gen 1
destroying tree
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
destroying tree
calls
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
destroying tree
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
destroying tree
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
destroying tree
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
destroying tree
calls
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
destroying tree
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1) #5
Here ..
Here ..
I:   ret i32 %retval.0.i
Last:   ret i32 %retval.0.i
Schedulable: 1
code gen 0
Gains: 6 - 22 = -16
Unprofitable: deleting generated code
Done!
code gen 1
destroying tree
Done Loop Roller!
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
destroying tree
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
destroying tree
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
destroying tree
calls
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %0) #5
Here ..
Skipping:   %field_writecount = getelementptr inbounds %struct.TIFFFieldInfo, %struct.TIFFFieldInfo* %fip, i64 0, i32 2
Skipping:   %1 = load i16, i16* %field_writecount, align 2, !tbaa !2
destroying tree
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
destroying tree
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
destroying tree
calls
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
destroying tree
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
destroying tree
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
destroying tree
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %2) #5
Here ..
Here ..
I:   ret i32 %retval.12
Last:   ret i32 %retval.12
Schedulable: 1
code gen 0
Gains: 6 - 22 = -16
Unprofitable: deleting generated code
Done!
code gen 1
destroying tree
Done Loop Roller!
stores
calls
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %0) #5
Here ..
Skipping:   %1 = bitcast i32* %diroff to i8*
Here ..
Skipping:   %2 = bitcast [3 x i64]* %fields to i8*
Here ..
I:   %tif_mode = getelementptr inbounds %struct.tiff, %struct.tiff* %tif, i64 0, i32 2
Last:   %tif_mode = getelementptr inbounds %struct.tiff, %struct.tiff* %tif, i64 0, i32 2
Schedulable: 1
code gen 0
Gains: 9 - 28 = -19
Unprofitable: deleting generated code
Done!
code gen 1
destroying tree
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   %16 = bitcast i32* %nextdir.i to i8*
Here ..
Here ..
Here ..
I:   %tif_seekproc.i = getelementptr inbounds %struct.tiff, %struct.tiff* %tif, i64 0, i32 51
Last:   %tif_seekproc.i = getelementptr inbounds %struct.tiff, %struct.tiff* %tif, i64 0, i32 51
Schedulable: 1
code gen 0
Gains: 6 - 17 = -11
Unprofitable: deleting generated code
Done!
code gen 1
destroying tree
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %18) #5
Here ..
Here ..
I:   br label %bad
Last:   br label %bad
Schedulable: 1
code gen 0
Gains: 6 - 11 = -5
Unprofitable: deleting generated code
Done!
code gen 1
destroying tree
stores
calls
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %18) #5
Here ..
Here ..
I:   %.pre539 = load i32, i32* %tif_diroff, align 4, !tbaa !23
Last:   %.pre539 = load i32, i32* %tif_diroff, align 4, !tbaa !23
Schedulable: 1
code gen 0
Gains: 6 - 11 = -5
Unprofitable: deleting generated code
Done!
code gen 1
destroying tree
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
destroying tree
calls
stores
calls
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
destroying tree
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   call fastcc void @TIFFSetupShortLong(%struct.tiff* nonnull %tif, i32 256, %struct.TIFFDirEntry* %dir.0533, i32 %96) #7
Here ..
Skipping:   %97 = load i32, i32* %td_imagelength, align 4, !tbaa !53
destroying tree
stores
calls
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   call fastcc void @TIFFSetupShortLong(%struct.tiff* nonnull %tif, i32 322, %struct.TIFFDirEntry* %dir.0533, i32 %98) #7
Here ..
Skipping:   %99 = load i32, i32* %td_tilelength, align 8, !tbaa !55
destroying tree
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   call void @llvm.lifetime.start.p0i8(i64 20, i8* nonnull %77) #5
Here ..
Here ..
I:   %101 = load i16, i16* %td_samplesperpixel.i518, align 2, !tbaa !56
Last:   %101 = load i16, i16* %td_samplesperpixel.i518, align 2, !tbaa !56
Schedulable: 1
code gen 0
Gains: 6 - 22 = -16
Unprofitable: deleting generated code
Done!
code gen 1
destroying tree
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %78) #5
Here ..
Here ..
I:   %tobool161.not = icmp eq i32 %call839.i, 0
Last:   %tobool161.not = icmp eq i32 %call839.i, 0
Schedulable: 1
code gen 0
Gains: 6 - 22 = -16
Unprofitable: deleting generated code
Done!
code gen 1
destroying tree
stores
calls
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %74) #5
Here ..
Here ..
I:   %106 = load i16, i16* %td_samplesperpixel.i518, align 2, !tbaa !56
Last:   %106 = load i16, i16* %td_samplesperpixel.i518, align 2, !tbaa !56
Schedulable: 1
code gen 0
Gains: 6 - 22 = -16
Unprofitable: deleting generated code
Done!
code gen 1
destroying tree
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
destroying tree
calls
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
destroying tree
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
destroying tree
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
destroying tree
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
destroying tree
calls
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
destroying tree
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %75) #5
Here ..
Here ..
I:   %tobool168.not = icmp eq i32 %retval.0.i.i, 0
Last:   %tobool168.not = icmp eq i32 %retval.0.i.i, 0
Schedulable: 1
code gen 0
Gains: 6 - 22 = -16
Unprofitable: deleting generated code
Done!
code gen 1
destroying tree
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
destroying tree
calls
stores
calls
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
destroying tree
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
destroying tree
calls
stores
calls
stores
calls
stores
calls
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %3) #5
Here ..
Here ..
Here ..
I:   ret i32 %retval.0
Last:   ret i32 %retval.0
Schedulable: 1
code gen 0
Gains: 9 - 28 = -19
Unprofitable: deleting generated code
Done!
code gen 1
destroying tree
Done Loop Roller!
1 warning generated.
/home/rodrigo/llvm/loop-rerolling/build/release/bin/clang -std=gnu89 -B /usr/bin -Os -fno-vectorize -fno-slp-vectorize -fno-unroll-loops -c src/tif_compress.c -o src/tif_compress.o   -fuse-ld=
clang-12: warning: argument unused during compilation: '-fuse-ld=' [-Wunused-command-line-argument]
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
Done Loop Roller!
stores
calls
Done Loop Roller!
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
Done Loop Roller!
stores
calls
Done Loop Roller!
stores
calls
Done Loop Roller!
stores
calls
Done Loop Roller!
stores
calls
Done Loop Roller!
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   %tif_setupdecode = getelementptr inbounds %struct.tiff, %struct.tiff* %tif, i64 0, i32 21
Here ..
Skipping:   %tif_predecode = getelementptr inbounds %struct.tiff, %struct.tiff* %tif, i64 0, i32 22
Skipping:   store i32 (%struct.tiff*, i16)* @_TIFFNoPreCode, i32 (%struct.tiff*, i16)** %tif_predecode, align 8, !tbaa !13
destroying tree
calls
Done Loop Roller!
stores
calls
Done Loop Roller!
stores
calls
Done Loop Roller!
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   %tif_setupdecode.i = getelementptr inbounds %struct.tiff, %struct.tiff* %tif, i64 0, i32 21
Here ..
Skipping:   %tif_predecode.i = getelementptr inbounds %struct.tiff, %struct.tiff* %tif, i64 0, i32 22
Skipping:   store i32 (%struct.tiff*, i16)* @_TIFFNoPreCode, i32 (%struct.tiff*, i16)** %tif_predecode.i, align 8, !tbaa !13
destroying tree
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   %add.ptr = getelementptr inbounds i8, i8* %call2, i64 16
Here ..
Here ..
Here ..
I:   %call10 = tail call i8* @strcpy(i8* nonnull %add.ptr5, i8* nonnull dereferenceable(1) %name) #8
Last:   %call10 = tail call i8* @strcpy(i8* nonnull %add.ptr5, i8* nonnull dereferenceable(1) %name) #8
Schedulable: 1
code gen 0
Gains: 5 - 26 = -21
Unprofitable: deleting generated code
Done!
code gen 1
destroying tree
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
/home/rodrigo/llvm/loop-rerolling/build/release/bin/clang -std=gnu89 -B /usr/bin -Os -fno-vectorize -fno-slp-vectorize -fno-unroll-loops -c src/tif_fax3sm.c -o src/tif_fax3sm.o   -fuse-ld=
clang-12: warning: argument unused during compilation: '-fuse-ld=' [-Wunused-command-line-argument]
/home/rodrigo/llvm/loop-rerolling/build/release/bin/clang -std=gnu89 -B /usr/bin -Os -fno-vectorize -fno-slp-vectorize -fno-unroll-loops -c src/ctuning-rtl.c -o src/ctuning-rtl.o   -fuse-ld=
clang-12: warning: argument unused during compilation: '-fuse-ld=' [-Wunused-command-line-argument]
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
/home/rodrigo/llvm/loop-rerolling/build/release/bin/clang -std=gnu89 -B /usr/bin -Os -fno-vectorize -fno-slp-vectorize -fno-unroll-loops -c src/tif_strip.c -o src/tif_strip.o   -fuse-ld=
clang-12: warning: argument unused during compilation: '-fuse-ld=' [-Wunused-command-line-argument]
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
Done Loop Roller!
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
/home/rodrigo/llvm/loop-rerolling/build/release/bin/clang -std=gnu89 -B /usr/bin -Os -fno-vectorize -fno-slp-vectorize -fno-unroll-loops -c src/tiff2bw.c -o src/tiff2bw.o   -fuse-ld=
clang-12: warning: argument unused during compilation: '-fuse-ld=' [-Wunused-command-line-argument]
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %0) #12
Here ..
Skipping:   %1 = bitcast i16* %shortv2 to i8*
Here ..
Skipping:   %2 = bitcast i16** %shortav to i8*
Here ..
Skipping:   %3 = bitcast float* %floatv to i8*
Here ..
Skipping:   %4 = bitcast float** %floatav to i8*
Here ..
Skipping:   %5 = bitcast i8** %stringv to i8*
Here ..
Skipping:   %6 = bitcast i32* %longv to i8*
Here ..
I:   switch i32 %type, label %sw.default [
    i32 3, label %sw.bb
    i32 4, label %sw.bb36
    i32 5, label %sw.bb44
    i32 2, label %sw.bb71
  ]
Last:   switch i32 %type, label %sw.default [
    i32 3, label %sw.bb
    i32 4, label %sw.bb36
    i32 5, label %sw.bb44
    i32 2, label %sw.bb71
  ]
Schedulable: 1
code gen 0
Gains: 21 - 52 = -31
Unprofitable: deleting generated code
Done!
code gen 1
destroying tree
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #12
Here ..
Here ..
Here ..
Here ..
Here ..
Here ..
Here ..
I:   ret void
Last:   ret void
Schedulable: 1
code gen 0
Gains: 21 - 52 = -31
Unprofitable: deleting generated code
Done!
code gen 1
destroying tree
Done Loop Roller!
stores
calls
stores
calls
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %0) #12
Here ..
Here ..
Here ..
Here ..
Here ..
Here ..
Here ..
I:   switch i32 %9, label %sw.default.i [
    i32 3, label %sw.bb.i
    i32 4, label %sw.bb36.i
    i32 5, label %sw.bb44.i
    i32 2, label %sw.bb71.i
  ]
Last:   switch i32 %9, label %sw.default.i [
    i32 3, label %sw.bb.i
    i32 4, label %sw.bb36.i
    i32 5, label %sw.bb44.i
    i32 2, label %sw.bb71.i
  ]
Schedulable: 1
code gen 0
Gains: 21 - 52 = -31
Unprofitable: deleting generated code
Done!
code gen 1
destroying tree
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #12
Here ..
Here ..
Here ..
Here ..
Here ..
Here ..
Here ..
I:   %incdec.ptr = getelementptr inbounds %struct.cpTag, %struct.cpTag* %p.06, i64 1
Last:   %incdec.ptr = getelementptr inbounds %struct.cpTag, %struct.cpTag* %p.06, i64 1
Schedulable: 1
code gen 0
Gains: 21 - 52 = -31
Unprofitable: deleting generated code
Done!
code gen 1
destroying tree
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %0) #11
Here ..
Skipping:   %1 = bitcast i32* %h to i8*
Here ..
Skipping:   %2 = bitcast i16* %samplesperpixel to i8*
Here ..
Skipping:   %3 = bitcast i16* %bitspersample to i8*
Here ..
Skipping:   %4 = bitcast i16* %config to i8*
Here ..
Skipping:   %5 = bitcast i16* %photometric to i8*
Here ..
Skipping:   %6 = bitcast i16** %red to i8*
Here ..
Skipping:   %7 = bitcast i16** %green to i8*
Here ..
Skipping:   %8 = bitcast i16** %blue to i8*
Here ..
Skipping:   %9 = getelementptr inbounds [1024 x i8], [1024 x i8]* %thing, i64 0, i64 0
Here ..
I:   br label %while.cond
Last:   br label %while.cond
Schedulable: 1
code gen 0
Gains: 30 - 70 = -40
Unprofitable: deleting generated code
Done!
code gen 1
destroying tree
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %36) #11
Here ..
Here ..
Here ..
Here ..
Here ..
Here ..
Here ..
I:   switch i32 %45, label %sw.default.i.i [
    i32 3, label %sw.bb.i.i
    i32 4, label %sw.bb36.i.i
    i32 5, label %sw.bb44.i.i
    i32 2, label %sw.bb71.i.i
  ]
Last:   switch i32 %45, label %sw.default.i.i [
    i32 3, label %sw.bb.i.i
    i32 4, label %sw.bb36.i.i
    i32 5, label %sw.bb44.i.i
    i32 2, label %sw.bb71.i.i
  ]
Schedulable: 1
code gen 0
Gains: 21 - 52 = -31
Unprofitable: deleting generated code
Done!
code gen 1
destroying tree
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %42) #11
Here ..
Here ..
Here ..
Here ..
Here ..
Here ..
Here ..
I:   %incdec.ptr.i = getelementptr inbounds %struct.cpTag, %struct.cpTag* %p.06.i, i64 1
Last:   %incdec.ptr.i = getelementptr inbounds %struct.cpTag, %struct.cpTag* %p.06.i, i64 1
Schedulable: 1
code gen 0
Gains: 21 - 52 = -31
Unprofitable: deleting generated code
Done!
code gen 1
destroying tree
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   call void @TIFFClose(%struct.tiff* nonnull %call18) #12
Here ..
Here ..
I:   br label %cleanup
Last:   br label %cleanup
Schedulable: 1
code gen 0
Gains: 4 - 10 = -6
Unprofitable: deleting generated code
Done!
code gen 1
destroying tree
stores
calls
stores
calls
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %9) #11
Here ..
Here ..
Here ..
Here ..
Here ..
Here ..
Here ..
Here ..
Here ..
Here ..
I:   ret i32 %retval.0
Last:   ret i32 %retval.0
Schedulable: 1
code gen 0
Gains: 30 - 70 = -40
Unprofitable: deleting generated code
Done!
code gen 1
destroying tree
Done Loop Roller!
/home/rodrigo/llvm/loop-rerolling/build/release/bin/clang -std=gnu89 -B /usr/bin -Os -fno-vectorize -fno-slp-vectorize -fno-unroll-loops -c src/getopt.c -o src/getopt.o   -fuse-ld=
clang-12: warning: argument unused during compilation: '-fuse-ld=' [-Wunused-command-line-argument]
/home/rodrigo/llvm/loop-rerolling/build/release/bin/clang -std=gnu89 -B /usr/bin -Os -fno-vectorize -fno-slp-vectorize -fno-unroll-loops -c src/tif_aux.c -o src/tif_aux.o   -fuse-ld=
clang-12: warning: argument unused during compilation: '-fuse-ld=' [-Wunused-command-line-argument]
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   %call20 = tail call i8* @_TIFFmalloc(i32 %mul) #6
Here ..
Here ..
Skipping:   %8 = load i8*, i8** %2, align 8, !tbaa !11
destroying tree
calls
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   %call20 = tail call i8* @_TIFFmalloc(i32 %mul) #6
Here ..
Skipping:   %arrayidx21 = getelementptr inbounds %struct.TIFFDirectory, %struct.TIFFDirectory* %td, i64 0, i32 54, i64 1
Skipping:   %7 = bitcast i16** %arrayidx21 to i8**
Skipping:   store i8* %call20, i8** %7, align 8, !tbaa !11
destroying tree
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   %call20 = tail call i8* @_TIFFmalloc(i32 %mul) #6
Skipping:   %arrayidx21 = getelementptr inbounds %struct.TIFFDirectory, %struct.TIFFDirectory* %td, i64 0, i32 54, i64 1
Skipping:   %7 = bitcast i16** %arrayidx21 to i8**
Skipping:   store i8* %call20, i8** %7, align 8, !tbaa !11
destroying tree
stores
calls
Done Loop Roller!
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   %arrayidx = getelementptr inbounds float, float* %.cast, i64 %2
Here ..
Skipping:   %3 = or i64 %2, 1
Here ..
Here ..
I:   %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
Last:   %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
Schedulable: 1
code gen 0
Gains: 5 - 11 = -6
Unprofitable: deleting generated code
Done!
code gen 1
destroying tree
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   %130 = bitcast i8* %call255 to float*
Here ..
Skipping:   %131 = bitcast float** %td_ycbcrcoeffs to i8**
Skipping:   store i8* %call255, i8** %131, align 8, !tbaa !31
destroying tree
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   %call20.i = tail call i8* @_TIFFmalloc(i32 %mul.i) #6
Here ..
Here ..
Skipping:   %168 = load i8*, i8** %161, align 8, !tbaa !27
destroying tree
calls
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   %call20.i = tail call i8* @_TIFFmalloc(i32 %mul.i) #6
Here ..
Skipping:   %arrayidx21.i = getelementptr inbounds %struct.tiff, %struct.tiff* %tif, i64 0, i32 6, i32 54, i64 1
Skipping:   %167 = bitcast i16** %arrayidx21.i to i8**
Skipping:   store i8* %call20.i, i8** %167, align 8, !tbaa !27
destroying tree
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   %call20.i = tail call i8* @_TIFFmalloc(i32 %mul.i) #6
Skipping:   %arrayidx21.i = getelementptr inbounds %struct.tiff, %struct.tiff* %tif, i64 0, i32 6, i32 54, i64 1
Skipping:   %167 = bitcast i16** %arrayidx21.i to i8**
Skipping:   store i8* %call20.i, i8** %167, align 8, !tbaa !27
destroying tree
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   %arrayidx.i = getelementptr inbounds float, float* %.cast.i, i64 %194
Here ..
Skipping:   %195 = or i64 %194, 1
Here ..
Here ..
I:   %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
Last:   %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
Schedulable: 1
code gen 0
Gains: 5 - 11 = -6
Unprofitable: deleting generated code
Done!
code gen 1
destroying tree
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
Done Loop Roller!
/home/rodrigo/llvm/loop-rerolling/build/release/bin/clang -std=gnu89 -B /usr/bin -Os -fno-vectorize -fno-slp-vectorize -fno-unroll-loops -c src/tif_pixarlog.c -o src/tif_pixarlog.o   -fuse-ld=
clang-12: warning: argument unused during compilation: '-fuse-ld=' [-Wunused-command-line-argument]
/home/rodrigo/llvm/loop-rerolling/build/release/bin/clang -std=gnu89 -B /usr/bin -Os -fno-vectorize -fno-slp-vectorize -fno-unroll-loops -c src/tif_close.c -o src/tif_close.o   -fuse-ld=
clang-12: warning: argument unused during compilation: '-fuse-ld=' [-Wunused-command-line-argument]
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
/home/rodrigo/llvm/loop-rerolling/build/release/bin/clang -std=gnu89 -B /usr/bin -Os -fno-vectorize -fno-slp-vectorize -fno-unroll-loops -c src/tif_dirinfo.c -o src/tif_dirinfo.o   -fuse-ld=
clang-12: warning: argument unused during compilation: '-fuse-ld=' [-Wunused-command-line-argument]
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
/home/rodrigo/llvm/loop-rerolling/build/release/bin/clang -std=gnu89 -B /usr/bin -Os -fno-vectorize -fno-slp-vectorize -fno-unroll-loops -c src/tif_dumpmode.c -o src/tif_dumpmode.o   -fuse-ld=
clang-12: warning: argument unused during compilation: '-fuse-ld=' [-Wunused-command-line-argument]
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   %tif_decoderow = getelementptr inbounds %struct.tiff, %struct.tiff* %tif, i64 0, i32 26
Here ..
Here ..
Here ..
Here ..
Here ..
Here ..
Here ..
I:   %tif_seek = getelementptr inbounds %struct.tiff, %struct.tiff* %tif, i64 0, i32 33
Last:   %tif_seek = getelementptr inbounds %struct.tiff, %struct.tiff* %tif, i64 0, i32 33
Schedulable: 1
code gen 0
Gains: 12 - 45 = -33
Unprofitable: deleting generated code
Done!
code gen 1
destroying tree
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
Done Loop Roller!
/home/rodrigo/llvm/loop-rerolling/build/release/bin/clang -std=gnu89 -B /usr/bin -Os -fno-vectorize -fno-slp-vectorize -fno-unroll-loops -c src/tif_fax3.c -o src/tif_fax3.o   -fuse-ld=
clang-12: warning: argument unused during compilation: '-fuse-ld=' [-Wunused-command-line-argument]
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   %tif_vgetfield = getelementptr inbounds %struct.tiff, %struct.tiff* %tif, i64 0, i32 58
Here ..
Skipping:   %3 = load i32 (%struct.tiff*, i32, %struct.__va_list_tag*)*, i32 (%struct.tiff*, i32, %struct.__va_list_tag*)** %tif_vgetfield, align 8, !tbaa !14
destroying tree
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   %tif_vgetfield = getelementptr inbounds %struct.tiff, %struct.tiff* %tif, i64 0, i32 58
Here ..
Skipping:   store i32 (%struct.tiff*, i32, %struct.__va_list_tag*)* @Fax3VGetField, i32 (%struct.tiff*, i32, %struct.__va_list_tag*)** %tif_vgetfield, align 8, !tbaa !14
destroying tree
calls
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   %tif_setupdecode = getelementptr inbounds %struct.tiff, %struct.tiff* %tif, i64 0, i32 21
Here ..
Skipping:   %tif_predecode = getelementptr inbounds %struct.tiff, %struct.tiff* %tif, i64 0, i32 22
Skipping:   store i32 (%struct.tiff*, i16)* @Fax3PreDecode, i32 (%struct.tiff*, i16)** %tif_predecode, align 8, !tbaa !27
destroying tree
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   %tif_decoderow = getelementptr inbounds %struct.tiff, %struct.tiff* %tif, i64 0, i32 26
Here ..
Here ..
Here ..
Here ..
Here ..
Here ..
Here ..
I:   %tif_postencode = getelementptr inbounds %struct.tiff, %struct.tiff* %tif, i64 0, i32 25
Last:   %tif_postencode = getelementptr inbounds %struct.tiff, %struct.tiff* %tif, i64 0, i32 25
Schedulable: 1
code gen 0
Gains: 12 - 45 = -33
Unprofitable: deleting generated code
Done!
code gen 1
destroying tree
calls
stores
calls
Done Loop Roller!
stores
calls
Done Loop Roller!
stores
calls
Done Loop Roller!
stores
calls
Done Loop Roller!
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   store i32 %2, i32* %pa.6.lcssa, align 4, !tbaa !24
Here ..
Skipping:   %incdec.ptr577 = getelementptr inbounds i32, i32* %pa.6.lcssa, i64 2
Here ..
I:   br label %EOFG4
Last:   br label %EOFG4
Schedulable: 1
code gen 0
Gains: 3 - 10 = -7
Unprofitable: deleting generated code
Done!
code gen 1
destroying tree
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   store i32 %2, i32* %pa.11.lcssa, align 4, !tbaa !24
Here ..
Skipping:   %incdec.ptr699 = getelementptr inbounds i32, i32* %pa.11.lcssa, i64 2
Here ..
I:   br label %do.end709
Last:   br label %do.end709
Schedulable: 1
code gen 0
Gains: 3 - 10 = -7
Unprofitable: deleting generated code
Done!
code gen 1
destroying tree
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   %109 = load i32*, i32** %refruns, align 8, !tbaa !23
Here ..
Skipping:   store i32* %108, i32** %refruns, align 8, !tbaa !23
destroying tree
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
destroying tree
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
destroying tree
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
destroying tree
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
destroying tree
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   %sub79 = sub i32 %a1.0, %a0.0
Here ..
Here ..
Here ..
I:   br label %if.end96
Last:   br label %if.end96
Schedulable: 1
code gen 0
Gains: 10 - 25 = -15
Unprofitable: deleting generated code
Done!
code gen 1
destroying tree
stores
calls
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   %sub81 = sub i32 %a1.0, %a0.0
Here ..
Here ..
Here ..
I:   br label %if.end96
Last:   br label %if.end96
Schedulable: 1
code gen 0
Gains: 10 - 25 = -15
Unprofitable: deleting generated code
Done!
code gen 1
destroying tree
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   tail call fastcc void @Fax3PutBits(%struct.tiff* %tif, i32 1, i32 12) #7
Here ..
Here ..
I:   %bit = getelementptr inbounds %struct.Fax3EncodeState, %struct.Fax3EncodeState* %1, i64 0, i32 2
Last:   %bit = getelementptr inbounds %struct.Fax3EncodeState, %struct.Fax3EncodeState* %1, i64 0, i32 2
Schedulable: 1
code gen 0
Gains: 8 - 6 = 2
Unprofitable: deleting generated code
Done!
code gen 1
destroying tree
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
destroying tree
calls
stores
calls
Done Loop Roller!
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   %tif_decoderow = getelementptr inbounds %struct.tiff, %struct.tiff* %tif, i64 0, i32 26
Here ..
Here ..
Here ..
Here ..
I:   %call1 = tail call i32 (%struct.tiff*, i32, ...) @TIFFSetField(%struct.tiff* %tif, i32 65536, i32 7) #8
Last:   %call1 = tail call i32 (%struct.tiff*, i32, ...) @TIFFSetField(%struct.tiff* %tif, i32 65536, i32 7) #8
Schedulable: 1
code gen 0
Gains: 6 - 19 = -13
Unprofitable: deleting generated code
Done!
code gen 1
destroying tree
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   store i32 %2, i32* %pa.3.lcssa, align 4, !tbaa !29
Here ..
Skipping:   %incdec.ptr202 = getelementptr inbounds i32, i32* %pa.3.lcssa, i64 2
Here ..
I:   br label %EOFRLE
Last:   br label %EOFRLE
Schedulable: 1
code gen 0
Gains: 3 - 10 = -7
Unprofitable: deleting generated code
Done!
code gen 1
destroying tree
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   store i32 %2, i32* %pa.7.lcssa, align 4, !tbaa !29
Here ..
Skipping:   %incdec.ptr276 = getelementptr inbounds i32, i32* %pa.7.lcssa, i64 2
Here ..
I:   br label %do.end286
Last:   br label %do.end286
Schedulable: 1
code gen 0
Gains: 3 - 10 = -7
Unprofitable: deleting generated code
Done!
code gen 1
destroying tree
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
destroying tree
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
destroying tree
calls
stores
calls
Done Loop Roller!
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   %tif_decoderow = getelementptr inbounds %struct.tiff, %struct.tiff* %tif, i64 0, i32 26
Here ..
Here ..
Here ..
Here ..
I:   %call1 = tail call i32 (%struct.tiff*, i32, ...) @TIFFSetField(%struct.tiff* %tif, i32 65536, i32 11) #8
Last:   %call1 = tail call i32 (%struct.tiff*, i32, ...) @TIFFSetField(%struct.tiff* %tif, i32 65536, i32 11) #8
Schedulable: 1
code gen 0
Gains: 6 - 19 = -13
Unprofitable: deleting generated code
Done!
code gen 1
destroying tree
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   %call98 = tail call %struct.TIFFFieldInfo* @_TIFFFieldWithTag(%struct.tiff* nonnull %tif, i32 %tag) #7
Here ..
Skipping:   %field_bit = getelementptr inbounds %struct.TIFFFieldInfo, %struct.TIFFFieldInfo* %call98, i64 0, i32 4
Skipping:   %51 = load i16, i16* %field_bit, align 4, !tbaa !25
destroying tree
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
destroying tree
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   %tif_decoderow = getelementptr inbounds %struct.tiff, %struct.tiff* %tif, i64 0, i32 26
Here ..
Here ..
Here ..
Here ..
I:   br label %cleanup71
Last:   br label %cleanup71
Schedulable: 1
code gen 0
Gains: 6 - 19 = -13
Unprofitable: deleting generated code
Done!
code gen 1
destroying tree
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
destroying tree
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   store i32 %conv5, i32* %3, align 4, !tbaa !22
Here ..
Skipping:   %arrayidx8 = getelementptr inbounds i32, i32* %3, i64 1
Here ..
I:   br label %if.end9
Last:   br label %if.end9
Schedulable: 1
code gen 0
Gains: 3 - 10 = -7
Unprofitable: deleting generated code
Done!
code gen 1
destroying tree
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   store i32 %2, i32* %pa.3.lcssa, align 4, !tbaa !32
Here ..
Skipping:   %incdec.ptr307 = getelementptr inbounds i32, i32* %pa.3.lcssa, i64 2
Here ..
I:   br label %EOF1Da
Last:   br label %EOF1Da
Schedulable: 1
code gen 0
Gains: 3 - 10 = -7
Unprofitable: deleting generated code
Done!
code gen 1
destroying tree
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   store i32 %2, i32* %pa.7.lcssa, align 4, !tbaa !32
Here ..
Skipping:   %incdec.ptr381 = getelementptr inbounds i32, i32* %pa.7.lcssa, i64 2
Here ..
I:   br label %do.end391
Last:   br label %do.end391
Schedulable: 1
code gen 0
Gains: 3 - 10 = -7
Unprofitable: deleting generated code
Done!
code gen 1
destroying tree
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   store i32 %2, i32* %9, align 4, !tbaa !32
Here ..
Skipping:   %incdec.ptr467 = getelementptr inbounds i32, i32* %9, i64 2
Here ..
I:   br label %EOF1Da
Last:   br label %EOF1Da
Schedulable: 1
code gen 0
Gains: 3 - 10 = -7
Unprofitable: deleting generated code
Done!
code gen 1
destroying tree
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
destroying tree
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
destroying tree
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
destroying tree
calls
stores
calls
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
destroying tree
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
destroying tree
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
destroying tree
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
destroying tree
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
destroying tree
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
destroying tree
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   store i32 0, i32* %tag, align 8, !tbaa !25
Here ..
Skipping:   %33 = load i32, i32* %maxk, align 4, !tbaa !31
destroying tree
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
destroying tree
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   store i32 %2, i32* %pa.3.lcssa, align 4, !tbaa !29
Here ..
Skipping:   %incdec.ptr339 = getelementptr inbounds i32, i32* %pa.3.lcssa, i64 2
Here ..
I:   br label %EOF2Da
Last:   br label %EOF2Da
Schedulable: 1
code gen 0
Gains: 3 - 10 = -7
Unprofitable: deleting generated code
Done!
code gen 1
destroying tree
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   store i32 %2, i32* %pa.7.lcssa, align 4, !tbaa !29
Here ..
Skipping:   %incdec.ptr413 = getelementptr inbounds i32, i32* %pa.7.lcssa, i64 2
Here ..
I:   br label %if.end1157
Last:   br label %if.end1157
Schedulable: 1
code gen 0
Gains: 3 - 10 = -7
Unprofitable: deleting generated code
Done!
code gen 1
destroying tree
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   store i32 %2, i32* %pa.15.lcssa, align 4, !tbaa !29
Here ..
Skipping:   %incdec.ptr1024 = getelementptr inbounds i32, i32* %pa.15.lcssa, i64 2
Here ..
I:   br label %EOF2Da
Last:   br label %EOF2Da
Schedulable: 1
code gen 0
Gains: 3 - 10 = -7
Unprofitable: deleting generated code
Done!
code gen 1
destroying tree
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   store i32 %2, i32* %pa.20.lcssa, align 4, !tbaa !29
Here ..
Skipping:   %incdec.ptr1146 = getelementptr inbounds i32, i32* %pa.20.lcssa, i64 2
Here ..
I:   br label %if.end1157
Last:   br label %if.end1157
Schedulable: 1
code gen 0
Gains: 3 - 10 = -7
Unprofitable: deleting generated code
Done!
code gen 1
destroying tree
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   %155 = load i32*, i32** %refruns, align 8, !tbaa !28
Here ..
Skipping:   store i32* %154, i32** %refruns, align 8, !tbaa !28
destroying tree
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   store i32 %2, i32* %158, align 4, !tbaa !29
Here ..
Skipping:   %incdec.ptr1243 = getelementptr inbounds i32, i32* %158, i64 2
Here ..
I:   br label %EOF2Da
Last:   br label %EOF2Da
Schedulable: 1
code gen 0
Gains: 3 - 10 = -7
Unprofitable: deleting generated code
Done!
code gen 1
destroying tree
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
destroying tree
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
destroying tree
calls
stores
calls
Done Loop Roller!
/home/rodrigo/llvm/loop-rerolling/build/release/bin/clang -std=gnu89 -B /usr/bin -Os -fno-vectorize -fno-slp-vectorize -fno-unroll-loops -c src/tif_next.c -o src/tif_next.o   -fuse-ld=
clang-12: warning: argument unused during compilation: '-fuse-ld=' [-Wunused-command-line-argument]
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   %tif_decoderow = getelementptr inbounds %struct.tiff, %struct.tiff* %tif, i64 0, i32 26
Here ..
Here ..
Here ..
Here ..
I:   ret i32 1
Last:   ret i32 1
Schedulable: 1
code gen 0
Gains: 6 - 19 = -13
Unprofitable: deleting generated code
Done!
code gen 1
destroying tree
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
/home/rodrigo/llvm/loop-rerolling/build/release/bin/clang -std=gnu89 -B /usr/bin -Os -fno-vectorize -fno-slp-vectorize -fno-unroll-loops -c src/tif_predict.c -o src/tif_predict.o   -fuse-ld=
clang-12: warning: argument unused during compilation: '-fuse-ld=' [-Wunused-command-line-argument]
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   %tif_vgetfield = getelementptr inbounds %struct.tiff, %struct.tiff* %tif, i64 0, i32 58
Here ..
Skipping:   %2 = load i32 (%struct.tiff*, i32, %struct.__va_list_tag*)*, i32 (%struct.tiff*, i32, %struct.__va_list_tag*)** %tif_vgetfield, align 8, !tbaa !13
destroying tree
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   %tif_data = getelementptr inbounds %struct.tiff, %struct.tiff* %tif, i64 0, i32 37
Skipping:   tail call void @_TIFFMergeFieldInfo(%struct.tiff* %tif, %struct.TIFFFieldInfo* getelementptr inbounds ([1 x %struct.TIFFFieldInfo], [1 x %struct.TIFFFieldInfo]* @predictFieldInfo, i64 0, i64 0), i32 1) #5
destroying tree
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   %tif_decoderow = getelementptr inbounds %struct.tiff, %struct.tiff* %tif, i64 0, i32 26
Here ..
Skipping:   %5 = load i32 (%struct.tiff*, i8*, i32, i16)*, i32 (%struct.tiff*, i8*, i32, i16)** %tif_decoderow, align 8, !tbaa !18
destroying tree
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   %tif_decoderow = getelementptr inbounds %struct.tiff, %struct.tiff* %tif, i64 0, i32 26
Here ..
Skipping:   store i32 (%struct.tiff*, i8*, i32, i16)* @PredictorDecodeRow, i32 (%struct.tiff*, i8*, i32, i16)** %tif_decoderow, align 8, !tbaa !18
destroying tree
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   %tif_encoderow = getelementptr inbounds %struct.tiff, %struct.tiff* %tif, i64 0, i32 27
Here ..
Skipping:   store i32 (%struct.tiff*, i8*, i32, i16)* @PredictorEncodeRow, i32 (%struct.tiff*, i8*, i32, i16)** %tif_encoderow, align 8, !tbaa !18
destroying tree
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   %tif_encoderow = getelementptr inbounds %struct.tiff, %struct.tiff* %tif, i64 0, i32 27
Here ..
Skipping:   %5 = load i32 (%struct.tiff*, i8*, i32, i16)*, i32 (%struct.tiff*, i8*, i32, i16)** %tif_encoderow, align 8, !tbaa !18
destroying tree
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   %add.ptr = getelementptr inbounds i8, i8* %cp.0, i64 3
Here ..
Here ..
Here ..
Here ..
I:   %cmp23 = icmp sgt i32 %cc.addr.0, 3
Last:   %cmp23 = icmp sgt i32 %cc.addr.0, 3
Schedulable: 1
code gen 0
Gains: 12 - 15 = -3
Unprofitable: deleting generated code
Done!
code gen 1
destroying tree
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   %add.ptr41 = getelementptr inbounds i8, i8* %cp.1, i64 4
Here ..
Here ..
Here ..
Here ..
Here ..
I:   %cmp63 = icmp sgt i32 %cc.addr.1, 4
Last:   %cmp63 = icmp sgt i32 %cc.addr.1, 4
Schedulable: 1
code gen 0
Gains: 16 - 17 = -1
Unprofitable: deleting generated code
Done!
code gen 1
destroying tree
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   %arrayidx8 = getelementptr inbounds i8, i8* %cp.0, i64 3
Here ..
Here ..
Here ..
Here ..
I:   %sub23 = add nsw i32 %cc.addr.0, -3
Last:   %sub23 = add nsw i32 %cc.addr.0, -3
Schedulable: 1
code gen 0
Gains: 12 - 15 = -3
Unprofitable: deleting generated code
Done!
code gen 1
destroying tree
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   %arrayidx44 = getelementptr inbounds i8, i8* %cp.1, i64 4
Here ..
Here ..
Here ..
Here ..
Here ..
I:   %sub66 = add nsw i32 %cc.addr.1, -4
Last:   %sub66 = add nsw i32 %cc.addr.1, -4
Schedulable: 1
code gen 0
Gains: 16 - 17 = -1
Unprofitable: deleting generated code
Done!
code gen 1
destroying tree
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
/home/rodrigo/llvm/loop-rerolling/build/release/bin/clang -std=gnu89 -B /usr/bin -Os -fno-vectorize -fno-slp-vectorize -fno-unroll-loops -c src/tif_print.c -o src/tif_print.o   -fuse-ld=
clang-12: warning: argument unused during compilation: '-fuse-ld=' [-Wunused-command-line-argument]
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
/home/rodrigo/llvm/loop-rerolling/build/release/bin/clang -std=gnu89 -B /usr/bin -Os -fno-vectorize -fno-slp-vectorize -fno-unroll-loops -c src/tif_version.c -o src/tif_version.o   -fuse-ld=
clang-12: warning: argument unused during compilation: '-fuse-ld=' [-Wunused-command-line-argument]
stores
calls
Done Loop Roller!
/home/rodrigo/llvm/loop-rerolling/build/release/bin/clang -std=gnu89 -B /usr/bin -Os -fno-vectorize -fno-slp-vectorize -fno-unroll-loops -c src/tif_packbits.c -o src/tif_packbits.o   -fuse-ld=
clang-12: warning: argument unused during compilation: '-fuse-ld=' [-Wunused-command-line-argument]
src/tif_packbits.c:45:19: warning: cast to 'tidata_t' (aka 'unsigned char *') from smaller integer type 'tsize_t' (aka 'int') [-Wint-to-pointer-cast]
                tif->tif_data = (tidata_t) TIFFTileRowSize(tif);
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/tif_packbits.c:47:19: warning: cast to 'tidata_t' (aka 'unsigned char *') from smaller integer type 'tsize_t' (aka 'int') [-Wint-to-pointer-cast]
                tif->tif_data = (tidata_t) TIFFScanlineSize(tif);
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/tif_packbits.c:191:20: warning: cast to smaller integer type 'tsize_t' (aka 'int') from 'tidata_t' (aka 'unsigned char *') [-Wpointer-to-int-cast]
        tsize_t rowsize = (tsize_t) tif->tif_data;
                          ^~~~~~~~~~~~~~~~~~~~~~~
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   %tif_decoderow = getelementptr inbounds %struct.tiff, %struct.tiff* %tif, i64 0, i32 26
Here ..
Here ..
Here ..
Skipping:   %tif_preencode = getelementptr inbounds %struct.tiff, %struct.tiff* %tif, i64 0, i32 24
Skipping:   store i32 (%struct.tiff*, i16)* @PackBitsPreEncode, i32 (%struct.tiff*, i16)** %tif_preencode, align 8, !tbaa !15
destroying tree
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   store i8 -127, i8* %op.3.lcssa329, align 1, !tbaa !15
Here ..
Here ..
I:   br label %again.outer.backedge
Last:   br label %again.outer.backedge
Schedulable: 1
code gen 0
Gains: 2 - 15 = -13
Unprofitable: deleting generated code
Done!
code gen 1
destroying tree
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   store i8 %conv59, i8* %op.3.lcssa329.lcssa335, align 1, !tbaa !15
Here ..
Skipping:   %incdec.ptr62 = getelementptr inbounds i8, i8* %op.3.lcssa329.lcssa335, i64 2
Here ..
I:   br label %sw.epilog
Last:   br label %sw.epilog
Schedulable: 1
code gen 0
Gains: 2 - 15 = -13
Unprofitable: deleting generated code
Done!
code gen 1
destroying tree
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   store i8 0, i8* %op.3.lcssa329.lcssa, align 1, !tbaa !15
Here ..
Skipping:   %incdec.ptr66 = getelementptr inbounds i8, i8* %op.3.lcssa329.lcssa, i64 2
Here ..
I:   br label %sw.epilog
Last:   br label %sw.epilog
Schedulable: 1
code gen 0
Gains: 2 - 15 = -13
Unprofitable: deleting generated code
Done!
code gen 1
destroying tree
calls
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   store i8 -127, i8* %op.3.lcssa330, align 1, !tbaa !15
Here ..
Here ..
I:   br label %again.outer.backedge
Last:   br label %again.outer.backedge
Schedulable: 1
code gen 0
Gains: 2 - 15 = -13
Unprofitable: deleting generated code
Done!
code gen 1
destroying tree
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   store i8 %conv82, i8* %op.3.lcssa330.lcssa334, align 1, !tbaa !15
Here ..
Skipping:   %incdec.ptr85 = getelementptr inbounds i8, i8* %op.3.lcssa330.lcssa334, i64 2
Here ..
I:   br label %sw.epilog
Last:   br label %sw.epilog
Schedulable: 1
code gen 0
Gains: 2 - 15 = -13
Unprofitable: deleting generated code
Done!
code gen 1
destroying tree
calls
stores
calls
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   store i8 -127, i8* %op.3.lcssa331, align 1, !tbaa !15
Here ..
Here ..
I:   br label %again.outer.backedge
Last:   br label %again.outer.backedge
Schedulable: 1
code gen 0
Gains: 2 - 15 = -13
Unprofitable: deleting generated code
Done!
code gen 1
destroying tree
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   store i8 %conv110, i8* %op.3.lcssa331.lcssa333, align 1, !tbaa !15
Here ..
Skipping:   %incdec.ptr113 = getelementptr inbounds i8, i8* %op.3.lcssa331.lcssa333, i64 2
Here ..
I:   br label %sw.epilog
Last:   br label %sw.epilog
Schedulable: 1
code gen 0
Gains: 2 - 15 = -13
Unprofitable: deleting generated code
Done!
code gen 1
destroying tree
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   store i8 0, i8* %op.3.lcssa331.lcssa, align 1, !tbaa !15
Here ..
Skipping:   %incdec.ptr117 = getelementptr inbounds i8, i8* %op.3.lcssa331.lcssa, i64 2
Here ..
I:   br label %sw.epilog
Last:   br label %sw.epilog
Schedulable: 1
code gen 0
Gains: 2 - 15 = -13
Unprofitable: deleting generated code
Done!
code gen 1
destroying tree
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
3 warnings generated.
/home/rodrigo/llvm/loop-rerolling/build/release/bin/clang -std=gnu89 -B /usr/bin -Os -fno-vectorize -fno-slp-vectorize -fno-unroll-loops -c src/tif_unix.c -o src/tif_unix.o   -fuse-ld=
clang-12: warning: argument unused during compilation: '-fuse-ld=' [-Wunused-command-line-argument]
src/tif_unix.c:40:25: warning: cast to smaller integer type 'int' from 'thandle_t' (aka 'void *') [-Wvoid-pointer-to-int-cast]
        return ((tsize_t) read((int) fd, buf, (size_t) size));
                               ^~~~~~~~
src/tif_unix.c:46:26: warning: cast to smaller integer type 'int' from 'thandle_t' (aka 'void *') [-Wvoid-pointer-to-int-cast]
        return ((tsize_t) write((int) fd, buf, (size_t) size));
                                ^~~~~~~~
src/tif_unix.c:52:25: warning: cast to smaller integer type 'int' from 'thandle_t' (aka 'void *') [-Wvoid-pointer-to-int-cast]
        return ((toff_t) lseek((int) fd, (off_t) off, whence));
                               ^~~~~~~~
src/tif_unix.c:58:16: warning: cast to smaller integer type 'int' from 'thandle_t' (aka 'void *') [-Wvoid-pointer-to-int-cast]
        return (close((int) fd));
                      ^~~~~~~~
src/tif_unix.c:71:25: warning: cast to smaller integer type 'int' from 'thandle_t' (aka 'void *') [-Wvoid-pointer-to-int-cast]
        return (toff_t) (fstat((int) fd, &sb) < 0 ? 0 : sb.st_size);
                               ^~~~~~~~
src/tif_unix.c:123:6: warning: cast to 'thandle_t' (aka 'void *') from smaller integer type 'int' [-Wint-to-void-pointer-cast]
            (thandle_t) fd,
            ^~~~~~~~~~~~~~
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
Done Loop Roller!
stores
calls
Done Loop Roller!
stores
calls
Done Loop Roller!
stores
calls
Done Loop Roller!
stores
calls
Done Loop Roller!
stores
calls
Done Loop Roller!
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
Done Loop Roller!
stores
calls
Done Loop Roller!
stores
calls
Done Loop Roller!
stores
calls
Done Loop Roller!
stores
calls
Done Loop Roller!
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   %1 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !2
Here ..
Skipping:   %3 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !2
destroying tree
Done Loop Roller!
stores
calls
stores
calls
stores
calls
Done Loop Roller!
6 warnings generated.
/home/rodrigo/llvm/loop-rerolling/build/release/bin/clang -std=gnu89 -B /usr/bin -Os -fno-vectorize -fno-slp-vectorize -fno-unroll-loops -c src/tif_flush.c -o src/tif_flush.o   -fuse-ld=
clang-12: warning: argument unused during compilation: '-fuse-ld=' [-Wunused-command-line-argument]
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
/home/rodrigo/llvm/loop-rerolling/build/release/bin/clang -std=gnu89 -B /usr/bin -Os -fno-vectorize -fno-slp-vectorize -fno-unroll-loops -c src/tif_getimage.c -o src/tif_getimage.o   -fuse-ld=
clang-12: warning: argument unused during compilation: '-fuse-ld=' [-Wunused-command-line-argument]
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   tail call void @_TIFFfree(i8* nonnull %8) #6
Here ..
Skipping:   %greencmap = getelementptr inbounds %struct._TIFFRGBAImage, %struct._TIFFRGBAImage* %img, i64 0, i32 11
Skipping:   %9 = bitcast i16** %greencmap to i8**
Skipping:   %10 = load i8*, i8** %9, align 8, !tbaa !13
destroying tree
stores
calls
Done Loop Roller!
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   %idxprom13 = and i64 %9, 33554431
Here ..
Skipping:   %incdec.ptr = getelementptr inbounds i32, i32* %p.0307, i64 1
Skipping:   %11 = lshr i64 %indvars.iv, 6
Here ..
Skipping:   %incdec.ptr32 = getelementptr inbounds i32, i32* %p.0307, i64 2
Skipping:   %13 = lshr i64 %indvars.iv, 5
Here ..
Skipping:   %incdec.ptr45 = getelementptr inbounds i32, i32* %p.0307, i64 3
Skipping:   %15 = lshr i64 %indvars.iv, 4
Here ..
Skipping:   %incdec.ptr58 = getelementptr inbounds i32, i32* %p.0307, i64 4
Skipping:   %17 = lshr i64 %indvars.iv, 3
Here ..
Skipping:   %incdec.ptr71 = getelementptr inbounds i32, i32* %p.0307, i64 5
Skipping:   %19 = lshr i64 %indvars.iv, 2
Here ..
Skipping:   %incdec.ptr84 = getelementptr inbounds i32, i32* %p.0307, i64 6
Skipping:   %21 = lshr i64 %indvars.iv, 1
Here ..
Skipping:   %incdec.ptr97 = getelementptr inbounds i32, i32* %p.0307, i64 7
Here ..
Skipping:   %incdec.ptr109 = getelementptr inbounds i32, i32* %p.0307, i64 8
Here ..
I:   br label %sw.epilog
Last:   br label %sw.epilog
Schedulable: 1
code gen 0
Gains: 79 - 66 = 13
Profitable: finishing code generation
; Function Attrs: nounwind optsize uwtable
define internal fastcc i32 @makebwmap(%struct._TIFFRGBAImage* nocapture %img) unnamed_addr #0 {
entry:
  %Map1 = getelementptr inbounds %struct._TIFFRGBAImage, %struct._TIFFRGBAImage* %img, i64 0, i32 15
  %0 = load i8*, i8** %Map1, align 8, !tbaa !17
  %bitspersample2 = getelementptr inbounds %struct._TIFFRGBAImage, %struct._TIFFRGBAImage* %img, i64 0, i32 6
  %1 = load i16, i16* %bitspersample2, align 4, !tbaa !29
  %2 = udiv i16 8, %1
  %3 = shl nuw nsw i16 %2, 10
  %narrow304 = add nuw nsw i16 %3, 2048
  %narrow = zext i16 %narrow304 to i32
  %call = tail call i8* @_TIFFmalloc(i32 %narrow) #6
  %BWmap = getelementptr inbounds %struct._TIFFRGBAImage, %struct._TIFFRGBAImage* %img, i64 0, i32 16
  %4 = bitcast i32*** %BWmap to i8**
  store i8* %call, i8** %4, align 8, !tbaa !19
  %cmp = icmp eq i8* %call, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %tif = getelementptr inbounds %struct._TIFFRGBAImage, %struct._TIFFRGBAImage* %img, i64 0, i32 0
  %5 = load %struct.tiff*, %struct.tiff** %tif, align 8, !tbaa !27
  %call8 = tail call i8* @TIFFFileName(%struct.tiff* %5) #6
  tail call void (i8*, i8*, ...) @TIFFError(i8* %call8, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.30, i64 0, i64 0)) #6
  br label %cleanup

if.end:                                           ; preds = %entry
  %6 = bitcast i8* %call to i32**
  %add.ptr = getelementptr inbounds i8, i8* %call, i64 2048
  %7 = bitcast i8* %add.ptr to i32*
  br label %for.body

for.body:                                         ; preds = %sw.epilog.for.body_crit_edge, %if.end
  %8 = phi i32** [ %6, %if.end ], [ %.pre, %sw.epilog.for.body_crit_edge ]
  %indvars.iv = phi i64 [ 0, %if.end ], [ %indvars.iv.next, %sw.epilog.for.body_crit_edge ]
  %p.0307 = phi i32* [ %7, %if.end ], [ %p.1, %sw.epilog.for.body_crit_edge ]
  %arrayidx = getelementptr inbounds i32*, i32** %8, i64 %indvars.iv
  store i32* %p.0307, i32** %arrayidx, align 8, !tbaa !31
  switch i16 %1, label %sw.epilog [
    i16 1, label %sw.bb
    i16 2, label %sw.bb110
    i16 4, label %sw.bb161
    i16 8, label %sw.bb186
  ]

sw.bb:                                            ; preds = %for.body
  %9 = lshr i64 %indvars.iv, 7
  %idxprom13 = and i64 %9, 33554431
  %arrayidx14 = getelementptr inbounds i8, i8* %0, i64 %idxprom13
  %10 = load i8, i8* %arrayidx14, align 1, !tbaa !36
  %conv15 = zext i8 %10 to i32
  %shl = shl nuw nsw i32 %conv15, 8
  %shl18 = shl nuw nsw i32 %conv15, 16
  %or = or i32 %shl, %conv15
  %or19 = or i32 %or, %shl18
  %or20 = or i32 %or19, -16777216
  %incdec.ptr = getelementptr inbounds i32, i32* %p.0307, i64 1
  store i32 %or20, i32* %p.0307, align 4, !tbaa !38
  %11 = lshr i64 %indvars.iv, 6
  %and = and i64 %11, 1
  %arrayidx23 = getelementptr inbounds i8, i8* %0, i64 %and
  %12 = load i8, i8* %arrayidx23, align 1, !tbaa !36
  %conv24 = zext i8 %12 to i32
  %shl26 = shl nuw nsw i32 %conv24, 8
  %shl29 = shl nuw nsw i32 %conv24, 16
  %or27 = or i32 %shl26, %conv24
  %or30 = or i32 %or27, %shl29
  %or31 = or i32 %or30, -16777216
  %incdec.ptr32 = getelementptr inbounds i32, i32* %p.0307, i64 2
  store i32 %or31, i32* %incdec.ptr, align 4, !tbaa !38
  %13 = lshr i64 %indvars.iv, 5
  %and34 = and i64 %13, 1
  %arrayidx36 = getelementptr inbounds i8, i8* %0, i64 %and34
  %14 = load i8, i8* %arrayidx36, align 1, !tbaa !36
  %conv37 = zext i8 %14 to i32
  %shl39 = shl nuw nsw i32 %conv37, 8
  %shl42 = shl nuw nsw i32 %conv37, 16
  %or40 = or i32 %shl39, %conv37
  %or43 = or i32 %or40, %shl42
  %or44 = or i32 %or43, -16777216
  %incdec.ptr45 = getelementptr inbounds i32, i32* %p.0307, i64 3
  store i32 %or44, i32* %incdec.ptr32, align 4, !tbaa !38
  %15 = lshr i64 %indvars.iv, 4
  %and47 = and i64 %15, 1
  %arrayidx49 = getelementptr inbounds i8, i8* %0, i64 %and47
  %16 = load i8, i8* %arrayidx49, align 1, !tbaa !36
  %conv50 = zext i8 %16 to i32
  %shl52 = shl nuw nsw i32 %conv50, 8
  %shl55 = shl nuw nsw i32 %conv50, 16
  %or53 = or i32 %shl52, %conv50
  %or56 = or i32 %or53, %shl55
  %or57 = or i32 %or56, -16777216
  %incdec.ptr58 = getelementptr inbounds i32, i32* %p.0307, i64 4
  store i32 %or57, i32* %incdec.ptr45, align 4, !tbaa !38
  %17 = lshr i64 %indvars.iv, 3
  %and60 = and i64 %17, 1
  %arrayidx62 = getelementptr inbounds i8, i8* %0, i64 %and60
  %18 = load i8, i8* %arrayidx62, align 1, !tbaa !36
  %conv63 = zext i8 %18 to i32
  %shl65 = shl nuw nsw i32 %conv63, 8
  %shl68 = shl nuw nsw i32 %conv63, 16
  %or66 = or i32 %shl65, %conv63
  %or69 = or i32 %or66, %shl68
  %or70 = or i32 %or69, -16777216
  %incdec.ptr71 = getelementptr inbounds i32, i32* %p.0307, i64 5
  store i32 %or70, i32* %incdec.ptr58, align 4, !tbaa !38
  %19 = lshr i64 %indvars.iv, 2
  %and73 = and i64 %19, 1
  %arrayidx75 = getelementptr inbounds i8, i8* %0, i64 %and73
  %20 = load i8, i8* %arrayidx75, align 1, !tbaa !36
  %conv76 = zext i8 %20 to i32
  %shl78 = shl nuw nsw i32 %conv76, 8
  %shl81 = shl nuw nsw i32 %conv76, 16
  %or79 = or i32 %shl78, %conv76
  %or82 = or i32 %or79, %shl81
  %or83 = or i32 %or82, -16777216
  %incdec.ptr84 = getelementptr inbounds i32, i32* %p.0307, i64 6
  store i32 %or83, i32* %incdec.ptr71, align 4, !tbaa !38
  %21 = lshr i64 %indvars.iv, 1
  %and86 = and i64 %21, 1
  %arrayidx88 = getelementptr inbounds i8, i8* %0, i64 %and86
  %22 = load i8, i8* %arrayidx88, align 1, !tbaa !36
  %conv89 = zext i8 %22 to i32
  %shl91 = shl nuw nsw i32 %conv89, 8
  %shl94 = shl nuw nsw i32 %conv89, 16
  %or92 = or i32 %shl91, %conv89
  %or95 = or i32 %or92, %shl94
  %or96 = or i32 %or95, -16777216
  %incdec.ptr97 = getelementptr inbounds i32, i32* %p.0307, i64 7
  store i32 %or96, i32* %incdec.ptr84, align 4, !tbaa !38
  %and98 = and i64 %indvars.iv, 1
  %arrayidx100 = getelementptr inbounds i8, i8* %0, i64 %and98
  %23 = load i8, i8* %arrayidx100, align 1, !tbaa !36
  %conv101 = zext i8 %23 to i32
  %shl103 = shl nuw nsw i32 %conv101, 8
  %shl106 = shl nuw nsw i32 %conv101, 16
  %or104 = or i32 %shl103, %conv101
  %or107 = or i32 %or104, %shl106
  %or108 = or i32 %or107, -16777216
  %incdec.ptr109 = getelementptr inbounds i32, i32* %p.0307, i64 8
  store i32 %or108, i32* %incdec.ptr97, align 4, !tbaa !38
  br label %sw.epilog

sw.bb110:                                         ; preds = %for.body
  %24 = lshr i64 %indvars.iv, 6
  %idxprom112 = and i64 %24, 67108863
  %arrayidx113 = getelementptr inbounds i8, i8* %0, i64 %idxprom112
  %25 = load i8, i8* %arrayidx113, align 1, !tbaa !36
  %conv114 = zext i8 %25 to i32
  %shl116 = shl nuw nsw i32 %conv114, 8
  %shl119 = shl nuw nsw i32 %conv114, 16
  %or117 = or i32 %shl116, %conv114
  %or120 = or i32 %or117, %shl119
  %or121 = or i32 %or120, -16777216
  %incdec.ptr122 = getelementptr inbounds i32, i32* %p.0307, i64 1
  store i32 %or121, i32* %p.0307, align 4, !tbaa !38
  %26 = lshr i64 %indvars.iv, 4
  %and124 = and i64 %26, 3
  %arrayidx126 = getelementptr inbounds i8, i8* %0, i64 %and124
  %27 = load i8, i8* %arrayidx126, align 1, !tbaa !36
  %conv127 = zext i8 %27 to i32
  %shl129 = shl nuw nsw i32 %conv127, 8
  %shl132 = shl nuw nsw i32 %conv127, 16
  %or130 = or i32 %shl129, %conv127
  %or133 = or i32 %or130, %shl132
  %or134 = or i32 %or133, -16777216
  %incdec.ptr135 = getelementptr inbounds i32, i32* %p.0307, i64 2
  store i32 %or134, i32* %incdec.ptr122, align 4, !tbaa !38
  %28 = lshr i64 %indvars.iv, 2
  %and137 = and i64 %28, 3
  %arrayidx139 = getelementptr inbounds i8, i8* %0, i64 %and137
  %29 = load i8, i8* %arrayidx139, align 1, !tbaa !36
  %conv140 = zext i8 %29 to i32
  %shl142 = shl nuw nsw i32 %conv140, 8
  %shl145 = shl nuw nsw i32 %conv140, 16
  %or143 = or i32 %shl142, %conv140
  %or146 = or i32 %or143, %shl145
  %or147 = or i32 %or146, -16777216
  %incdec.ptr148 = getelementptr inbounds i32, i32* %p.0307, i64 3
  store i32 %or147, i32* %incdec.ptr135, align 4, !tbaa !38
  %and149 = and i64 %indvars.iv, 3
  %arrayidx151 = getelementptr inbounds i8, i8* %0, i64 %and149
  %30 = load i8, i8* %arrayidx151, align 1, !tbaa !36
  %conv152 = zext i8 %30 to i32
  %shl154 = shl nuw nsw i32 %conv152, 8
  %shl157 = shl nuw nsw i32 %conv152, 16
  %or155 = or i32 %shl154, %conv152
  %or158 = or i32 %or155, %shl157
  %or159 = or i32 %or158, -16777216
  %incdec.ptr160 = getelementptr inbounds i32, i32* %p.0307, i64 4
  store i32 %or159, i32* %incdec.ptr148, align 4, !tbaa !38
  br label %sw.epilog

sw.bb161:                                         ; preds = %for.body
  %31 = lshr i64 %indvars.iv, 4
  %idxprom163 = and i64 %31, 268435455
  %arrayidx164 = getelementptr inbounds i8, i8* %0, i64 %idxprom163
  %32 = load i8, i8* %arrayidx164, align 1, !tbaa !36
  %conv165 = zext i8 %32 to i32
  %shl167 = shl nuw nsw i32 %conv165, 8
  %shl170 = shl nuw nsw i32 %conv165, 16
  %or168 = or i32 %shl167, %conv165
  %or171 = or i32 %or168, %shl170
  %or172 = or i32 %or171, -16777216
  %incdec.ptr173 = getelementptr inbounds i32, i32* %p.0307, i64 1
  store i32 %or172, i32* %p.0307, align 4, !tbaa !38
  %and174 = and i64 %indvars.iv, 15
  %arrayidx176 = getelementptr inbounds i8, i8* %0, i64 %and174
  %33 = load i8, i8* %arrayidx176, align 1, !tbaa !36
  %conv177 = zext i8 %33 to i32
  %shl179 = shl nuw nsw i32 %conv177, 8
  %shl182 = shl nuw nsw i32 %conv177, 16
  %or180 = or i32 %shl179, %conv177
  %or183 = or i32 %or180, %shl182
  %or184 = or i32 %or183, -16777216
  %incdec.ptr185 = getelementptr inbounds i32, i32* %p.0307, i64 2
  store i32 %or184, i32* %incdec.ptr173, align 4, !tbaa !38
  br label %sw.epilog

sw.bb186:                                         ; preds = %for.body
  %arrayidx188 = getelementptr inbounds i8, i8* %0, i64 %indvars.iv
  %34 = load i8, i8* %arrayidx188, align 1, !tbaa !36
  %conv189 = zext i8 %34 to i32
  %shl191 = shl nuw nsw i32 %conv189, 8
  %shl194 = shl nuw nsw i32 %conv189, 16
  %or192 = or i32 %shl191, %conv189
  %or195 = or i32 %or192, %shl194
  %or196 = or i32 %or195, -16777216
  %incdec.ptr197 = getelementptr inbounds i32, i32* %p.0307, i64 1
  store i32 %or196, i32* %p.0307, align 4, !tbaa !38
  br label %sw.epilog

sw.epilog:                                        ; preds = %for.body, %sw.bb186, %sw.bb161, %sw.bb110, %sw.bb
  %p.1 = phi i32* [ %p.0307, %for.body ], [ %incdec.ptr197, %sw.bb186 ], [ %incdec.ptr185, %sw.bb161 ], [ %incdec.ptr160, %sw.bb110 ], [ %incdec.ptr109, %sw.bb ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, 256
  br i1 %exitcond.not, label %cleanup.loopexit, label %sw.epilog.for.body_crit_edge, !llvm.loop !89

sw.epilog.for.body_crit_edge:                     ; preds = %sw.epilog
  %.pre = load i32**, i32*** %BWmap, align 8, !tbaa !19
  br label %for.body

cleanup.loopexit:                                 ; preds = %sw.epilog
  br label %cleanup

cleanup:                                          ; preds = %cleanup.loopexit, %if.then
  %retval.0 = phi i32 [ 0, %if.then ], [ 1, %cleanup.loopexit ]
  ret i32 %retval.0

rolled.pre:                                       ; No predecessors!
  %35 = alloca i64, i8 8, align 8
  %36 = getelementptr i64, i64* %35, i8 0
  store i64 %9, i64* %36, align 8
  %37 = getelementptr i64, i64* %35, i8 1
  store i64 %11, i64* %37, align 8
  %38 = getelementptr i64, i64* %35, i8 2
  store i64 %13, i64* %38, align 8
  %39 = getelementptr i64, i64* %35, i8 3
  store i64 %15, i64* %39, align 8
  %40 = getelementptr i64, i64* %35, i8 4
  store i64 %17, i64* %40, align 8
  %41 = getelementptr i64, i64* %35, i8 5
  store i64 %19, i64* %41, align 8
  %42 = getelementptr i64, i64* %35, i8 6
  store i64 %21, i64* %42, align 8
  %43 = getelementptr i64, i64* %35, i8 7
  store i64 %indvars.iv, i64* %43, align 8

rolled.loop:                                      ; No predecessors!
  %44 = phi i8 
  %45 = getelementptr i64, i64* %35, i8 %44
  %46 = load i64, i64* %45, align 8
  %47 = getelementptr [8 x i64], [8 x i64]* @0, i8 0, i8 %44
  %48 = load i64, i64* %47, align 8
  %49 = and i64 %46, %48
  %50 = getelementptr inbounds i8, i8* %0, i64 %49
  %51 = load i8, i8* %50, align 1
  %52 = zext i8 %51 to i32
  %53 = shl nuw nsw i32 %52, 8
  %54 = or i32 %53, %52
  %55 = shl nuw nsw i32 %52, 16
  %56 = or i32 %54, %55
  %57 = or i32 %56, -16777216
  %58 = zext i8 %44 to i64
  %59 = add i64 %58, 1
  %60 = getelementptr i32, i32* %p.0307, i64 %59
  store i32 %57, i32* %60, align 4
  %61 = add i8 %44, 1
  %62 = icmp ne i8 %61, 8

rolled.exit:                                      ; No predecessors!
}

Done!
; Function Attrs: nounwind optsize uwtable
define internal fastcc i32 @makebwmap(%struct._TIFFRGBAImage* nocapture %img) unnamed_addr #0 {
entry:
  %Map1 = getelementptr inbounds %struct._TIFFRGBAImage, %struct._TIFFRGBAImage* %img, i64 0, i32 15
  %0 = load i8*, i8** %Map1, align 8, !tbaa !17
  %bitspersample2 = getelementptr inbounds %struct._TIFFRGBAImage, %struct._TIFFRGBAImage* %img, i64 0, i32 6
  %1 = load i16, i16* %bitspersample2, align 4, !tbaa !29
  %2 = udiv i16 8, %1
  %3 = shl nuw nsw i16 %2, 10
  %narrow304 = add nuw nsw i16 %3, 2048
  %narrow = zext i16 %narrow304 to i32
  %call = tail call i8* @_TIFFmalloc(i32 %narrow) #6
  %BWmap = getelementptr inbounds %struct._TIFFRGBAImage, %struct._TIFFRGBAImage* %img, i64 0, i32 16
  %4 = bitcast i32*** %BWmap to i8**
  store i8* %call, i8** %4, align 8, !tbaa !19
  %cmp = icmp eq i8* %call, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %tif = getelementptr inbounds %struct._TIFFRGBAImage, %struct._TIFFRGBAImage* %img, i64 0, i32 0
  %5 = load %struct.tiff*, %struct.tiff** %tif, align 8, !tbaa !27
  %call8 = tail call i8* @TIFFFileName(%struct.tiff* %5) #6
  tail call void (i8*, i8*, ...) @TIFFError(i8* %call8, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.30, i64 0, i64 0)) #6
  br label %cleanup

if.end:                                           ; preds = %entry
  %6 = bitcast i8* %call to i32**
  %add.ptr = getelementptr inbounds i8, i8* %call, i64 2048
  %7 = bitcast i8* %add.ptr to i32*
  br label %for.body

for.body:                                         ; preds = %sw.epilog.for.body_crit_edge, %if.end
  %8 = phi i32** [ %6, %if.end ], [ %.pre, %sw.epilog.for.body_crit_edge ]
  %indvars.iv = phi i64 [ 0, %if.end ], [ %indvars.iv.next, %sw.epilog.for.body_crit_edge ]
  %p.0307 = phi i32* [ %7, %if.end ], [ %p.1, %sw.epilog.for.body_crit_edge ]
  %arrayidx = getelementptr inbounds i32*, i32** %8, i64 %indvars.iv
  store i32* %p.0307, i32** %arrayidx, align 8, !tbaa !31
  switch i16 %1, label %sw.epilog [
    i16 1, label %sw.bb
    i16 2, label %sw.bb110
    i16 4, label %sw.bb161
    i16 8, label %sw.bb186
  ]

sw.bb:                                            ; preds = %for.body
  %9 = lshr i64 %indvars.iv, 7
  %10 = lshr i64 %indvars.iv, 6
  %11 = lshr i64 %indvars.iv, 5
  %12 = lshr i64 %indvars.iv, 4
  %13 = lshr i64 %indvars.iv, 3
  %14 = lshr i64 %indvars.iv, 2
  %15 = lshr i64 %indvars.iv, 1
  %incdec.ptr109 = getelementptr inbounds i32, i32* %p.0307, i64 8
  br label %rolled.pre

sw.bb110:                                         ; preds = %for.body
  %16 = lshr i64 %indvars.iv, 6
  %idxprom112 = and i64 %16, 67108863
  %arrayidx113 = getelementptr inbounds i8, i8* %0, i64 %idxprom112
  %17 = load i8, i8* %arrayidx113, align 1, !tbaa !36
  %conv114 = zext i8 %17 to i32
  %shl116 = shl nuw nsw i32 %conv114, 8
  %shl119 = shl nuw nsw i32 %conv114, 16
  %or117 = or i32 %shl116, %conv114
  %or120 = or i32 %or117, %shl119
  %or121 = or i32 %or120, -16777216
  %incdec.ptr122 = getelementptr inbounds i32, i32* %p.0307, i64 1
  store i32 %or121, i32* %p.0307, align 4, !tbaa !38
  %18 = lshr i64 %indvars.iv, 4
  %and124 = and i64 %18, 3
  %arrayidx126 = getelementptr inbounds i8, i8* %0, i64 %and124
  %19 = load i8, i8* %arrayidx126, align 1, !tbaa !36
  %conv127 = zext i8 %19 to i32
  %shl129 = shl nuw nsw i32 %conv127, 8
  %shl132 = shl nuw nsw i32 %conv127, 16
  %or130 = or i32 %shl129, %conv127
  %or133 = or i32 %or130, %shl132
  %or134 = or i32 %or133, -16777216
  %incdec.ptr135 = getelementptr inbounds i32, i32* %p.0307, i64 2
  store i32 %or134, i32* %incdec.ptr122, align 4, !tbaa !38
  %20 = lshr i64 %indvars.iv, 2
  %and137 = and i64 %20, 3
  %arrayidx139 = getelementptr inbounds i8, i8* %0, i64 %and137
  %21 = load i8, i8* %arrayidx139, align 1, !tbaa !36
  %conv140 = zext i8 %21 to i32
  %shl142 = shl nuw nsw i32 %conv140, 8
  %shl145 = shl nuw nsw i32 %conv140, 16
  %or143 = or i32 %shl142, %conv140
  %or146 = or i32 %or143, %shl145
  %or147 = or i32 %or146, -16777216
  %incdec.ptr148 = getelementptr inbounds i32, i32* %p.0307, i64 3
  store i32 %or147, i32* %incdec.ptr135, align 4, !tbaa !38
  %and149 = and i64 %indvars.iv, 3
  %arrayidx151 = getelementptr inbounds i8, i8* %0, i64 %and149
  %22 = load i8, i8* %arrayidx151, align 1, !tbaa !36
  %conv152 = zext i8 %22 to i32
  %shl154 = shl nuw nsw i32 %conv152, 8
  %shl157 = shl nuw nsw i32 %conv152, 16
  %or155 = or i32 %shl154, %conv152
  %or158 = or i32 %or155, %shl157
  %or159 = or i32 %or158, -16777216
  %incdec.ptr160 = getelementptr inbounds i32, i32* %p.0307, i64 4
  store i32 %or159, i32* %incdec.ptr148, align 4, !tbaa !38
  br label %sw.epilog

sw.bb161:                                         ; preds = %for.body
  %23 = lshr i64 %indvars.iv, 4
  %idxprom163 = and i64 %23, 268435455
  %arrayidx164 = getelementptr inbounds i8, i8* %0, i64 %idxprom163
  %24 = load i8, i8* %arrayidx164, align 1, !tbaa !36
  %conv165 = zext i8 %24 to i32
  %shl167 = shl nuw nsw i32 %conv165, 8
  %shl170 = shl nuw nsw i32 %conv165, 16
  %or168 = or i32 %shl167, %conv165
  %or171 = or i32 %or168, %shl170
  %or172 = or i32 %or171, -16777216
  %incdec.ptr173 = getelementptr inbounds i32, i32* %p.0307, i64 1
  store i32 %or172, i32* %p.0307, align 4, !tbaa !38
  %and174 = and i64 %indvars.iv, 15
  %arrayidx176 = getelementptr inbounds i8, i8* %0, i64 %and174
  %25 = load i8, i8* %arrayidx176, align 1, !tbaa !36
  %conv177 = zext i8 %25 to i32
  %shl179 = shl nuw nsw i32 %conv177, 8
  %shl182 = shl nuw nsw i32 %conv177, 16
  %or180 = or i32 %shl179, %conv177
  %or183 = or i32 %or180, %shl182
  %or184 = or i32 %or183, -16777216
  %incdec.ptr185 = getelementptr inbounds i32, i32* %p.0307, i64 2
  store i32 %or184, i32* %incdec.ptr173, align 4, !tbaa !38
  br label %sw.epilog

sw.bb186:                                         ; preds = %for.body
  %arrayidx188 = getelementptr inbounds i8, i8* %0, i64 %indvars.iv
  %26 = load i8, i8* %arrayidx188, align 1, !tbaa !36
  %conv189 = zext i8 %26 to i32
  %shl191 = shl nuw nsw i32 %conv189, 8
  %shl194 = shl nuw nsw i32 %conv189, 16
  %or192 = or i32 %shl191, %conv189
  %or195 = or i32 %or192, %shl194
  %or196 = or i32 %or195, -16777216
  %incdec.ptr197 = getelementptr inbounds i32, i32* %p.0307, i64 1
  store i32 %or196, i32* %p.0307, align 4, !tbaa !38
  br label %sw.epilog

sw.epilog:                                        ; preds = %for.body, %sw.bb186, %sw.bb161, %sw.bb110, %rolled.exit
  %p.1 = phi i32* [ %p.0307, %for.body ], [ %incdec.ptr197, %sw.bb186 ], [ %incdec.ptr185, %sw.bb161 ], [ %incdec.ptr160, %sw.bb110 ], [ %incdec.ptr109, %rolled.exit ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, 256
  br i1 %exitcond.not, label %cleanup.loopexit, label %sw.epilog.for.body_crit_edge, !llvm.loop !89

sw.epilog.for.body_crit_edge:                     ; preds = %sw.epilog
  %.pre = load i32**, i32*** %BWmap, align 8, !tbaa !19
  br label %for.body

cleanup.loopexit:                                 ; preds = %sw.epilog
  br label %cleanup

cleanup:                                          ; preds = %cleanup.loopexit, %if.then
  %retval.0 = phi i32 [ 0, %if.then ], [ 1, %cleanup.loopexit ]
  ret i32 %retval.0

rolled.pre:                                       ; preds = %sw.bb
  %27 = alloca i64, i8 8, align 8
  %28 = getelementptr i64, i64* %27, i8 0
  store i64 %9, i64* %28, align 8
  %29 = getelementptr i64, i64* %27, i8 1
  store i64 %10, i64* %29, align 8
  %30 = getelementptr i64, i64* %27, i8 2
  store i64 %11, i64* %30, align 8
  %31 = getelementptr i64, i64* %27, i8 3
  store i64 %12, i64* %31, align 8
  %32 = getelementptr i64, i64* %27, i8 4
  store i64 %13, i64* %32, align 8
  %33 = getelementptr i64, i64* %27, i8 5
  store i64 %14, i64* %33, align 8
  %34 = getelementptr i64, i64* %27, i8 6
  store i64 %15, i64* %34, align 8
  %35 = getelementptr i64, i64* %27, i8 7
  store i64 %indvars.iv, i64* %35, align 8
  br label %rolled.loop

rolled.loop:                                      ; preds = %rolled.pre, %rolled.loop
  %36 = phi i8 [ 0, %rolled.pre ], [ %53, %rolled.loop ]
  %37 = getelementptr i64, i64* %27, i8 %36
  %38 = load i64, i64* %37, align 8
  %39 = getelementptr [8 x i64], [8 x i64]* @0, i8 0, i8 %36
  %40 = load i64, i64* %39, align 8
  %41 = and i64 %38, %40
  %42 = getelementptr inbounds i8, i8* %0, i64 %41
  %43 = load i8, i8* %42, align 1
  %44 = zext i8 %43 to i32
  %45 = shl nuw nsw i32 %44, 8
  %46 = or i32 %45, %44
  %47 = shl nuw nsw i32 %44, 16
  %48 = or i32 %46, %47
  %49 = or i32 %48, -16777216
  %50 = zext i8 %36 to i64
  %51 = add i64 %50, 1
  %52 = getelementptr i32, i32* %p.0307, i64 %51
  store i32 %49, i32* %52, align 4
  %53 = add i8 %36, 1
  %54 = icmp ne i8 %53, 8
  br i1 %54, label %rolled.loop, label %rolled.exit

rolled.exit:                                      ; preds = %rolled.loop
  br label %sw.epilog
}

code gen 1
destroying tree
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   %idxprom112 = and i64 %16, 67108863
Here ..
Skipping:   %incdec.ptr122 = getelementptr inbounds i32, i32* %p.0307, i64 1
Skipping:   %18 = lshr i64 %indvars.iv, 4
Here ..
Skipping:   %incdec.ptr135 = getelementptr inbounds i32, i32* %p.0307, i64 2
Skipping:   %20 = lshr i64 %indvars.iv, 2
Here ..
Skipping:   %incdec.ptr148 = getelementptr inbounds i32, i32* %p.0307, i64 3
Here ..
Skipping:   %incdec.ptr160 = getelementptr inbounds i32, i32* %p.0307, i64 4
Here ..
I:   br label %sw.epilog
Last:   br label %sw.epilog
Schedulable: 1
code gen 0
code gen 1
destroying tree
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   %idxprom163 = and i64 %23, 268435455
Here ..
Skipping:   %incdec.ptr173 = getelementptr inbounds i32, i32* %p.0307, i64 1
Here ..
Skipping:   %incdec.ptr185 = getelementptr inbounds i32, i32* %p.0307, i64 2
Here ..
I:   br label %sw.epilog
Last:   br label %sw.epilog
Schedulable: 1
code gen 0
code gen 1
destroying tree
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   %idxprom13 = and i64 %11, 33554431
Here ..
Skipping:   %incdec.ptr = getelementptr inbounds i32, i32* %p.0473, i64 1
Skipping:   %18 = lshr i64 %indvars.iv, 6
Here ..
Skipping:   %incdec.ptr47 = getelementptr inbounds i32, i32* %p.0473, i64 2
Skipping:   %26 = lshr i64 %indvars.iv, 5
Here ..
Skipping:   %incdec.ptr68 = getelementptr inbounds i32, i32* %p.0473, i64 3
Skipping:   %34 = lshr i64 %indvars.iv, 4
Here ..
Skipping:   %incdec.ptr89 = getelementptr inbounds i32, i32* %p.0473, i64 4
Skipping:   %42 = lshr i64 %indvars.iv, 3
Here ..
Skipping:   %incdec.ptr110 = getelementptr inbounds i32, i32* %p.0473, i64 5
Skipping:   %50 = lshr i64 %indvars.iv, 2
Here ..
Skipping:   %incdec.ptr131 = getelementptr inbounds i32, i32* %p.0473, i64 6
Skipping:   %58 = lshr i64 %indvars.iv, 1
Here ..
Skipping:   %incdec.ptr152 = getelementptr inbounds i32, i32* %p.0473, i64 7
Here ..
Skipping:   %incdec.ptr172 = getelementptr inbounds i32, i32* %p.0473, i64 8
Here ..
I:   br label %sw.epilog
Last:   br label %sw.epilog
Schedulable: 1
code gen 0
Gains: 127 - 72 = 55
Profitable: finishing code generation
; Function Attrs: nounwind optsize uwtable
define internal fastcc i32 @makecmap(%struct._TIFFRGBAImage* nocapture %img) unnamed_addr #0 {
entry:
  %bitspersample1 = getelementptr inbounds %struct._TIFFRGBAImage, %struct._TIFFRGBAImage* %img, i64 0, i32 6
  %0 = load i16, i16* %bitspersample1, align 4, !tbaa !29
  %1 = udiv i16 8, %0
  %redcmap = getelementptr inbounds %struct._TIFFRGBAImage, %struct._TIFFRGBAImage* %img, i64 0, i32 10
  %2 = load i16*, i16** %redcmap, align 8, !tbaa !22
  %greencmap = getelementptr inbounds %struct._TIFFRGBAImage, %struct._TIFFRGBAImage* %img, i64 0, i32 11
  %3 = load i16*, i16** %greencmap, align 8, !tbaa !23
  %bluecmap = getelementptr inbounds %struct._TIFFRGBAImage, %struct._TIFFRGBAImage* %img, i64 0, i32 12
  %4 = load i16*, i16** %bluecmap, align 8, !tbaa !24
  %5 = shl nuw nsw i16 %1, 10
  %narrow472 = add nuw nsw i16 %5, 2048
  %narrow = zext i16 %narrow472 to i32
  %call = tail call i8* @_TIFFmalloc(i32 %narrow) #8
  %PALmap = getelementptr inbounds %struct._TIFFRGBAImage, %struct._TIFFRGBAImage* %img, i64 0, i32 17
  %6 = bitcast i32*** %PALmap to i8**
  store i8* %call, i8** %6, align 8, !tbaa !20
  %cmp = icmp eq i8* %call, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %tif = getelementptr inbounds %struct._TIFFRGBAImage, %struct._TIFFRGBAImage* %img, i64 0, i32 0
  %7 = load %struct.tiff*, %struct.tiff** %tif, align 8, !tbaa !27
  %call7 = tail call i8* @TIFFFileName(%struct.tiff* %7) #8
  tail call void (i8*, i8*, ...) @TIFFError(i8* %call7, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.31, i64 0, i64 0)) #8
  br label %cleanup

if.end:                                           ; preds = %entry
  %8 = bitcast i8* %call to i32**
  %add.ptr = getelementptr inbounds i8, i8* %call, i64 2048
  %9 = bitcast i8* %add.ptr to i32*
  br label %for.body

for.body:                                         ; preds = %sw.epilog.for.body_crit_edge, %if.end
  %10 = phi i32** [ %8, %if.end ], [ %.pre, %sw.epilog.for.body_crit_edge ]
  %indvars.iv = phi i64 [ 0, %if.end ], [ %indvars.iv.next, %sw.epilog.for.body_crit_edge ]
  %p.0473 = phi i32* [ %9, %if.end ], [ %p.1, %sw.epilog.for.body_crit_edge ]
  %arrayidx = getelementptr inbounds i32*, i32** %10, i64 %indvars.iv
  store i32* %p.0473, i32** %arrayidx, align 8, !tbaa !31
  switch i16 %0, label %sw.epilog [
    i16 1, label %sw.bb
    i16 2, label %sw.bb173
    i16 4, label %sw.bb256
    i16 8, label %sw.bb297
  ]

sw.bb:                                            ; preds = %for.body
  %11 = lshr i64 %indvars.iv, 7
  %idxprom13 = and i64 %11, 33554431
  %arrayidx14 = getelementptr inbounds i16, i16* %2, i64 %idxprom13
  %12 = load i16, i16* %arrayidx14, align 2, !tbaa !13
  %13 = and i16 %12, 255
  %arrayidx17 = getelementptr inbounds i16, i16* %3, i64 %idxprom13
  %14 = load i16, i16* %arrayidx17, align 2, !tbaa !13
  %15 = shl i16 %14, 8
  %or464 = or i16 %15, %13
  %or = zext i16 %or464 to i32
  %arrayidx21 = getelementptr inbounds i16, i16* %4, i64 %idxprom13
  %16 = load i16, i16* %arrayidx21, align 2, !tbaa !13
  %17 = and i16 %16, 255
  %and23 = zext i16 %17 to i32
  %shl24 = shl nuw nsw i32 %and23, 16
  %or25 = or i32 %shl24, %or
  %or26 = or i32 %or25, -16777216
  %incdec.ptr = getelementptr inbounds i32, i32* %p.0473, i64 1
  store i32 %or26, i32* %p.0473, align 4, !tbaa !38
  %18 = lshr i64 %indvars.iv, 6
  %19 = and i64 %18, 1
  %arrayidx31 = getelementptr inbounds i16, i16* %2, i64 %19
  %20 = load i16, i16* %arrayidx31, align 2, !tbaa !13
  %21 = and i16 %20, 255
  %arrayidx35 = getelementptr inbounds i16, i16* %3, i64 %19
  %22 = load i16, i16* %arrayidx35, align 2, !tbaa !13
  %23 = shl i16 %22, 8
  %or39465 = or i16 %23, %21
  %or39 = zext i16 %or39465 to i32
  %arrayidx41 = getelementptr inbounds i16, i16* %4, i64 %19
  %24 = load i16, i16* %arrayidx41, align 2, !tbaa !13
  %25 = and i16 %24, 255
  %and43 = zext i16 %25 to i32
  %shl44 = shl nuw nsw i32 %and43, 16
  %or45 = or i32 %shl44, %or39
  %or46 = or i32 %or45, -16777216
  %incdec.ptr47 = getelementptr inbounds i32, i32* %p.0473, i64 2
  store i32 %or46, i32* %incdec.ptr, align 4, !tbaa !38
  %26 = lshr i64 %indvars.iv, 5
  %27 = and i64 %26, 1
  %arrayidx52 = getelementptr inbounds i16, i16* %2, i64 %27
  %28 = load i16, i16* %arrayidx52, align 2, !tbaa !13
  %29 = and i16 %28, 255
  %arrayidx56 = getelementptr inbounds i16, i16* %3, i64 %27
  %30 = load i16, i16* %arrayidx56, align 2, !tbaa !13
  %31 = shl i16 %30, 8
  %or60466 = or i16 %31, %29
  %or60 = zext i16 %or60466 to i32
  %arrayidx62 = getelementptr inbounds i16, i16* %4, i64 %27
  %32 = load i16, i16* %arrayidx62, align 2, !tbaa !13
  %33 = and i16 %32, 255
  %and64 = zext i16 %33 to i32
  %shl65 = shl nuw nsw i32 %and64, 16
  %or66 = or i32 %shl65, %or60
  %or67 = or i32 %or66, -16777216
  %incdec.ptr68 = getelementptr inbounds i32, i32* %p.0473, i64 3
  store i32 %or67, i32* %incdec.ptr47, align 4, !tbaa !38
  %34 = lshr i64 %indvars.iv, 4
  %35 = and i64 %34, 1
  %arrayidx73 = getelementptr inbounds i16, i16* %2, i64 %35
  %36 = load i16, i16* %arrayidx73, align 2, !tbaa !13
  %37 = and i16 %36, 255
  %arrayidx77 = getelementptr inbounds i16, i16* %3, i64 %35
  %38 = load i16, i16* %arrayidx77, align 2, !tbaa !13
  %39 = shl i16 %38, 8
  %or81467 = or i16 %39, %37
  %or81 = zext i16 %or81467 to i32
  %arrayidx83 = getelementptr inbounds i16, i16* %4, i64 %35
  %40 = load i16, i16* %arrayidx83, align 2, !tbaa !13
  %41 = and i16 %40, 255
  %and85 = zext i16 %41 to i32
  %shl86 = shl nuw nsw i32 %and85, 16
  %or87 = or i32 %shl86, %or81
  %or88 = or i32 %or87, -16777216
  %incdec.ptr89 = getelementptr inbounds i32, i32* %p.0473, i64 4
  store i32 %or88, i32* %incdec.ptr68, align 4, !tbaa !38
  %42 = lshr i64 %indvars.iv, 3
  %43 = and i64 %42, 1
  %arrayidx94 = getelementptr inbounds i16, i16* %2, i64 %43
  %44 = load i16, i16* %arrayidx94, align 2, !tbaa !13
  %45 = and i16 %44, 255
  %arrayidx98 = getelementptr inbounds i16, i16* %3, i64 %43
  %46 = load i16, i16* %arrayidx98, align 2, !tbaa !13
  %47 = shl i16 %46, 8
  %or102468 = or i16 %47, %45
  %or102 = zext i16 %or102468 to i32
  %arrayidx104 = getelementptr inbounds i16, i16* %4, i64 %43
  %48 = load i16, i16* %arrayidx104, align 2, !tbaa !13
  %49 = and i16 %48, 255
  %and106 = zext i16 %49 to i32
  %shl107 = shl nuw nsw i32 %and106, 16
  %or108 = or i32 %shl107, %or102
  %or109 = or i32 %or108, -16777216
  %incdec.ptr110 = getelementptr inbounds i32, i32* %p.0473, i64 5
  store i32 %or109, i32* %incdec.ptr89, align 4, !tbaa !38
  %50 = lshr i64 %indvars.iv, 2
  %51 = and i64 %50, 1
  %arrayidx115 = getelementptr inbounds i16, i16* %2, i64 %51
  %52 = load i16, i16* %arrayidx115, align 2, !tbaa !13
  %53 = and i16 %52, 255
  %arrayidx119 = getelementptr inbounds i16, i16* %3, i64 %51
  %54 = load i16, i16* %arrayidx119, align 2, !tbaa !13
  %55 = shl i16 %54, 8
  %or123469 = or i16 %55, %53
  %or123 = zext i16 %or123469 to i32
  %arrayidx125 = getelementptr inbounds i16, i16* %4, i64 %51
  %56 = load i16, i16* %arrayidx125, align 2, !tbaa !13
  %57 = and i16 %56, 255
  %and127 = zext i16 %57 to i32
  %shl128 = shl nuw nsw i32 %and127, 16
  %or129 = or i32 %shl128, %or123
  %or130 = or i32 %or129, -16777216
  %incdec.ptr131 = getelementptr inbounds i32, i32* %p.0473, i64 6
  store i32 %or130, i32* %incdec.ptr110, align 4, !tbaa !38
  %58 = lshr i64 %indvars.iv, 1
  %59 = and i64 %58, 1
  %arrayidx136 = getelementptr inbounds i16, i16* %2, i64 %59
  %60 = load i16, i16* %arrayidx136, align 2, !tbaa !13
  %61 = and i16 %60, 255
  %arrayidx140 = getelementptr inbounds i16, i16* %3, i64 %59
  %62 = load i16, i16* %arrayidx140, align 2, !tbaa !13
  %63 = shl i16 %62, 8
  %or144470 = or i16 %63, %61
  %or144 = zext i16 %or144470 to i32
  %arrayidx146 = getelementptr inbounds i16, i16* %4, i64 %59
  %64 = load i16, i16* %arrayidx146, align 2, !tbaa !13
  %65 = and i16 %64, 255
  %and148 = zext i16 %65 to i32
  %shl149 = shl nuw nsw i32 %and148, 16
  %or150 = or i32 %shl149, %or144
  %or151 = or i32 %or150, -16777216
  %incdec.ptr152 = getelementptr inbounds i32, i32* %p.0473, i64 7
  store i32 %or151, i32* %incdec.ptr131, align 4, !tbaa !38
  %66 = and i64 %indvars.iv, 1
  %arrayidx156 = getelementptr inbounds i16, i16* %2, i64 %66
  %67 = load i16, i16* %arrayidx156, align 2, !tbaa !13
  %68 = and i16 %67, 255
  %arrayidx160 = getelementptr inbounds i16, i16* %3, i64 %66
  %69 = load i16, i16* %arrayidx160, align 2, !tbaa !13
  %70 = shl i16 %69, 8
  %or164471 = or i16 %70, %68
  %or164 = zext i16 %or164471 to i32
  %arrayidx166 = getelementptr inbounds i16, i16* %4, i64 %66
  %71 = load i16, i16* %arrayidx166, align 2, !tbaa !13
  %72 = and i16 %71, 255
  %and168 = zext i16 %72 to i32
  %shl169 = shl nuw nsw i32 %and168, 16
  %or170 = or i32 %shl169, %or164
  %or171 = or i32 %or170, -16777216
  %incdec.ptr172 = getelementptr inbounds i32, i32* %p.0473, i64 8
  store i32 %or171, i32* %incdec.ptr152, align 4, !tbaa !38
  br label %sw.epilog

sw.bb173:                                         ; preds = %for.body
  %73 = lshr i64 %indvars.iv, 6
  %idxprom176 = and i64 %73, 67108863
  %arrayidx177 = getelementptr inbounds i16, i16* %2, i64 %idxprom176
  %74 = load i16, i16* %arrayidx177, align 2, !tbaa !13
  %75 = and i16 %74, 255
  %arrayidx181 = getelementptr inbounds i16, i16* %3, i64 %idxprom176
  %76 = load i16, i16* %arrayidx181, align 2, !tbaa !13
  %77 = shl i16 %76, 8
  %or185460 = or i16 %77, %75
  %or185 = zext i16 %or185460 to i32
  %arrayidx187 = getelementptr inbounds i16, i16* %4, i64 %idxprom176
  %78 = load i16, i16* %arrayidx187, align 2, !tbaa !13
  %79 = and i16 %78, 255
  %and189 = zext i16 %79 to i32
  %shl190 = shl nuw nsw i32 %and189, 16
  %or191 = or i32 %shl190, %or185
  %or192 = or i32 %or191, -16777216
  %incdec.ptr193 = getelementptr inbounds i32, i32* %p.0473, i64 1
  store i32 %or192, i32* %p.0473, align 4, !tbaa !38
  %80 = lshr i64 %indvars.iv, 4
  %81 = and i64 %80, 3
  %arrayidx198 = getelementptr inbounds i16, i16* %2, i64 %81
  %82 = load i16, i16* %arrayidx198, align 2, !tbaa !13
  %83 = and i16 %82, 255
  %arrayidx202 = getelementptr inbounds i16, i16* %3, i64 %81
  %84 = load i16, i16* %arrayidx202, align 2, !tbaa !13
  %85 = shl i16 %84, 8
  %or206461 = or i16 %85, %83
  %or206 = zext i16 %or206461 to i32
  %arrayidx208 = getelementptr inbounds i16, i16* %4, i64 %81
  %86 = load i16, i16* %arrayidx208, align 2, !tbaa !13
  %87 = and i16 %86, 255
  %and210 = zext i16 %87 to i32
  %shl211 = shl nuw nsw i32 %and210, 16
  %or212 = or i32 %shl211, %or206
  %or213 = or i32 %or212, -16777216
  %incdec.ptr214 = getelementptr inbounds i32, i32* %p.0473, i64 2
  store i32 %or213, i32* %incdec.ptr193, align 4, !tbaa !38
  %88 = lshr i64 %indvars.iv, 2
  %89 = and i64 %88, 3
  %arrayidx219 = getelementptr inbounds i16, i16* %2, i64 %89
  %90 = load i16, i16* %arrayidx219, align 2, !tbaa !13
  %91 = and i16 %90, 255
  %arrayidx223 = getelementptr inbounds i16, i16* %3, i64 %89
  %92 = load i16, i16* %arrayidx223, align 2, !tbaa !13
  %93 = shl i16 %92, 8
  %or227462 = or i16 %93, %91
  %or227 = zext i16 %or227462 to i32
  %arrayidx229 = getelementptr inbounds i16, i16* %4, i64 %89
  %94 = load i16, i16* %arrayidx229, align 2, !tbaa !13
  %95 = and i16 %94, 255
  %and231 = zext i16 %95 to i32
  %shl232 = shl nuw nsw i32 %and231, 16
  %or233 = or i32 %shl232, %or227
  %or234 = or i32 %or233, -16777216
  %incdec.ptr235 = getelementptr inbounds i32, i32* %p.0473, i64 3
  store i32 %or234, i32* %incdec.ptr214, align 4, !tbaa !38
  %96 = and i64 %indvars.iv, 3
  %arrayidx239 = getelementptr inbounds i16, i16* %2, i64 %96
  %97 = load i16, i16* %arrayidx239, align 2, !tbaa !13
  %98 = and i16 %97, 255
  %arrayidx243 = getelementptr inbounds i16, i16* %3, i64 %96
  %99 = load i16, i16* %arrayidx243, align 2, !tbaa !13
  %100 = shl i16 %99, 8
  %or247463 = or i16 %100, %98
  %or247 = zext i16 %or247463 to i32
  %arrayidx249 = getelementptr inbounds i16, i16* %4, i64 %96
  %101 = load i16, i16* %arrayidx249, align 2, !tbaa !13
  %102 = and i16 %101, 255
  %and251 = zext i16 %102 to i32
  %shl252 = shl nuw nsw i32 %and251, 16
  %or253 = or i32 %shl252, %or247
  %or254 = or i32 %or253, -16777216
  %incdec.ptr255 = getelementptr inbounds i32, i32* %p.0473, i64 4
  store i32 %or254, i32* %incdec.ptr235, align 4, !tbaa !38
  br label %sw.epilog

sw.bb256:                                         ; preds = %for.body
  %103 = lshr i64 %indvars.iv, 4
  %idxprom259 = and i64 %103, 268435455
  %arrayidx260 = getelementptr inbounds i16, i16* %2, i64 %idxprom259
  %104 = load i16, i16* %arrayidx260, align 2, !tbaa !13
  %105 = and i16 %104, 255
  %arrayidx264 = getelementptr inbounds i16, i16* %3, i64 %idxprom259
  %106 = load i16, i16* %arrayidx264, align 2, !tbaa !13
  %107 = shl i16 %106, 8
  %or268458 = or i16 %107, %105
  %or268 = zext i16 %or268458 to i32
  %arrayidx270 = getelementptr inbounds i16, i16* %4, i64 %idxprom259
  %108 = load i16, i16* %arrayidx270, align 2, !tbaa !13
  %109 = and i16 %108, 255
  %and272 = zext i16 %109 to i32
  %shl273 = shl nuw nsw i32 %and272, 16
  %or274 = or i32 %shl273, %or268
  %or275 = or i32 %or274, -16777216
  %incdec.ptr276 = getelementptr inbounds i32, i32* %p.0473, i64 1
  store i32 %or275, i32* %p.0473, align 4, !tbaa !38
  %110 = and i64 %indvars.iv, 15
  %arrayidx280 = getelementptr inbounds i16, i16* %2, i64 %110
  %111 = load i16, i16* %arrayidx280, align 2, !tbaa !13
  %112 = and i16 %111, 255
  %arrayidx284 = getelementptr inbounds i16, i16* %3, i64 %110
  %113 = load i16, i16* %arrayidx284, align 2, !tbaa !13
  %114 = shl i16 %113, 8
  %or288459 = or i16 %114, %112
  %or288 = zext i16 %or288459 to i32
  %arrayidx290 = getelementptr inbounds i16, i16* %4, i64 %110
  %115 = load i16, i16* %arrayidx290, align 2, !tbaa !13
  %116 = and i16 %115, 255
  %and292 = zext i16 %116 to i32
  %shl293 = shl nuw nsw i32 %and292, 16
  %or294 = or i32 %shl293, %or288
  %or295 = or i32 %or294, -16777216
  %incdec.ptr296 = getelementptr inbounds i32, i32* %p.0473, i64 2
  store i32 %or295, i32* %incdec.ptr276, align 4, !tbaa !38
  br label %sw.epilog

sw.bb297:                                         ; preds = %for.body
  %arrayidx300 = getelementptr inbounds i16, i16* %2, i64 %indvars.iv
  %117 = load i16, i16* %arrayidx300, align 2, !tbaa !13
  %118 = and i16 %117, 255
  %arrayidx304 = getelementptr inbounds i16, i16* %3, i64 %indvars.iv
  %119 = load i16, i16* %arrayidx304, align 2, !tbaa !13
  %120 = shl i16 %119, 8
  %or308457 = or i16 %120, %118
  %or308 = zext i16 %or308457 to i32
  %arrayidx310 = getelementptr inbounds i16, i16* %4, i64 %indvars.iv
  %121 = load i16, i16* %arrayidx310, align 2, !tbaa !13
  %122 = and i16 %121, 255
  %and312 = zext i16 %122 to i32
  %shl313 = shl nuw nsw i32 %and312, 16
  %or314 = or i32 %shl313, %or308
  %or315 = or i32 %or314, -16777216
  %incdec.ptr316 = getelementptr inbounds i32, i32* %p.0473, i64 1
  store i32 %or315, i32* %p.0473, align 4, !tbaa !38
  br label %sw.epilog

sw.epilog:                                        ; preds = %for.body, %sw.bb297, %sw.bb256, %sw.bb173, %sw.bb
  %p.1 = phi i32* [ %p.0473, %for.body ], [ %incdec.ptr316, %sw.bb297 ], [ %incdec.ptr296, %sw.bb256 ], [ %incdec.ptr255, %sw.bb173 ], [ %incdec.ptr172, %sw.bb ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, 256
  br i1 %exitcond.not, label %cleanup.loopexit, label %sw.epilog.for.body_crit_edge, !llvm.loop !88

sw.epilog.for.body_crit_edge:                     ; preds = %sw.epilog
  %.pre = load i32**, i32*** %PALmap, align 8, !tbaa !20
  br label %for.body

cleanup.loopexit:                                 ; preds = %sw.epilog
  br label %cleanup

cleanup:                                          ; preds = %cleanup.loopexit, %if.then
  %retval.0 = phi i32 [ 0, %if.then ], [ 1, %cleanup.loopexit ]
  ret i32 %retval.0

rolled.pre:                                       ; No predecessors!
  %123 = alloca i64, i8 8, align 8
  %124 = getelementptr i64, i64* %123, i8 0
  store i64 %11, i64* %124, align 8
  %125 = getelementptr i64, i64* %123, i8 1
  store i64 %18, i64* %125, align 8
  %126 = getelementptr i64, i64* %123, i8 2
  store i64 %26, i64* %126, align 8
  %127 = getelementptr i64, i64* %123, i8 3
  store i64 %34, i64* %127, align 8
  %128 = getelementptr i64, i64* %123, i8 4
  store i64 %42, i64* %128, align 8
  %129 = getelementptr i64, i64* %123, i8 5
  store i64 %50, i64* %129, align 8
  %130 = getelementptr i64, i64* %123, i8 6
  store i64 %58, i64* %130, align 8
  %131 = getelementptr i64, i64* %123, i8 7
  store i64 %indvars.iv, i64* %131, align 8

rolled.loop:                                      ; No predecessors!
  %132 = phi i8 
  %133 = getelementptr i64, i64* %123, i8 %132
  %134 = load i64, i64* %133, align 8
  %135 = getelementptr [8 x i64], [8 x i64]* @1, i8 0, i8 %132
  %136 = load i64, i64* %135, align 8
  %137 = and i64 %134, %136
  %138 = getelementptr inbounds i16, i16* %4, i64 %137
  %139 = load i16, i16* %138, align 2
  %140 = and i16 %139, 255
  %141 = zext i16 %140 to i32
  %142 = shl nuw nsw i32 %141, 16
  %143 = getelementptr inbounds i16, i16* %3, i64 %137
  %144 = load i16, i16* %143, align 2
  %145 = shl i16 %144, 8
  %146 = getelementptr inbounds i16, i16* %2, i64 %137
  %147 = load i16, i16* %146, align 2
  %148 = and i16 %147, 255
  %149 = or i16 %145, %148
  %150 = zext i16 %149 to i32
  %151 = or i32 %142, %150
  %152 = or i32 %151, -16777216
  %153 = zext i8 %132 to i64
  %154 = add i64 %153, 1
  %155 = getelementptr i32, i32* %p.0473, i64 %154
  store i32 %152, i32* %155, align 4
  %156 = add i8 %132, 1
  %157 = icmp ne i8 %156, 8

rolled.exit:                                      ; No predecessors!
}

Done!
; Function Attrs: nounwind optsize uwtable
define internal fastcc i32 @makecmap(%struct._TIFFRGBAImage* nocapture %img) unnamed_addr #0 {
entry:
  %bitspersample1 = getelementptr inbounds %struct._TIFFRGBAImage, %struct._TIFFRGBAImage* %img, i64 0, i32 6
  %0 = load i16, i16* %bitspersample1, align 4, !tbaa !29
  %1 = udiv i16 8, %0
  %redcmap = getelementptr inbounds %struct._TIFFRGBAImage, %struct._TIFFRGBAImage* %img, i64 0, i32 10
  %2 = load i16*, i16** %redcmap, align 8, !tbaa !22
  %greencmap = getelementptr inbounds %struct._TIFFRGBAImage, %struct._TIFFRGBAImage* %img, i64 0, i32 11
  %3 = load i16*, i16** %greencmap, align 8, !tbaa !23
  %bluecmap = getelementptr inbounds %struct._TIFFRGBAImage, %struct._TIFFRGBAImage* %img, i64 0, i32 12
  %4 = load i16*, i16** %bluecmap, align 8, !tbaa !24
  %5 = shl nuw nsw i16 %1, 10
  %narrow472 = add nuw nsw i16 %5, 2048
  %narrow = zext i16 %narrow472 to i32
  %call = tail call i8* @_TIFFmalloc(i32 %narrow) #8
  %PALmap = getelementptr inbounds %struct._TIFFRGBAImage, %struct._TIFFRGBAImage* %img, i64 0, i32 17
  %6 = bitcast i32*** %PALmap to i8**
  store i8* %call, i8** %6, align 8, !tbaa !20
  %cmp = icmp eq i8* %call, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %tif = getelementptr inbounds %struct._TIFFRGBAImage, %struct._TIFFRGBAImage* %img, i64 0, i32 0
  %7 = load %struct.tiff*, %struct.tiff** %tif, align 8, !tbaa !27
  %call7 = tail call i8* @TIFFFileName(%struct.tiff* %7) #8
  tail call void (i8*, i8*, ...) @TIFFError(i8* %call7, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.31, i64 0, i64 0)) #8
  br label %cleanup

if.end:                                           ; preds = %entry
  %8 = bitcast i8* %call to i32**
  %add.ptr = getelementptr inbounds i8, i8* %call, i64 2048
  %9 = bitcast i8* %add.ptr to i32*
  br label %for.body

for.body:                                         ; preds = %sw.epilog.for.body_crit_edge, %if.end
  %10 = phi i32** [ %8, %if.end ], [ %.pre, %sw.epilog.for.body_crit_edge ]
  %indvars.iv = phi i64 [ 0, %if.end ], [ %indvars.iv.next, %sw.epilog.for.body_crit_edge ]
  %p.0473 = phi i32* [ %9, %if.end ], [ %p.1, %sw.epilog.for.body_crit_edge ]
  %arrayidx = getelementptr inbounds i32*, i32** %10, i64 %indvars.iv
  store i32* %p.0473, i32** %arrayidx, align 8, !tbaa !31
  switch i16 %0, label %sw.epilog [
    i16 1, label %sw.bb
    i16 2, label %sw.bb173
    i16 4, label %sw.bb256
    i16 8, label %sw.bb297
  ]

sw.bb:                                            ; preds = %for.body
  %11 = lshr i64 %indvars.iv, 7
  %12 = lshr i64 %indvars.iv, 6
  %13 = lshr i64 %indvars.iv, 5
  %14 = lshr i64 %indvars.iv, 4
  %15 = lshr i64 %indvars.iv, 3
  %16 = lshr i64 %indvars.iv, 2
  %17 = lshr i64 %indvars.iv, 1
  %incdec.ptr172 = getelementptr inbounds i32, i32* %p.0473, i64 8
  br label %rolled.pre

sw.bb173:                                         ; preds = %for.body
  %18 = lshr i64 %indvars.iv, 6
  %idxprom176 = and i64 %18, 67108863
  %arrayidx177 = getelementptr inbounds i16, i16* %2, i64 %idxprom176
  %19 = load i16, i16* %arrayidx177, align 2, !tbaa !13
  %20 = and i16 %19, 255
  %arrayidx181 = getelementptr inbounds i16, i16* %3, i64 %idxprom176
  %21 = load i16, i16* %arrayidx181, align 2, !tbaa !13
  %22 = shl i16 %21, 8
  %or185460 = or i16 %22, %20
  %or185 = zext i16 %or185460 to i32
  %arrayidx187 = getelementptr inbounds i16, i16* %4, i64 %idxprom176
  %23 = load i16, i16* %arrayidx187, align 2, !tbaa !13
  %24 = and i16 %23, 255
  %and189 = zext i16 %24 to i32
  %shl190 = shl nuw nsw i32 %and189, 16
  %or191 = or i32 %shl190, %or185
  %or192 = or i32 %or191, -16777216
  %incdec.ptr193 = getelementptr inbounds i32, i32* %p.0473, i64 1
  store i32 %or192, i32* %p.0473, align 4, !tbaa !38
  %25 = lshr i64 %indvars.iv, 4
  %26 = and i64 %25, 3
  %arrayidx198 = getelementptr inbounds i16, i16* %2, i64 %26
  %27 = load i16, i16* %arrayidx198, align 2, !tbaa !13
  %28 = and i16 %27, 255
  %arrayidx202 = getelementptr inbounds i16, i16* %3, i64 %26
  %29 = load i16, i16* %arrayidx202, align 2, !tbaa !13
  %30 = shl i16 %29, 8
  %or206461 = or i16 %30, %28
  %or206 = zext i16 %or206461 to i32
  %arrayidx208 = getelementptr inbounds i16, i16* %4, i64 %26
  %31 = load i16, i16* %arrayidx208, align 2, !tbaa !13
  %32 = and i16 %31, 255
  %and210 = zext i16 %32 to i32
  %shl211 = shl nuw nsw i32 %and210, 16
  %or212 = or i32 %shl211, %or206
  %or213 = or i32 %or212, -16777216
  %incdec.ptr214 = getelementptr inbounds i32, i32* %p.0473, i64 2
  store i32 %or213, i32* %incdec.ptr193, align 4, !tbaa !38
  %33 = lshr i64 %indvars.iv, 2
  %34 = and i64 %33, 3
  %arrayidx219 = getelementptr inbounds i16, i16* %2, i64 %34
  %35 = load i16, i16* %arrayidx219, align 2, !tbaa !13
  %36 = and i16 %35, 255
  %arrayidx223 = getelementptr inbounds i16, i16* %3, i64 %34
  %37 = load i16, i16* %arrayidx223, align 2, !tbaa !13
  %38 = shl i16 %37, 8
  %or227462 = or i16 %38, %36
  %or227 = zext i16 %or227462 to i32
  %arrayidx229 = getelementptr inbounds i16, i16* %4, i64 %34
  %39 = load i16, i16* %arrayidx229, align 2, !tbaa !13
  %40 = and i16 %39, 255
  %and231 = zext i16 %40 to i32
  %shl232 = shl nuw nsw i32 %and231, 16
  %or233 = or i32 %shl232, %or227
  %or234 = or i32 %or233, -16777216
  %incdec.ptr235 = getelementptr inbounds i32, i32* %p.0473, i64 3
  store i32 %or234, i32* %incdec.ptr214, align 4, !tbaa !38
  %41 = and i64 %indvars.iv, 3
  %arrayidx239 = getelementptr inbounds i16, i16* %2, i64 %41
  %42 = load i16, i16* %arrayidx239, align 2, !tbaa !13
  %43 = and i16 %42, 255
  %arrayidx243 = getelementptr inbounds i16, i16* %3, i64 %41
  %44 = load i16, i16* %arrayidx243, align 2, !tbaa !13
  %45 = shl i16 %44, 8
  %or247463 = or i16 %45, %43
  %or247 = zext i16 %or247463 to i32
  %arrayidx249 = getelementptr inbounds i16, i16* %4, i64 %41
  %46 = load i16, i16* %arrayidx249, align 2, !tbaa !13
  %47 = and i16 %46, 255
  %and251 = zext i16 %47 to i32
  %shl252 = shl nuw nsw i32 %and251, 16
  %or253 = or i32 %shl252, %or247
  %or254 = or i32 %or253, -16777216
  %incdec.ptr255 = getelementptr inbounds i32, i32* %p.0473, i64 4
  store i32 %or254, i32* %incdec.ptr235, align 4, !tbaa !38
  br label %sw.epilog

sw.bb256:                                         ; preds = %for.body
  %48 = lshr i64 %indvars.iv, 4
  %idxprom259 = and i64 %48, 268435455
  %arrayidx260 = getelementptr inbounds i16, i16* %2, i64 %idxprom259
  %49 = load i16, i16* %arrayidx260, align 2, !tbaa !13
  %50 = and i16 %49, 255
  %arrayidx264 = getelementptr inbounds i16, i16* %3, i64 %idxprom259
  %51 = load i16, i16* %arrayidx264, align 2, !tbaa !13
  %52 = shl i16 %51, 8
  %or268458 = or i16 %52, %50
  %or268 = zext i16 %or268458 to i32
  %arrayidx270 = getelementptr inbounds i16, i16* %4, i64 %idxprom259
  %53 = load i16, i16* %arrayidx270, align 2, !tbaa !13
  %54 = and i16 %53, 255
  %and272 = zext i16 %54 to i32
  %shl273 = shl nuw nsw i32 %and272, 16
  %or274 = or i32 %shl273, %or268
  %or275 = or i32 %or274, -16777216
  %incdec.ptr276 = getelementptr inbounds i32, i32* %p.0473, i64 1
  store i32 %or275, i32* %p.0473, align 4, !tbaa !38
  %55 = and i64 %indvars.iv, 15
  %arrayidx280 = getelementptr inbounds i16, i16* %2, i64 %55
  %56 = load i16, i16* %arrayidx280, align 2, !tbaa !13
  %57 = and i16 %56, 255
  %arrayidx284 = getelementptr inbounds i16, i16* %3, i64 %55
  %58 = load i16, i16* %arrayidx284, align 2, !tbaa !13
  %59 = shl i16 %58, 8
  %or288459 = or i16 %59, %57
  %or288 = zext i16 %or288459 to i32
  %arrayidx290 = getelementptr inbounds i16, i16* %4, i64 %55
  %60 = load i16, i16* %arrayidx290, align 2, !tbaa !13
  %61 = and i16 %60, 255
  %and292 = zext i16 %61 to i32
  %shl293 = shl nuw nsw i32 %and292, 16
  %or294 = or i32 %shl293, %or288
  %or295 = or i32 %or294, -16777216
  %incdec.ptr296 = getelementptr inbounds i32, i32* %p.0473, i64 2
  store i32 %or295, i32* %incdec.ptr276, align 4, !tbaa !38
  br label %sw.epilog

sw.bb297:                                         ; preds = %for.body
  %arrayidx300 = getelementptr inbounds i16, i16* %2, i64 %indvars.iv
  %62 = load i16, i16* %arrayidx300, align 2, !tbaa !13
  %63 = and i16 %62, 255
  %arrayidx304 = getelementptr inbounds i16, i16* %3, i64 %indvars.iv
  %64 = load i16, i16* %arrayidx304, align 2, !tbaa !13
  %65 = shl i16 %64, 8
  %or308457 = or i16 %65, %63
  %or308 = zext i16 %or308457 to i32
  %arrayidx310 = getelementptr inbounds i16, i16* %4, i64 %indvars.iv
  %66 = load i16, i16* %arrayidx310, align 2, !tbaa !13
  %67 = and i16 %66, 255
  %and312 = zext i16 %67 to i32
  %shl313 = shl nuw nsw i32 %and312, 16
  %or314 = or i32 %shl313, %or308
  %or315 = or i32 %or314, -16777216
  %incdec.ptr316 = getelementptr inbounds i32, i32* %p.0473, i64 1
  store i32 %or315, i32* %p.0473, align 4, !tbaa !38
  br label %sw.epilog

sw.epilog:                                        ; preds = %for.body, %sw.bb297, %sw.bb256, %sw.bb173, %rolled.exit
  %p.1 = phi i32* [ %p.0473, %for.body ], [ %incdec.ptr316, %sw.bb297 ], [ %incdec.ptr296, %sw.bb256 ], [ %incdec.ptr255, %sw.bb173 ], [ %incdec.ptr172, %rolled.exit ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, 256
  br i1 %exitcond.not, label %cleanup.loopexit, label %sw.epilog.for.body_crit_edge, !llvm.loop !88

sw.epilog.for.body_crit_edge:                     ; preds = %sw.epilog
  %.pre = load i32**, i32*** %PALmap, align 8, !tbaa !20
  br label %for.body

cleanup.loopexit:                                 ; preds = %sw.epilog
  br label %cleanup

cleanup:                                          ; preds = %cleanup.loopexit, %if.then
  %retval.0 = phi i32 [ 0, %if.then ], [ 1, %cleanup.loopexit ]
  ret i32 %retval.0

rolled.pre:                                       ; preds = %sw.bb
  %68 = alloca i64, i8 8, align 8
  %69 = getelementptr i64, i64* %68, i8 0
  store i64 %11, i64* %69, align 8
  %70 = getelementptr i64, i64* %68, i8 1
  store i64 %12, i64* %70, align 8
  %71 = getelementptr i64, i64* %68, i8 2
  store i64 %13, i64* %71, align 8
  %72 = getelementptr i64, i64* %68, i8 3
  store i64 %14, i64* %72, align 8
  %73 = getelementptr i64, i64* %68, i8 4
  store i64 %15, i64* %73, align 8
  %74 = getelementptr i64, i64* %68, i8 5
  store i64 %16, i64* %74, align 8
  %75 = getelementptr i64, i64* %68, i8 6
  store i64 %17, i64* %75, align 8
  %76 = getelementptr i64, i64* %68, i8 7
  store i64 %indvars.iv, i64* %76, align 8
  br label %rolled.loop

rolled.loop:                                      ; preds = %rolled.pre, %rolled.loop
  %77 = phi i8 [ 0, %rolled.pre ], [ %101, %rolled.loop ]
  %78 = getelementptr i64, i64* %68, i8 %77
  %79 = load i64, i64* %78, align 8
  %80 = getelementptr [8 x i64], [8 x i64]* @1, i8 0, i8 %77
  %81 = load i64, i64* %80, align 8
  %82 = and i64 %79, %81
  %83 = getelementptr inbounds i16, i16* %4, i64 %82
  %84 = load i16, i16* %83, align 2
  %85 = and i16 %84, 255
  %86 = zext i16 %85 to i32
  %87 = shl nuw nsw i32 %86, 16
  %88 = getelementptr inbounds i16, i16* %3, i64 %82
  %89 = load i16, i16* %88, align 2
  %90 = shl i16 %89, 8
  %91 = getelementptr inbounds i16, i16* %2, i64 %82
  %92 = load i16, i16* %91, align 2
  %93 = and i16 %92, 255
  %94 = or i16 %90, %93
  %95 = zext i16 %94 to i32
  %96 = or i32 %87, %95
  %97 = or i32 %96, -16777216
  %98 = zext i8 %77 to i64
  %99 = add i64 %98, 1
  %100 = getelementptr i32, i32* %p.0473, i64 %99
  store i32 %97, i32* %100, align 4
  %101 = add i8 %77, 1
  %102 = icmp ne i8 %101, 8
  br i1 %102, label %rolled.loop, label %rolled.exit

rolled.exit:                                      ; preds = %rolled.loop
  br label %sw.epilog
}

code gen 1
destroying tree
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   %idxprom176 = and i64 %18, 67108863
Here ..
Skipping:   %incdec.ptr193 = getelementptr inbounds i32, i32* %p.0473, i64 1
Skipping:   %25 = lshr i64 %indvars.iv, 4
Here ..
Skipping:   %incdec.ptr214 = getelementptr inbounds i32, i32* %p.0473, i64 2
Skipping:   %33 = lshr i64 %indvars.iv, 2
Here ..
Skipping:   %incdec.ptr235 = getelementptr inbounds i32, i32* %p.0473, i64 3
Here ..
Skipping:   %incdec.ptr255 = getelementptr inbounds i32, i32* %p.0473, i64 4
Here ..
I:   br label %sw.epilog
Last:   br label %sw.epilog
Schedulable: 1
code gen 0
code gen 1
destroying tree
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   %idxprom259 = and i64 %48, 268435455
Here ..
Skipping:   %incdec.ptr276 = getelementptr inbounds i32, i32* %p.0473, i64 1
Here ..
Skipping:   %incdec.ptr296 = getelementptr inbounds i32, i32* %p.0473, i64 2
Here ..
I:   br label %sw.epilog
Last:   br label %sw.epilog
Schedulable: 1
code gen 0
code gen 1
destroying tree
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   %add.ptr33113 = getelementptr inbounds i32*, i32** %add.ptr1, i64 96
Here ..
Here ..
Here ..
Here ..
Here ..
I:   %14 = bitcast i32** %add.ptr33113 to i32*
Last:   %14 = bitcast i32** %add.ptr33113 to i32*
Schedulable: 1
code gen 0
Gains: 12 - 35 = -23
Unprofitable: deleting generated code
Done!
code gen 1
destroying tree
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   %arrayidx48 = getelementptr inbounds i32, i32* %15, i64 %indvars.iv
Here ..
Skipping:   %mul49 = mul nsw i32 %x.0118, %conv23
Skipping:   %add50 = add nsw i32 %mul49, 32768
Skipping:   %shr51 = ashr i32 %add50, 16
Here ..
Skipping:   %18 = mul i32 %x.0118, %conv15
Skipping:   %mul55 = sub i32 0, %18
Here ..
Skipping:   %19 = mul i32 %x.0118, %conv31
Skipping:   %add60 = sub i32 32768, %19
Here ..
Here ..
I:   %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
Last:   %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
Schedulable: 1
code gen 0
Gains: 8 - 24 = -16
Unprofitable: deleting generated code
Done!
code gen 1
destroying tree
calls
stores
calls
Done Loop Roller!
stores
calls
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   %hs = alloca i16, align 2
Skipping:   %vs = alloca i16, align 2
Skipping:   %coeffs = alloca float*, align 8
Here ..
Skipping:   call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %1) #6
destroying tree
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %1) #6
Here ..
Here ..
I:   ret void (%struct._TIFFRGBAImage*, i32*, i32, i32, i32, i32, i32, i32, i8*)* %retval.0
Last:   ret void (%struct._TIFFRGBAImage*, i32*, i32, i32, i32, i32, i32, i32, i8*)* %retval.0
Schedulable: 1
code gen 0
Gains: 6 - 11 = -5
Unprofitable: deleting generated code
Done!
code gen 1
destroying tree
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   %11 = bitcast i16* %hs.i to i8*
Here ..
Here ..
Here ..
I:   %ycbcr.i = getelementptr inbounds %struct._TIFFRGBAImage, %struct._TIFFRGBAImage* %img, i64 0, i32 18
Last:   %ycbcr.i = getelementptr inbounds %struct._TIFFRGBAImage, %struct._TIFFRGBAImage* %img, i64 0, i32 18
Schedulable: 1
code gen 0
Gains: 6 - 17 = -11
Unprofitable: deleting generated code
Done!
code gen 1
destroying tree
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %13) #7
Here ..
Here ..
I:   br label %if.end68
Last:   br label %if.end68
Schedulable: 1
code gen 0
Gains: 6 - 11 = -5
Unprofitable: deleting generated code
Done!
code gen 1
destroying tree
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
destroying tree
calls
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #6
Here ..
Skipping:   %1 = bitcast i16* %extrasamples to i8*
Here ..
Skipping:   %2 = bitcast i16* %planarconfig to i8*
Here ..
Skipping:   %3 = bitcast i16* %compress to i8*
Here ..
Skipping:   %4 = bitcast i16** %red_orig to i8*
Here ..
Skipping:   %5 = bitcast i16** %green_orig to i8*
Here ..
Skipping:   %6 = bitcast i16** %blue_orig to i8*
Here ..
I:   %row_offset = getelementptr inbounds %struct._TIFFRGBAImage, %struct._TIFFRGBAImage* %img, i64 0, i32 19
Last:   %row_offset = getelementptr inbounds %struct._TIFFRGBAImage, %struct._TIFFRGBAImage* %img, i64 0, i32 19
Schedulable: 1
code gen 0
Gains: 21 - 52 = -31
Unprofitable: deleting generated code
Done!
code gen 1
destroying tree
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   %15 = load i16, i16* %bitspersample, align 4, !tbaa !12
Here ..
Here ..
Here ..
Here ..
Here ..
Here ..
Here ..
I:   %19 = load i16*, i16** %redcmap, align 8, !tbaa !18
Last:   %19 = load i16*, i16** %redcmap, align 8, !tbaa !18
Schedulable: 1
code gen 0
Gains: 12 - 34 = -22
Unprofitable: deleting generated code
Done!
code gen 1
destroying tree
calls
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   %18 = load i16, i16* %bitspersample, align 4, !tbaa !12
Here ..
Here ..
Skipping:   %19 = bitcast i16** %redcmap to i8**
Skipping:   store i8* %call49, i8** %19, align 8, !tbaa !18
destroying tree
stores
calls
stores
calls
stores
calls
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   %25 = bitcast i16** %red_orig to i8**
Here ..
Skipping:   %27 = load i8*, i8** %20, align 8, !tbaa !19
destroying tree
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
destroying tree
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
destroying tree
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   %58 = bitcast i16* %hs.i.i to i8*
Here ..
Here ..
Here ..
I:   %60 = load %struct.TIFFYCbCrToRGB*, %struct.TIFFYCbCrToRGB** %ycbcr, align 8, !tbaa !24
Last:   %60 = load %struct.TIFFYCbCrToRGB*, %struct.TIFFYCbCrToRGB** %ycbcr, align 8, !tbaa !24
Schedulable: 1
code gen 0
Gains: 6 - 17 = -11
Unprofitable: deleting generated code
Done!
code gen 1
destroying tree
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %60) #6
Here ..
Here ..
I:   br label %pickTileContigCase.exit
Last:   br label %pickTileContigCase.exit
Schedulable: 1
code gen 0
Gains: 6 - 11 = -5
Unprofitable: deleting generated code
Done!
code gen 1
destroying tree
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10) #6
Here ..
Here ..
Here ..
Here ..
Here ..
Here ..
Here ..
I:   ret i32 %retval.1
Last:   ret i32 %retval.1
Schedulable: 1
code gen 0
Gains: 21 - 52 = -31
Unprofitable: deleting generated code
Done!
code gen 1
destroying tree
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   %tw = alloca i32, align 4
Skipping:   %th = alloca i32, align 4
Skipping:   %tif1 = getelementptr inbounds %struct._TIFFRGBAImage, %struct._TIFFRGBAImage* %img, i64 0, i32 0
Skipping:   %0 = load %struct.tiff*, %struct.tiff** %tif1, align 8, !tbaa !2
destroying tree
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #6
Here ..
Here ..
I:   ret i32 %retval.0
Last:   ret i32 %retval.0
Schedulable: 1
code gen 0
Gains: 6 - 11 = -5
Unprofitable: deleting generated code
Done!
code gen 1
destroying tree
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   %tw = alloca i32, align 4
Skipping:   %th = alloca i32, align 4
Skipping:   %tif1 = getelementptr inbounds %struct._TIFFRGBAImage, %struct._TIFFRGBAImage* %img, i64 0, i32 0
Skipping:   %0 = load %struct.tiff*, %struct.tiff** %tif1, align 8, !tbaa !2
destroying tree
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #6
Here ..
Here ..
I:   ret i32 %retval.0
Last:   ret i32 %retval.0
Schedulable: 1
code gen 0
Gains: 6 - 11 = -5
Unprofitable: deleting generated code
Done!
code gen 1
destroying tree
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %0) #6
Here ..
Skipping:   %1 = bitcast %struct._TIFFRGBAImage* %img to i8*
Here ..
I:   %call = call i32 @TIFFRGBAImageBegin(%struct._TIFFRGBAImage* nonnull %img, %struct.tiff* %tif, i32 %stop, i8* nonnull %0) #7
Last:   %call = call i32 @TIFFRGBAImageBegin(%struct._TIFFRGBAImage* nonnull %img, %struct.tiff* %tif, i32 %stop, i8* nonnull %0) #7
Schedulable: 1
code gen 0
Gains: 6 - 22 = -16
Unprofitable: deleting generated code
Done!
code gen 1
destroying tree
stores
calls
stores
calls
stores
calls
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   call void @llvm.lifetime.end.p0i8(i64 120, i8* nonnull %1) #6
Here ..
Here ..
I:   ret i32 %ok.0
Last:   ret i32 %ok.0
Schedulable: 1
code gen 0
Gains: 6 - 22 = -16
Unprofitable: deleting generated code
Done!
code gen 1
destroying tree
Done Loop Roller!
stores
calls
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %0) #6
Here ..
Skipping:   %1 = bitcast %struct._TIFFRGBAImage* %img to i8*
Here ..
Skipping:   %2 = bitcast i32* %rowsperstrip to i8*
Here ..
I:   %call = tail call i32 @TIFFIsTiled(%struct.tiff* %tif) #7
Last:   %call = tail call i32 @TIFFIsTiled(%struct.tiff* %tif) #7
Schedulable: 1
code gen 0
Gains: 9 - 28 = -19
Unprofitable: deleting generated code
Done!
code gen 1
destroying tree
stores
calls
stores
calls
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
destroying tree
calls
stores
calls
stores
calls
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %2) #6
Here ..
Here ..
Here ..
I:   ret i32 %retval.0
Last:   ret i32 %retval.0
Schedulable: 1
code gen 0
Gains: 9 - 28 = -19
Unprofitable: deleting generated code
Done!
code gen 1
destroying tree
Done Loop Roller!
stores
calls
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %0) #6
Here ..
Skipping:   %1 = bitcast %struct._TIFFRGBAImage* %img to i8*
Here ..
Skipping:   %2 = bitcast i32* %tile_xsize to i8*
Here ..
Skipping:   %3 = bitcast i32* %tile_ysize to i8*
Here ..
I:   %call = tail call i32 @TIFFIsTiled(%struct.tiff* %tif) #7
Last:   %call = tail call i32 @TIFFIsTiled(%struct.tiff* %tif) #7
Schedulable: 1
code gen 0
Gains: 12 - 34 = -22
Unprofitable: deleting generated code
Done!
code gen 1
destroying tree
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
destroying tree
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #6
Here ..
Here ..
Here ..
Here ..
I:   ret i32 %retval.0
Last:   ret i32 %retval.0
Schedulable: 1
code gen 0
Gains: 12 - 34 = -22
Unprofitable: deleting generated code
Done!
code gen 1
destroying tree
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   %1 = load i8, i8* %pp.addr.1378, align 1, !tbaa !9
Here ..
Skipping:   %incdec.ptr = getelementptr inbounds i32, i32* %cp.addr.1379, i64 1
Skipping:   %add.ptr = getelementptr inbounds i8, i8* %pp.addr.1378, i64 %idx.ext
Here ..
Skipping:   %incdec.ptr30 = getelementptr inbounds i32, i32* %cp.addr.1379, i64 2
Skipping:   %add.ptr32 = getelementptr inbounds i8, i8* %add.ptr, i64 %idx.ext
Here ..
Skipping:   %incdec.ptr47 = getelementptr inbounds i32, i32* %cp.addr.1379, i64 3
Skipping:   %add.ptr49 = getelementptr inbounds i8, i8* %add.ptr32, i64 %idx.ext
Here ..
Skipping:   %incdec.ptr64 = getelementptr inbounds i32, i32* %cp.addr.1379, i64 4
Skipping:   %add.ptr66 = getelementptr inbounds i8, i8* %add.ptr49, i64 %idx.ext
Here ..
Skipping:   %incdec.ptr81 = getelementptr inbounds i32, i32* %cp.addr.1379, i64 5
Skipping:   %add.ptr83 = getelementptr inbounds i8, i8* %add.ptr66, i64 %idx.ext
Here ..
Skipping:   %incdec.ptr98 = getelementptr inbounds i32, i32* %cp.addr.1379, i64 6
Skipping:   %add.ptr100 = getelementptr inbounds i8, i8* %add.ptr83, i64 %idx.ext
Here ..
Skipping:   %incdec.ptr115 = getelementptr inbounds i32, i32* %cp.addr.1379, i64 7
Skipping:   %add.ptr117 = getelementptr inbounds i8, i8* %add.ptr100, i64 %idx.ext
Here ..
Skipping:   %incdec.ptr132 = getelementptr inbounds i32, i32* %cp.addr.1379, i64 8
Here ..
I:   %add.ptr134 = getelementptr inbounds i8, i8* %add.ptr117, i64 %idx.ext
Last:   %add.ptr134 = getelementptr inbounds i8, i8* %add.ptr117, i64 %idx.ext
Schedulable: 1
code gen 0
Gains: 119 - 36 = 83
Profitable: finishing code generation
; Function Attrs: nofree norecurse nounwind optsize uwtable
define internal void @putRGBAAcontig8bittile(%struct._TIFFRGBAImage* nocapture readonly %img, i32* nocapture %cp, i32 %x, i32 %y, i32 %w, i32 %h, i32 %fromskew, i32 %toskew, i8* nocapture readonly %pp) #5 {
entry:
  %samplesperpixel1 = getelementptr inbounds %struct._TIFFRGBAImage, %struct._TIFFRGBAImage* %img, i64 0, i32 7
  %0 = load i16, i16* %samplesperpixel1, align 2, !tbaa !32
  %cmp.not384 = icmp eq i32 %h, 0
  br i1 %cmp.not384, label %while.end, label %for.cond.preheader.lr.ph

for.cond.preheader.lr.ph:                         ; preds = %entry
  %conv = zext i16 %0 to i32
  %mul = mul nsw i32 %conv, %fromskew
  %cmp3377 = icmp ugt i32 %w, 7
  %idx.ext = zext i16 %0 to i64
  %idx.ext262 = sext i32 %toskew to i64
  %idx.ext264 = sext i32 %mul to i64
  br label %for.cond.preheader

for.cond.preheader:                               ; preds = %for.cond.preheader.lr.ph, %if.end
  %dec387.in = phi i32 [ %h, %for.cond.preheader.lr.ph ], [ %dec387, %if.end ]
  %cp.addr.0386 = phi i32* [ %cp, %for.cond.preheader.lr.ph ], [ %add.ptr263, %if.end ]
  %pp.addr.0385 = phi i8* [ %pp, %for.cond.preheader.lr.ph ], [ %add.ptr265, %if.end ]
  %dec387 = add i32 %dec387.in, -1
  br i1 %cmp3377, label %for.body.preheader, label %for.end

for.body.preheader:                               ; preds = %for.cond.preheader
  br label %for.body

for.body:                                         ; preds = %for.body.preheader, %for.body
  %_x.0380 = phi i32 [ %sub, %for.body ], [ %w, %for.body.preheader ]
  %cp.addr.1379 = phi i32* [ %incdec.ptr132, %for.body ], [ %cp.addr.0386, %for.body.preheader ]
  %pp.addr.1378 = phi i8* [ %add.ptr134, %for.body ], [ %pp.addr.0385, %for.body.preheader ]
  %1 = load i8, i8* %pp.addr.1378, align 1, !tbaa !36
  %conv5 = zext i8 %1 to i32
  %arrayidx6 = getelementptr inbounds i8, i8* %pp.addr.1378, i64 1
  %2 = load i8, i8* %arrayidx6, align 1, !tbaa !36
  %conv7 = zext i8 %2 to i32
  %shl = shl nuw nsw i32 %conv7, 8
  %or = or i32 %shl, %conv5
  %arrayidx8 = getelementptr inbounds i8, i8* %pp.addr.1378, i64 2
  %3 = load i8, i8* %arrayidx8, align 1, !tbaa !36
  %conv9 = zext i8 %3 to i32
  %shl10 = shl nuw nsw i32 %conv9, 16
  %or11 = or i32 %or, %shl10
  %arrayidx12 = getelementptr inbounds i8, i8* %pp.addr.1378, i64 3
  %4 = load i8, i8* %arrayidx12, align 1, !tbaa !36
  %conv13 = zext i8 %4 to i32
  %shl14 = shl nuw i32 %conv13, 24
  %or15 = or i32 %or11, %shl14
  %incdec.ptr = getelementptr inbounds i32, i32* %cp.addr.1379, i64 1
  store i32 %or15, i32* %cp.addr.1379, align 4, !tbaa !38
  %add.ptr = getelementptr inbounds i8, i8* %pp.addr.1378, i64 %idx.ext
  %5 = load i8, i8* %add.ptr, align 1, !tbaa !36
  %conv17 = zext i8 %5 to i32
  %arrayidx18 = getelementptr inbounds i8, i8* %add.ptr, i64 1
  %6 = load i8, i8* %arrayidx18, align 1, !tbaa !36
  %conv19 = zext i8 %6 to i32
  %shl20 = shl nuw nsw i32 %conv19, 8
  %or21 = or i32 %shl20, %conv17
  %arrayidx22 = getelementptr inbounds i8, i8* %add.ptr, i64 2
  %7 = load i8, i8* %arrayidx22, align 1, !tbaa !36
  %conv23 = zext i8 %7 to i32
  %shl24 = shl nuw nsw i32 %conv23, 16
  %or25 = or i32 %or21, %shl24
  %arrayidx26 = getelementptr inbounds i8, i8* %add.ptr, i64 3
  %8 = load i8, i8* %arrayidx26, align 1, !tbaa !36
  %conv27 = zext i8 %8 to i32
  %shl28 = shl nuw i32 %conv27, 24
  %or29 = or i32 %or25, %shl28
  %incdec.ptr30 = getelementptr inbounds i32, i32* %cp.addr.1379, i64 2
  store i32 %or29, i32* %incdec.ptr, align 4, !tbaa !38
  %add.ptr32 = getelementptr inbounds i8, i8* %add.ptr, i64 %idx.ext
  %9 = load i8, i8* %add.ptr32, align 1, !tbaa !36
  %conv34 = zext i8 %9 to i32
  %arrayidx35 = getelementptr inbounds i8, i8* %add.ptr32, i64 1
  %10 = load i8, i8* %arrayidx35, align 1, !tbaa !36
  %conv36 = zext i8 %10 to i32
  %shl37 = shl nuw nsw i32 %conv36, 8
  %or38 = or i32 %shl37, %conv34
  %arrayidx39 = getelementptr inbounds i8, i8* %add.ptr32, i64 2
  %11 = load i8, i8* %arrayidx39, align 1, !tbaa !36
  %conv40 = zext i8 %11 to i32
  %shl41 = shl nuw nsw i32 %conv40, 16
  %or42 = or i32 %or38, %shl41
  %arrayidx43 = getelementptr inbounds i8, i8* %add.ptr32, i64 3
  %12 = load i8, i8* %arrayidx43, align 1, !tbaa !36
  %conv44 = zext i8 %12 to i32
  %shl45 = shl nuw i32 %conv44, 24
  %or46 = or i32 %or42, %shl45
  %incdec.ptr47 = getelementptr inbounds i32, i32* %cp.addr.1379, i64 3
  store i32 %or46, i32* %incdec.ptr30, align 4, !tbaa !38
  %add.ptr49 = getelementptr inbounds i8, i8* %add.ptr32, i64 %idx.ext
  %13 = load i8, i8* %add.ptr49, align 1, !tbaa !36
  %conv51 = zext i8 %13 to i32
  %arrayidx52 = getelementptr inbounds i8, i8* %add.ptr49, i64 1
  %14 = load i8, i8* %arrayidx52, align 1, !tbaa !36
  %conv53 = zext i8 %14 to i32
  %shl54 = shl nuw nsw i32 %conv53, 8
  %or55 = or i32 %shl54, %conv51
  %arrayidx56 = getelementptr inbounds i8, i8* %add.ptr49, i64 2
  %15 = load i8, i8* %arrayidx56, align 1, !tbaa !36
  %conv57 = zext i8 %15 to i32
  %shl58 = shl nuw nsw i32 %conv57, 16
  %or59 = or i32 %or55, %shl58
  %arrayidx60 = getelementptr inbounds i8, i8* %add.ptr49, i64 3
  %16 = load i8, i8* %arrayidx60, align 1, !tbaa !36
  %conv61 = zext i8 %16 to i32
  %shl62 = shl nuw i32 %conv61, 24
  %or63 = or i32 %or59, %shl62
  %incdec.ptr64 = getelementptr inbounds i32, i32* %cp.addr.1379, i64 4
  store i32 %or63, i32* %incdec.ptr47, align 4, !tbaa !38
  %add.ptr66 = getelementptr inbounds i8, i8* %add.ptr49, i64 %idx.ext
  %17 = load i8, i8* %add.ptr66, align 1, !tbaa !36
  %conv68 = zext i8 %17 to i32
  %arrayidx69 = getelementptr inbounds i8, i8* %add.ptr66, i64 1
  %18 = load i8, i8* %arrayidx69, align 1, !tbaa !36
  %conv70 = zext i8 %18 to i32
  %shl71 = shl nuw nsw i32 %conv70, 8
  %or72 = or i32 %shl71, %conv68
  %arrayidx73 = getelementptr inbounds i8, i8* %add.ptr66, i64 2
  %19 = load i8, i8* %arrayidx73, align 1, !tbaa !36
  %conv74 = zext i8 %19 to i32
  %shl75 = shl nuw nsw i32 %conv74, 16
  %or76 = or i32 %or72, %shl75
  %arrayidx77 = getelementptr inbounds i8, i8* %add.ptr66, i64 3
  %20 = load i8, i8* %arrayidx77, align 1, !tbaa !36
  %conv78 = zext i8 %20 to i32
  %shl79 = shl nuw i32 %conv78, 24
  %or80 = or i32 %or76, %shl79
  %incdec.ptr81 = getelementptr inbounds i32, i32* %cp.addr.1379, i64 5
  store i32 %or80, i32* %incdec.ptr64, align 4, !tbaa !38
  %add.ptr83 = getelementptr inbounds i8, i8* %add.ptr66, i64 %idx.ext
  %21 = load i8, i8* %add.ptr83, align 1, !tbaa !36
  %conv85 = zext i8 %21 to i32
  %arrayidx86 = getelementptr inbounds i8, i8* %add.ptr83, i64 1
  %22 = load i8, i8* %arrayidx86, align 1, !tbaa !36
  %conv87 = zext i8 %22 to i32
  %shl88 = shl nuw nsw i32 %conv87, 8
  %or89 = or i32 %shl88, %conv85
  %arrayidx90 = getelementptr inbounds i8, i8* %add.ptr83, i64 2
  %23 = load i8, i8* %arrayidx90, align 1, !tbaa !36
  %conv91 = zext i8 %23 to i32
  %shl92 = shl nuw nsw i32 %conv91, 16
  %or93 = or i32 %or89, %shl92
  %arrayidx94 = getelementptr inbounds i8, i8* %add.ptr83, i64 3
  %24 = load i8, i8* %arrayidx94, align 1, !tbaa !36
  %conv95 = zext i8 %24 to i32
  %shl96 = shl nuw i32 %conv95, 24
  %or97 = or i32 %or93, %shl96
  %incdec.ptr98 = getelementptr inbounds i32, i32* %cp.addr.1379, i64 6
  store i32 %or97, i32* %incdec.ptr81, align 4, !tbaa !38
  %add.ptr100 = getelementptr inbounds i8, i8* %add.ptr83, i64 %idx.ext
  %25 = load i8, i8* %add.ptr100, align 1, !tbaa !36
  %conv102 = zext i8 %25 to i32
  %arrayidx103 = getelementptr inbounds i8, i8* %add.ptr100, i64 1
  %26 = load i8, i8* %arrayidx103, align 1, !tbaa !36
  %conv104 = zext i8 %26 to i32
  %shl105 = shl nuw nsw i32 %conv104, 8
  %or106 = or i32 %shl105, %conv102
  %arrayidx107 = getelementptr inbounds i8, i8* %add.ptr100, i64 2
  %27 = load i8, i8* %arrayidx107, align 1, !tbaa !36
  %conv108 = zext i8 %27 to i32
  %shl109 = shl nuw nsw i32 %conv108, 16
  %or110 = or i32 %or106, %shl109
  %arrayidx111 = getelementptr inbounds i8, i8* %add.ptr100, i64 3
  %28 = load i8, i8* %arrayidx111, align 1, !tbaa !36
  %conv112 = zext i8 %28 to i32
  %shl113 = shl nuw i32 %conv112, 24
  %or114 = or i32 %or110, %shl113
  %incdec.ptr115 = getelementptr inbounds i32, i32* %cp.addr.1379, i64 7
  store i32 %or114, i32* %incdec.ptr98, align 4, !tbaa !38
  %add.ptr117 = getelementptr inbounds i8, i8* %add.ptr100, i64 %idx.ext
  %29 = load i8, i8* %add.ptr117, align 1, !tbaa !36
  %conv119 = zext i8 %29 to i32
  %arrayidx120 = getelementptr inbounds i8, i8* %add.ptr117, i64 1
  %30 = load i8, i8* %arrayidx120, align 1, !tbaa !36
  %conv121 = zext i8 %30 to i32
  %shl122 = shl nuw nsw i32 %conv121, 8
  %or123 = or i32 %shl122, %conv119
  %arrayidx124 = getelementptr inbounds i8, i8* %add.ptr117, i64 2
  %31 = load i8, i8* %arrayidx124, align 1, !tbaa !36
  %conv125 = zext i8 %31 to i32
  %shl126 = shl nuw nsw i32 %conv125, 16
  %or127 = or i32 %or123, %shl126
  %arrayidx128 = getelementptr inbounds i8, i8* %add.ptr117, i64 3
  %32 = load i8, i8* %arrayidx128, align 1, !tbaa !36
  %conv129 = zext i8 %32 to i32
  %shl130 = shl nuw i32 %conv129, 24
  %or131 = or i32 %or127, %shl130
  %incdec.ptr132 = getelementptr inbounds i32, i32* %cp.addr.1379, i64 8
  store i32 %or131, i32* %incdec.ptr115, align 4, !tbaa !38
  %add.ptr134 = getelementptr inbounds i8, i8* %add.ptr117, i64 %idx.ext
  %sub = add i32 %_x.0380, -8
  %cmp3 = icmp ugt i32 %sub, 7
  br i1 %cmp3, label %for.body, label %for.end.loopexit, !llvm.loop !54

for.end.loopexit:                                 ; preds = %for.body
  %incdec.ptr132.lcssa = phi i32* [ %incdec.ptr132, %for.body ]
  %add.ptr134.lcssa = phi i8* [ %add.ptr134, %for.body ]
  %sub.lcssa = phi i32 [ %sub, %for.body ]
  br label %for.end

for.end:                                          ; preds = %for.end.loopexit, %for.cond.preheader
  %pp.addr.1.lcssa = phi i8* [ %pp.addr.0385, %for.cond.preheader ], [ %add.ptr134.lcssa, %for.end.loopexit ]
  %cp.addr.1.lcssa = phi i32* [ %cp.addr.0386, %for.cond.preheader ], [ %incdec.ptr132.lcssa, %for.end.loopexit ]
  %_x.0.lcssa = phi i32 [ %w, %for.cond.preheader ], [ %sub.lcssa, %for.end.loopexit ]
  switch i32 %_x.0.lcssa, label %if.end [
    i32 1, label %sw.bb244
    i32 7, label %sw.bb
    i32 6, label %sw.bb154
    i32 5, label %sw.bb172
    i32 4, label %sw.bb190
    i32 3, label %sw.bb208
    i32 2, label %sw.bb226
  ]

sw.bb:                                            ; preds = %for.end
  %33 = load i8, i8* %pp.addr.1.lcssa, align 1, !tbaa !36
  %conv138 = zext i8 %33 to i32
  %arrayidx139 = getelementptr inbounds i8, i8* %pp.addr.1.lcssa, i64 1
  %34 = load i8, i8* %arrayidx139, align 1, !tbaa !36
  %conv140 = zext i8 %34 to i32
  %shl141 = shl nuw nsw i32 %conv140, 8
  %or142 = or i32 %shl141, %conv138
  %arrayidx143 = getelementptr inbounds i8, i8* %pp.addr.1.lcssa, i64 2
  %35 = load i8, i8* %arrayidx143, align 1, !tbaa !36
  %conv144 = zext i8 %35 to i32
  %shl145 = shl nuw nsw i32 %conv144, 16
  %or146 = or i32 %or142, %shl145
  %arrayidx147 = getelementptr inbounds i8, i8* %pp.addr.1.lcssa, i64 3
  %36 = load i8, i8* %arrayidx147, align 1, !tbaa !36
  %conv148 = zext i8 %36 to i32
  %shl149 = shl nuw i32 %conv148, 24
  %or150 = or i32 %or146, %shl149
  %incdec.ptr151 = getelementptr inbounds i32, i32* %cp.addr.1.lcssa, i64 1
  store i32 %or150, i32* %cp.addr.1.lcssa, align 4, !tbaa !38
  %add.ptr153 = getelementptr inbounds i8, i8* %pp.addr.1.lcssa, i64 %idx.ext
  br label %sw.bb154

sw.bb154:                                         ; preds = %for.end, %sw.bb
  %pp.addr.2 = phi i8* [ %add.ptr153, %sw.bb ], [ %pp.addr.1.lcssa, %for.end ]
  %cp.addr.2 = phi i32* [ %incdec.ptr151, %sw.bb ], [ %cp.addr.1.lcssa, %for.end ]
  %37 = load i8, i8* %pp.addr.2, align 1, !tbaa !36
  %conv156 = zext i8 %37 to i32
  %arrayidx157 = getelementptr inbounds i8, i8* %pp.addr.2, i64 1
  %38 = load i8, i8* %arrayidx157, align 1, !tbaa !36
  %conv158 = zext i8 %38 to i32
  %shl159 = shl nuw nsw i32 %conv158, 8
  %or160 = or i32 %shl159, %conv156
  %arrayidx161 = getelementptr inbounds i8, i8* %pp.addr.2, i64 2
  %39 = load i8, i8* %arrayidx161, align 1, !tbaa !36
  %conv162 = zext i8 %39 to i32
  %shl163 = shl nuw nsw i32 %conv162, 16
  %or164 = or i32 %or160, %shl163
  %arrayidx165 = getelementptr inbounds i8, i8* %pp.addr.2, i64 3
  %40 = load i8, i8* %arrayidx165, align 1, !tbaa !36
  %conv166 = zext i8 %40 to i32
  %shl167 = shl nuw i32 %conv166, 24
  %or168 = or i32 %or164, %shl167
  %incdec.ptr169 = getelementptr inbounds i32, i32* %cp.addr.2, i64 1
  store i32 %or168, i32* %cp.addr.2, align 4, !tbaa !38
  %add.ptr171 = getelementptr inbounds i8, i8* %pp.addr.2, i64 %idx.ext
  br label %sw.bb172

sw.bb172:                                         ; preds = %for.end, %sw.bb154
  %pp.addr.3 = phi i8* [ %add.ptr171, %sw.bb154 ], [ %pp.addr.1.lcssa, %for.end ]
  %cp.addr.3 = phi i32* [ %incdec.ptr169, %sw.bb154 ], [ %cp.addr.1.lcssa, %for.end ]
  %41 = load i8, i8* %pp.addr.3, align 1, !tbaa !36
  %conv174 = zext i8 %41 to i32
  %arrayidx175 = getelementptr inbounds i8, i8* %pp.addr.3, i64 1
  %42 = load i8, i8* %arrayidx175, align 1, !tbaa !36
  %conv176 = zext i8 %42 to i32
  %shl177 = shl nuw nsw i32 %conv176, 8
  %or178 = or i32 %shl177, %conv174
  %arrayidx179 = getelementptr inbounds i8, i8* %pp.addr.3, i64 2
  %43 = load i8, i8* %arrayidx179, align 1, !tbaa !36
  %conv180 = zext i8 %43 to i32
  %shl181 = shl nuw nsw i32 %conv180, 16
  %or182 = or i32 %or178, %shl181
  %arrayidx183 = getelementptr inbounds i8, i8* %pp.addr.3, i64 3
  %44 = load i8, i8* %arrayidx183, align 1, !tbaa !36
  %conv184 = zext i8 %44 to i32
  %shl185 = shl nuw i32 %conv184, 24
  %or186 = or i32 %or182, %shl185
  %incdec.ptr187 = getelementptr inbounds i32, i32* %cp.addr.3, i64 1
  store i32 %or186, i32* %cp.addr.3, align 4, !tbaa !38
  %add.ptr189 = getelementptr inbounds i8, i8* %pp.addr.3, i64 %idx.ext
  br label %sw.bb190

sw.bb190:                                         ; preds = %for.end, %sw.bb172
  %pp.addr.4 = phi i8* [ %add.ptr189, %sw.bb172 ], [ %pp.addr.1.lcssa, %for.end ]
  %cp.addr.4 = phi i32* [ %incdec.ptr187, %sw.bb172 ], [ %cp.addr.1.lcssa, %for.end ]
  %45 = load i8, i8* %pp.addr.4, align 1, !tbaa !36
  %conv192 = zext i8 %45 to i32
  %arrayidx193 = getelementptr inbounds i8, i8* %pp.addr.4, i64 1
  %46 = load i8, i8* %arrayidx193, align 1, !tbaa !36
  %conv194 = zext i8 %46 to i32
  %shl195 = shl nuw nsw i32 %conv194, 8
  %or196 = or i32 %shl195, %conv192
  %arrayidx197 = getelementptr inbounds i8, i8* %pp.addr.4, i64 2
  %47 = load i8, i8* %arrayidx197, align 1, !tbaa !36
  %conv198 = zext i8 %47 to i32
  %shl199 = shl nuw nsw i32 %conv198, 16
  %or200 = or i32 %or196, %shl199
  %arrayidx201 = getelementptr inbounds i8, i8* %pp.addr.4, i64 3
  %48 = load i8, i8* %arrayidx201, align 1, !tbaa !36
  %conv202 = zext i8 %48 to i32
  %shl203 = shl nuw i32 %conv202, 24
  %or204 = or i32 %or200, %shl203
  %incdec.ptr205 = getelementptr inbounds i32, i32* %cp.addr.4, i64 1
  store i32 %or204, i32* %cp.addr.4, align 4, !tbaa !38
  %add.ptr207 = getelementptr inbounds i8, i8* %pp.addr.4, i64 %idx.ext
  br label %sw.bb208

sw.bb208:                                         ; preds = %for.end, %sw.bb190
  %pp.addr.5 = phi i8* [ %add.ptr207, %sw.bb190 ], [ %pp.addr.1.lcssa, %for.end ]
  %cp.addr.5 = phi i32* [ %incdec.ptr205, %sw.bb190 ], [ %cp.addr.1.lcssa, %for.end ]
  %49 = load i8, i8* %pp.addr.5, align 1, !tbaa !36
  %conv210 = zext i8 %49 to i32
  %arrayidx211 = getelementptr inbounds i8, i8* %pp.addr.5, i64 1
  %50 = load i8, i8* %arrayidx211, align 1, !tbaa !36
  %conv212 = zext i8 %50 to i32
  %shl213 = shl nuw nsw i32 %conv212, 8
  %or214 = or i32 %shl213, %conv210
  %arrayidx215 = getelementptr inbounds i8, i8* %pp.addr.5, i64 2
  %51 = load i8, i8* %arrayidx215, align 1, !tbaa !36
  %conv216 = zext i8 %51 to i32
  %shl217 = shl nuw nsw i32 %conv216, 16
  %or218 = or i32 %or214, %shl217
  %arrayidx219 = getelementptr inbounds i8, i8* %pp.addr.5, i64 3
  %52 = load i8, i8* %arrayidx219, align 1, !tbaa !36
  %conv220 = zext i8 %52 to i32
  %shl221 = shl nuw i32 %conv220, 24
  %or222 = or i32 %or218, %shl221
  %incdec.ptr223 = getelementptr inbounds i32, i32* %cp.addr.5, i64 1
  store i32 %or222, i32* %cp.addr.5, align 4, !tbaa !38
  %add.ptr225 = getelementptr inbounds i8, i8* %pp.addr.5, i64 %idx.ext
  br label %sw.bb226

sw.bb226:                                         ; preds = %for.end, %sw.bb208
  %pp.addr.6 = phi i8* [ %add.ptr225, %sw.bb208 ], [ %pp.addr.1.lcssa, %for.end ]
  %cp.addr.6 = phi i32* [ %incdec.ptr223, %sw.bb208 ], [ %cp.addr.1.lcssa, %for.end ]
  %53 = load i8, i8* %pp.addr.6, align 1, !tbaa !36
  %conv228 = zext i8 %53 to i32
  %arrayidx229 = getelementptr inbounds i8, i8* %pp.addr.6, i64 1
  %54 = load i8, i8* %arrayidx229, align 1, !tbaa !36
  %conv230 = zext i8 %54 to i32
  %shl231 = shl nuw nsw i32 %conv230, 8
  %or232 = or i32 %shl231, %conv228
  %arrayidx233 = getelementptr inbounds i8, i8* %pp.addr.6, i64 2
  %55 = load i8, i8* %arrayidx233, align 1, !tbaa !36
  %conv234 = zext i8 %55 to i32
  %shl235 = shl nuw nsw i32 %conv234, 16
  %or236 = or i32 %or232, %shl235
  %arrayidx237 = getelementptr inbounds i8, i8* %pp.addr.6, i64 3
  %56 = load i8, i8* %arrayidx237, align 1, !tbaa !36
  %conv238 = zext i8 %56 to i32
  %shl239 = shl nuw i32 %conv238, 24
  %or240 = or i32 %or236, %shl239
  %incdec.ptr241 = getelementptr inbounds i32, i32* %cp.addr.6, i64 1
  store i32 %or240, i32* %cp.addr.6, align 4, !tbaa !38
  %add.ptr243 = getelementptr inbounds i8, i8* %pp.addr.6, i64 %idx.ext
  br label %sw.bb244

sw.bb244:                                         ; preds = %for.end, %sw.bb226
  %pp.addr.7 = phi i8* [ %add.ptr243, %sw.bb226 ], [ %pp.addr.1.lcssa, %for.end ]
  %cp.addr.7 = phi i32* [ %incdec.ptr241, %sw.bb226 ], [ %cp.addr.1.lcssa, %for.end ]
  %57 = load i8, i8* %pp.addr.7, align 1, !tbaa !36
  %conv246 = zext i8 %57 to i32
  %arrayidx247 = getelementptr inbounds i8, i8* %pp.addr.7, i64 1
  %58 = load i8, i8* %arrayidx247, align 1, !tbaa !36
  %conv248 = zext i8 %58 to i32
  %shl249 = shl nuw nsw i32 %conv248, 8
  %or250 = or i32 %shl249, %conv246
  %arrayidx251 = getelementptr inbounds i8, i8* %pp.addr.7, i64 2
  %59 = load i8, i8* %arrayidx251, align 1, !tbaa !36
  %conv252 = zext i8 %59 to i32
  %shl253 = shl nuw nsw i32 %conv252, 16
  %or254 = or i32 %or250, %shl253
  %arrayidx255 = getelementptr inbounds i8, i8* %pp.addr.7, i64 3
  %60 = load i8, i8* %arrayidx255, align 1, !tbaa !36
  %conv256 = zext i8 %60 to i32
  %shl257 = shl nuw i32 %conv256, 24
  %or258 = or i32 %or254, %shl257
  %incdec.ptr259 = getelementptr inbounds i32, i32* %cp.addr.7, i64 1
  store i32 %or258, i32* %cp.addr.7, align 4, !tbaa !38
  %add.ptr261 = getelementptr inbounds i8, i8* %pp.addr.7, i64 %idx.ext
  br label %if.end

if.end:                                           ; preds = %for.end, %sw.bb244
  %pp.addr.8 = phi i8* [ %add.ptr261, %sw.bb244 ], [ %pp.addr.1.lcssa, %for.end ]
  %cp.addr.8 = phi i32* [ %incdec.ptr259, %sw.bb244 ], [ %cp.addr.1.lcssa, %for.end ]
  %add.ptr263 = getelementptr inbounds i32, i32* %cp.addr.8, i64 %idx.ext262
  %add.ptr265 = getelementptr inbounds i8, i8* %pp.addr.8, i64 %idx.ext264
  %cmp.not = icmp eq i32 %dec387, 0
  br i1 %cmp.not, label %while.end.loopexit, label %for.cond.preheader, !llvm.loop !55

while.end.loopexit:                               ; preds = %if.end
  br label %while.end

while.end:                                        ; preds = %while.end.loopexit, %entry
  ret void

rolled.pre:                                       ; No predecessors!
  %61 = alloca i8*, i8 8, align 8
  %62 = getelementptr i8*, i8** %61, i8 0
  store i8* %pp.addr.1378, i8** %62, align 8
  %63 = getelementptr i8*, i8** %61, i8 1
  store i8* %add.ptr, i8** %63, align 8
  %64 = getelementptr i8*, i8** %61, i8 2
  store i8* %add.ptr32, i8** %64, align 8
  %65 = getelementptr i8*, i8** %61, i8 3
  store i8* %add.ptr49, i8** %65, align 8
  %66 = getelementptr i8*, i8** %61, i8 4
  store i8* %add.ptr66, i8** %66, align 8
  %67 = getelementptr i8*, i8** %61, i8 5
  store i8* %add.ptr83, i8** %67, align 8
  %68 = getelementptr i8*, i8** %61, i8 6
  store i8* %add.ptr100, i8** %68, align 8
  %69 = getelementptr i8*, i8** %61, i8 7
  store i8* %add.ptr117, i8** %69, align 8

rolled.loop:                                      ; No predecessors!
  %70 = phi i8 
  %71 = getelementptr i8*, i8** %61, i8 %70
  %72 = load i8*, i8** %71, align 8
  %73 = getelementptr inbounds i8, i8* %72, i64 1
  %74 = load i8, i8* %73, align 1
  %75 = zext i8 %74 to i32
  %76 = shl nuw nsw i32 %75, 8
  %77 = load i8, i8* %72, align 1
  %78 = zext i8 %77 to i32
  %79 = or i32 %76, %78
  %80 = getelementptr inbounds i8, i8* %72, i64 2
  %81 = load i8, i8* %80, align 1
  %82 = zext i8 %81 to i32
  %83 = shl nuw nsw i32 %82, 16
  %84 = or i32 %79, %83
  %85 = getelementptr inbounds i8, i8* %72, i64 3
  %86 = load i8, i8* %85, align 1
  %87 = zext i8 %86 to i32
  %88 = shl nuw i32 %87, 24
  %89 = or i32 %84, %88
  %90 = zext i8 %70 to i64
  %91 = add i64 %90, 1
  %92 = getelementptr i32, i32* %cp.addr.1379, i64 %91
  store i32 %89, i32* %92, align 4
  %93 = add i8 %70, 1
  %94 = icmp ne i8 %93, 8

rolled.exit:                                      ; No predecessors!
}

Done!
; Function Attrs: nofree norecurse nounwind optsize uwtable
define internal void @putRGBAAcontig8bittile(%struct._TIFFRGBAImage* nocapture readonly %img, i32* nocapture %cp, i32 %x, i32 %y, i32 %w, i32 %h, i32 %fromskew, i32 %toskew, i8* nocapture readonly %pp) #5 {
entry:
  %samplesperpixel1 = getelementptr inbounds %struct._TIFFRGBAImage, %struct._TIFFRGBAImage* %img, i64 0, i32 7
  %0 = load i16, i16* %samplesperpixel1, align 2, !tbaa !32
  %cmp.not384 = icmp eq i32 %h, 0
  br i1 %cmp.not384, label %while.end, label %for.cond.preheader.lr.ph

for.cond.preheader.lr.ph:                         ; preds = %entry
  %conv = zext i16 %0 to i32
  %mul = mul nsw i32 %conv, %fromskew
  %cmp3377 = icmp ugt i32 %w, 7
  %idx.ext = zext i16 %0 to i64
  %idx.ext262 = sext i32 %toskew to i64
  %idx.ext264 = sext i32 %mul to i64
  br label %for.cond.preheader

for.cond.preheader:                               ; preds = %for.cond.preheader.lr.ph, %if.end
  %dec387.in = phi i32 [ %h, %for.cond.preheader.lr.ph ], [ %dec387, %if.end ]
  %cp.addr.0386 = phi i32* [ %cp, %for.cond.preheader.lr.ph ], [ %add.ptr263, %if.end ]
  %pp.addr.0385 = phi i8* [ %pp, %for.cond.preheader.lr.ph ], [ %add.ptr265, %if.end ]
  %dec387 = add i32 %dec387.in, -1
  br i1 %cmp3377, label %for.body.preheader, label %for.end

for.body.preheader:                               ; preds = %for.cond.preheader
  br label %for.body

for.body:                                         ; preds = %for.body.preheader, %rolled.exit
  %_x.0380 = phi i32 [ %64, %rolled.exit ], [ %w, %for.body.preheader ]
  %cp.addr.1379 = phi i32* [ %incdec.ptr132, %rolled.exit ], [ %cp.addr.0386, %for.body.preheader ]
  %pp.addr.1378 = phi i8* [ %63, %rolled.exit ], [ %pp.addr.0385, %for.body.preheader ]
  %add.ptr = getelementptr inbounds i8, i8* %pp.addr.1378, i64 %idx.ext
  %add.ptr32 = getelementptr inbounds i8, i8* %add.ptr, i64 %idx.ext
  %add.ptr49 = getelementptr inbounds i8, i8* %add.ptr32, i64 %idx.ext
  %add.ptr66 = getelementptr inbounds i8, i8* %add.ptr49, i64 %idx.ext
  %add.ptr83 = getelementptr inbounds i8, i8* %add.ptr66, i64 %idx.ext
  %add.ptr100 = getelementptr inbounds i8, i8* %add.ptr83, i64 %idx.ext
  %add.ptr117 = getelementptr inbounds i8, i8* %add.ptr100, i64 %idx.ext
  %incdec.ptr132 = getelementptr inbounds i32, i32* %cp.addr.1379, i64 8
  br label %rolled.pre

for.end.loopexit:                                 ; preds = %rolled.exit
  %incdec.ptr132.lcssa = phi i32* [ %incdec.ptr132, %rolled.exit ]
  %add.ptr134.lcssa = phi i8* [ %63, %rolled.exit ]
  %sub.lcssa = phi i32 [ %64, %rolled.exit ]
  br label %for.end

for.end:                                          ; preds = %for.end.loopexit, %for.cond.preheader
  %pp.addr.1.lcssa = phi i8* [ %pp.addr.0385, %for.cond.preheader ], [ %add.ptr134.lcssa, %for.end.loopexit ]
  %cp.addr.1.lcssa = phi i32* [ %cp.addr.0386, %for.cond.preheader ], [ %incdec.ptr132.lcssa, %for.end.loopexit ]
  %_x.0.lcssa = phi i32 [ %w, %for.cond.preheader ], [ %sub.lcssa, %for.end.loopexit ]
  switch i32 %_x.0.lcssa, label %if.end [
    i32 1, label %sw.bb244
    i32 7, label %sw.bb
    i32 6, label %sw.bb154
    i32 5, label %sw.bb172
    i32 4, label %sw.bb190
    i32 3, label %sw.bb208
    i32 2, label %sw.bb226
  ]

sw.bb:                                            ; preds = %for.end
  %1 = load i8, i8* %pp.addr.1.lcssa, align 1, !tbaa !36
  %conv138 = zext i8 %1 to i32
  %arrayidx139 = getelementptr inbounds i8, i8* %pp.addr.1.lcssa, i64 1
  %2 = load i8, i8* %arrayidx139, align 1, !tbaa !36
  %conv140 = zext i8 %2 to i32
  %shl141 = shl nuw nsw i32 %conv140, 8
  %or142 = or i32 %shl141, %conv138
  %arrayidx143 = getelementptr inbounds i8, i8* %pp.addr.1.lcssa, i64 2
  %3 = load i8, i8* %arrayidx143, align 1, !tbaa !36
  %conv144 = zext i8 %3 to i32
  %shl145 = shl nuw nsw i32 %conv144, 16
  %or146 = or i32 %or142, %shl145
  %arrayidx147 = getelementptr inbounds i8, i8* %pp.addr.1.lcssa, i64 3
  %4 = load i8, i8* %arrayidx147, align 1, !tbaa !36
  %conv148 = zext i8 %4 to i32
  %shl149 = shl nuw i32 %conv148, 24
  %or150 = or i32 %or146, %shl149
  %incdec.ptr151 = getelementptr inbounds i32, i32* %cp.addr.1.lcssa, i64 1
  store i32 %or150, i32* %cp.addr.1.lcssa, align 4, !tbaa !38
  %add.ptr153 = getelementptr inbounds i8, i8* %pp.addr.1.lcssa, i64 %idx.ext
  br label %sw.bb154

sw.bb154:                                         ; preds = %for.end, %sw.bb
  %pp.addr.2 = phi i8* [ %add.ptr153, %sw.bb ], [ %pp.addr.1.lcssa, %for.end ]
  %cp.addr.2 = phi i32* [ %incdec.ptr151, %sw.bb ], [ %cp.addr.1.lcssa, %for.end ]
  %5 = load i8, i8* %pp.addr.2, align 1, !tbaa !36
  %conv156 = zext i8 %5 to i32
  %arrayidx157 = getelementptr inbounds i8, i8* %pp.addr.2, i64 1
  %6 = load i8, i8* %arrayidx157, align 1, !tbaa !36
  %conv158 = zext i8 %6 to i32
  %shl159 = shl nuw nsw i32 %conv158, 8
  %or160 = or i32 %shl159, %conv156
  %arrayidx161 = getelementptr inbounds i8, i8* %pp.addr.2, i64 2
  %7 = load i8, i8* %arrayidx161, align 1, !tbaa !36
  %conv162 = zext i8 %7 to i32
  %shl163 = shl nuw nsw i32 %conv162, 16
  %or164 = or i32 %or160, %shl163
  %arrayidx165 = getelementptr inbounds i8, i8* %pp.addr.2, i64 3
  %8 = load i8, i8* %arrayidx165, align 1, !tbaa !36
  %conv166 = zext i8 %8 to i32
  %shl167 = shl nuw i32 %conv166, 24
  %or168 = or i32 %or164, %shl167
  %incdec.ptr169 = getelementptr inbounds i32, i32* %cp.addr.2, i64 1
  store i32 %or168, i32* %cp.addr.2, align 4, !tbaa !38
  %add.ptr171 = getelementptr inbounds i8, i8* %pp.addr.2, i64 %idx.ext
  br label %sw.bb172

sw.bb172:                                         ; preds = %for.end, %sw.bb154
  %pp.addr.3 = phi i8* [ %add.ptr171, %sw.bb154 ], [ %pp.addr.1.lcssa, %for.end ]
  %cp.addr.3 = phi i32* [ %incdec.ptr169, %sw.bb154 ], [ %cp.addr.1.lcssa, %for.end ]
  %9 = load i8, i8* %pp.addr.3, align 1, !tbaa !36
  %conv174 = zext i8 %9 to i32
  %arrayidx175 = getelementptr inbounds i8, i8* %pp.addr.3, i64 1
  %10 = load i8, i8* %arrayidx175, align 1, !tbaa !36
  %conv176 = zext i8 %10 to i32
  %shl177 = shl nuw nsw i32 %conv176, 8
  %or178 = or i32 %shl177, %conv174
  %arrayidx179 = getelementptr inbounds i8, i8* %pp.addr.3, i64 2
  %11 = load i8, i8* %arrayidx179, align 1, !tbaa !36
  %conv180 = zext i8 %11 to i32
  %shl181 = shl nuw nsw i32 %conv180, 16
  %or182 = or i32 %or178, %shl181
  %arrayidx183 = getelementptr inbounds i8, i8* %pp.addr.3, i64 3
  %12 = load i8, i8* %arrayidx183, align 1, !tbaa !36
  %conv184 = zext i8 %12 to i32
  %shl185 = shl nuw i32 %conv184, 24
  %or186 = or i32 %or182, %shl185
  %incdec.ptr187 = getelementptr inbounds i32, i32* %cp.addr.3, i64 1
  store i32 %or186, i32* %cp.addr.3, align 4, !tbaa !38
  %add.ptr189 = getelementptr inbounds i8, i8* %pp.addr.3, i64 %idx.ext
  br label %sw.bb190

sw.bb190:                                         ; preds = %for.end, %sw.bb172
  %pp.addr.4 = phi i8* [ %add.ptr189, %sw.bb172 ], [ %pp.addr.1.lcssa, %for.end ]
  %cp.addr.4 = phi i32* [ %incdec.ptr187, %sw.bb172 ], [ %cp.addr.1.lcssa, %for.end ]
  %13 = load i8, i8* %pp.addr.4, align 1, !tbaa !36
  %conv192 = zext i8 %13 to i32
  %arrayidx193 = getelementptr inbounds i8, i8* %pp.addr.4, i64 1
  %14 = load i8, i8* %arrayidx193, align 1, !tbaa !36
  %conv194 = zext i8 %14 to i32
  %shl195 = shl nuw nsw i32 %conv194, 8
  %or196 = or i32 %shl195, %conv192
  %arrayidx197 = getelementptr inbounds i8, i8* %pp.addr.4, i64 2
  %15 = load i8, i8* %arrayidx197, align 1, !tbaa !36
  %conv198 = zext i8 %15 to i32
  %shl199 = shl nuw nsw i32 %conv198, 16
  %or200 = or i32 %or196, %shl199
  %arrayidx201 = getelementptr inbounds i8, i8* %pp.addr.4, i64 3
  %16 = load i8, i8* %arrayidx201, align 1, !tbaa !36
  %conv202 = zext i8 %16 to i32
  %shl203 = shl nuw i32 %conv202, 24
  %or204 = or i32 %or200, %shl203
  %incdec.ptr205 = getelementptr inbounds i32, i32* %cp.addr.4, i64 1
  store i32 %or204, i32* %cp.addr.4, align 4, !tbaa !38
  %add.ptr207 = getelementptr inbounds i8, i8* %pp.addr.4, i64 %idx.ext
  br label %sw.bb208

sw.bb208:                                         ; preds = %for.end, %sw.bb190
  %pp.addr.5 = phi i8* [ %add.ptr207, %sw.bb190 ], [ %pp.addr.1.lcssa, %for.end ]
  %cp.addr.5 = phi i32* [ %incdec.ptr205, %sw.bb190 ], [ %cp.addr.1.lcssa, %for.end ]
  %17 = load i8, i8* %pp.addr.5, align 1, !tbaa !36
  %conv210 = zext i8 %17 to i32
  %arrayidx211 = getelementptr inbounds i8, i8* %pp.addr.5, i64 1
  %18 = load i8, i8* %arrayidx211, align 1, !tbaa !36
  %conv212 = zext i8 %18 to i32
  %shl213 = shl nuw nsw i32 %conv212, 8
  %or214 = or i32 %shl213, %conv210
  %arrayidx215 = getelementptr inbounds i8, i8* %pp.addr.5, i64 2
  %19 = load i8, i8* %arrayidx215, align 1, !tbaa !36
  %conv216 = zext i8 %19 to i32
  %shl217 = shl nuw nsw i32 %conv216, 16
  %or218 = or i32 %or214, %shl217
  %arrayidx219 = getelementptr inbounds i8, i8* %pp.addr.5, i64 3
  %20 = load i8, i8* %arrayidx219, align 1, !tbaa !36
  %conv220 = zext i8 %20 to i32
  %shl221 = shl nuw i32 %conv220, 24
  %or222 = or i32 %or218, %shl221
  %incdec.ptr223 = getelementptr inbounds i32, i32* %cp.addr.5, i64 1
  store i32 %or222, i32* %cp.addr.5, align 4, !tbaa !38
  %add.ptr225 = getelementptr inbounds i8, i8* %pp.addr.5, i64 %idx.ext
  br label %sw.bb226

sw.bb226:                                         ; preds = %for.end, %sw.bb208
  %pp.addr.6 = phi i8* [ %add.ptr225, %sw.bb208 ], [ %pp.addr.1.lcssa, %for.end ]
  %cp.addr.6 = phi i32* [ %incdec.ptr223, %sw.bb208 ], [ %cp.addr.1.lcssa, %for.end ]
  %21 = load i8, i8* %pp.addr.6, align 1, !tbaa !36
  %conv228 = zext i8 %21 to i32
  %arrayidx229 = getelementptr inbounds i8, i8* %pp.addr.6, i64 1
  %22 = load i8, i8* %arrayidx229, align 1, !tbaa !36
  %conv230 = zext i8 %22 to i32
  %shl231 = shl nuw nsw i32 %conv230, 8
  %or232 = or i32 %shl231, %conv228
  %arrayidx233 = getelementptr inbounds i8, i8* %pp.addr.6, i64 2
  %23 = load i8, i8* %arrayidx233, align 1, !tbaa !36
  %conv234 = zext i8 %23 to i32
  %shl235 = shl nuw nsw i32 %conv234, 16
  %or236 = or i32 %or232, %shl235
  %arrayidx237 = getelementptr inbounds i8, i8* %pp.addr.6, i64 3
  %24 = load i8, i8* %arrayidx237, align 1, !tbaa !36
  %conv238 = zext i8 %24 to i32
  %shl239 = shl nuw i32 %conv238, 24
  %or240 = or i32 %or236, %shl239
  %incdec.ptr241 = getelementptr inbounds i32, i32* %cp.addr.6, i64 1
  store i32 %or240, i32* %cp.addr.6, align 4, !tbaa !38
  %add.ptr243 = getelementptr inbounds i8, i8* %pp.addr.6, i64 %idx.ext
  br label %sw.bb244

sw.bb244:                                         ; preds = %for.end, %sw.bb226
  %pp.addr.7 = phi i8* [ %add.ptr243, %sw.bb226 ], [ %pp.addr.1.lcssa, %for.end ]
  %cp.addr.7 = phi i32* [ %incdec.ptr241, %sw.bb226 ], [ %cp.addr.1.lcssa, %for.end ]
  %25 = load i8, i8* %pp.addr.7, align 1, !tbaa !36
  %conv246 = zext i8 %25 to i32
  %arrayidx247 = getelementptr inbounds i8, i8* %pp.addr.7, i64 1
  %26 = load i8, i8* %arrayidx247, align 1, !tbaa !36
  %conv248 = zext i8 %26 to i32
  %shl249 = shl nuw nsw i32 %conv248, 8
  %or250 = or i32 %shl249, %conv246
  %arrayidx251 = getelementptr inbounds i8, i8* %pp.addr.7, i64 2
  %27 = load i8, i8* %arrayidx251, align 1, !tbaa !36
  %conv252 = zext i8 %27 to i32
  %shl253 = shl nuw nsw i32 %conv252, 16
  %or254 = or i32 %or250, %shl253
  %arrayidx255 = getelementptr inbounds i8, i8* %pp.addr.7, i64 3
  %28 = load i8, i8* %arrayidx255, align 1, !tbaa !36
  %conv256 = zext i8 %28 to i32
  %shl257 = shl nuw i32 %conv256, 24
  %or258 = or i32 %or254, %shl257
  %incdec.ptr259 = getelementptr inbounds i32, i32* %cp.addr.7, i64 1
  store i32 %or258, i32* %cp.addr.7, align 4, !tbaa !38
  %add.ptr261 = getelementptr inbounds i8, i8* %pp.addr.7, i64 %idx.ext
  br label %if.end

if.end:                                           ; preds = %for.end, %sw.bb244
  %pp.addr.8 = phi i8* [ %add.ptr261, %sw.bb244 ], [ %pp.addr.1.lcssa, %for.end ]
  %cp.addr.8 = phi i32* [ %incdec.ptr259, %sw.bb244 ], [ %cp.addr.1.lcssa, %for.end ]
  %add.ptr263 = getelementptr inbounds i32, i32* %cp.addr.8, i64 %idx.ext262
  %add.ptr265 = getelementptr inbounds i8, i8* %pp.addr.8, i64 %idx.ext264
  %cmp.not = icmp eq i32 %dec387, 0
  br i1 %cmp.not, label %while.end.loopexit, label %for.cond.preheader, !llvm.loop !54

while.end.loopexit:                               ; preds = %if.end
  br label %while.end

while.end:                                        ; preds = %while.end.loopexit, %entry
  ret void

rolled.pre:                                       ; preds = %for.body
  %29 = alloca i8*, i8 8, align 8
  %30 = getelementptr i8*, i8** %29, i8 0
  store i8* %pp.addr.1378, i8** %30, align 8
  %31 = getelementptr i8*, i8** %29, i8 1
  store i8* %add.ptr, i8** %31, align 8
  %32 = getelementptr i8*, i8** %29, i8 2
  store i8* %add.ptr32, i8** %32, align 8
  %33 = getelementptr i8*, i8** %29, i8 3
  store i8* %add.ptr49, i8** %33, align 8
  %34 = getelementptr i8*, i8** %29, i8 4
  store i8* %add.ptr66, i8** %34, align 8
  %35 = getelementptr i8*, i8** %29, i8 5
  store i8* %add.ptr83, i8** %35, align 8
  %36 = getelementptr i8*, i8** %29, i8 6
  store i8* %add.ptr100, i8** %36, align 8
  %37 = getelementptr i8*, i8** %29, i8 7
  store i8* %add.ptr117, i8** %37, align 8
  br label %rolled.loop

rolled.loop:                                      ; preds = %rolled.pre, %rolled.loop
  %38 = phi i8 [ 0, %rolled.pre ], [ %61, %rolled.loop ]
  %39 = getelementptr i8*, i8** %29, i8 %38
  %40 = load i8*, i8** %39, align 8
  %41 = getelementptr inbounds i8, i8* %40, i64 1
  %42 = load i8, i8* %41, align 1
  %43 = zext i8 %42 to i32
  %44 = shl nuw nsw i32 %43, 8
  %45 = load i8, i8* %40, align 1
  %46 = zext i8 %45 to i32
  %47 = or i32 %44, %46
  %48 = getelementptr inbounds i8, i8* %40, i64 2
  %49 = load i8, i8* %48, align 1
  %50 = zext i8 %49 to i32
  %51 = shl nuw nsw i32 %50, 16
  %52 = or i32 %47, %51
  %53 = getelementptr inbounds i8, i8* %40, i64 3
  %54 = load i8, i8* %53, align 1
  %55 = zext i8 %54 to i32
  %56 = shl nuw i32 %55, 24
  %57 = or i32 %52, %56
  %58 = zext i8 %38 to i64
  %59 = add i64 %58, 1
  %60 = getelementptr i32, i32* %cp.addr.1379, i64 %59
  store i32 %57, i32* %60, align 4
  %61 = add i8 %38, 1
  %62 = icmp ne i8 %61, 8
  br i1 %62, label %rolled.loop, label %rolled.exit

rolled.exit:                                      ; preds = %rolled.loop
  %63 = getelementptr inbounds i8, i8* %add.ptr117, i64 %idx.ext
  %64 = add i32 %_x.0380, -8
  %65 = icmp ugt i32 %64, 7
  br i1 %65, label %for.body, label %for.end.loopexit, !llvm.loop !55
}

code gen 1
destroying tree
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   %1 = load i8, i8* %pp.addr.1318, align 1, !tbaa !9
Here ..
Skipping:   %incdec.ptr = getelementptr inbounds i32, i32* %cp.addr.1319, i64 1
Skipping:   %add.ptr = getelementptr inbounds i8, i8* %pp.addr.1318, i64 %idx.ext
Here ..
Skipping:   %incdec.ptr24 = getelementptr inbounds i32, i32* %cp.addr.1319, i64 2
Skipping:   %add.ptr26 = getelementptr inbounds i8, i8* %add.ptr, i64 %idx.ext
Here ..
Skipping:   %incdec.ptr38 = getelementptr inbounds i32, i32* %cp.addr.1319, i64 3
Skipping:   %add.ptr40 = getelementptr inbounds i8, i8* %add.ptr26, i64 %idx.ext
Here ..
Skipping:   %incdec.ptr52 = getelementptr inbounds i32, i32* %cp.addr.1319, i64 4
Skipping:   %add.ptr54 = getelementptr inbounds i8, i8* %add.ptr40, i64 %idx.ext
Here ..
Skipping:   %incdec.ptr66 = getelementptr inbounds i32, i32* %cp.addr.1319, i64 5
Skipping:   %add.ptr68 = getelementptr inbounds i8, i8* %add.ptr54, i64 %idx.ext
Here ..
Skipping:   %incdec.ptr80 = getelementptr inbounds i32, i32* %cp.addr.1319, i64 6
Skipping:   %add.ptr82 = getelementptr inbounds i8, i8* %add.ptr68, i64 %idx.ext
Here ..
Skipping:   %incdec.ptr94 = getelementptr inbounds i32, i32* %cp.addr.1319, i64 7
Skipping:   %add.ptr96 = getelementptr inbounds i8, i8* %add.ptr82, i64 %idx.ext
Here ..
Skipping:   %incdec.ptr108 = getelementptr inbounds i32, i32* %cp.addr.1319, i64 8
Here ..
I:   %add.ptr110 = getelementptr inbounds i8, i8* %add.ptr96, i64 %idx.ext
Last:   %add.ptr110 = getelementptr inbounds i8, i8* %add.ptr96, i64 %idx.ext
Schedulable: 1
code gen 0
Gains: 95 - 33 = 62
Profitable: finishing code generation
; Function Attrs: nofree norecurse nounwind optsize uwtable
define internal void @putRGBcontig8bittile(%struct._TIFFRGBAImage* nocapture readonly %img, i32* nocapture %cp, i32 %x, i32 %y, i32 %w, i32 %h, i32 %fromskew, i32 %toskew, i8* nocapture readonly %pp) #5 {
entry:
  %samplesperpixel1 = getelementptr inbounds %struct._TIFFRGBAImage, %struct._TIFFRGBAImage* %img, i64 0, i32 7
  %0 = load i16, i16* %samplesperpixel1, align 2, !tbaa !32
  %cmp.not324 = icmp eq i32 %h, 0
  br i1 %cmp.not324, label %while.end, label %for.cond.preheader.lr.ph

for.cond.preheader.lr.ph:                         ; preds = %entry
  %conv = zext i16 %0 to i32
  %mul = mul nsw i32 %conv, %fromskew
  %cmp3317 = icmp ugt i32 %w, 7
  %idx.ext = zext i16 %0 to i64
  %idx.ext217 = sext i32 %toskew to i64
  %idx.ext219 = sext i32 %mul to i64
  br label %for.cond.preheader

for.cond.preheader:                               ; preds = %for.cond.preheader.lr.ph, %if.end
  %dec327.in = phi i32 [ %h, %for.cond.preheader.lr.ph ], [ %dec327, %if.end ]
  %cp.addr.0326 = phi i32* [ %cp, %for.cond.preheader.lr.ph ], [ %add.ptr218, %if.end ]
  %pp.addr.0325 = phi i8* [ %pp, %for.cond.preheader.lr.ph ], [ %add.ptr220, %if.end ]
  %dec327 = add i32 %dec327.in, -1
  br i1 %cmp3317, label %for.body.preheader, label %for.end

for.body.preheader:                               ; preds = %for.cond.preheader
  br label %for.body

for.body:                                         ; preds = %for.body.preheader, %for.body
  %_x.0320 = phi i32 [ %sub, %for.body ], [ %w, %for.body.preheader ]
  %cp.addr.1319 = phi i32* [ %incdec.ptr108, %for.body ], [ %cp.addr.0326, %for.body.preheader ]
  %pp.addr.1318 = phi i8* [ %add.ptr110, %for.body ], [ %pp.addr.0325, %for.body.preheader ]
  %1 = load i8, i8* %pp.addr.1318, align 1, !tbaa !36
  %conv5 = zext i8 %1 to i32
  %arrayidx6 = getelementptr inbounds i8, i8* %pp.addr.1318, i64 1
  %2 = load i8, i8* %arrayidx6, align 1, !tbaa !36
  %conv7 = zext i8 %2 to i32
  %shl = shl nuw nsw i32 %conv7, 8
  %arrayidx8 = getelementptr inbounds i8, i8* %pp.addr.1318, i64 2
  %3 = load i8, i8* %arrayidx8, align 1, !tbaa !36
  %conv9 = zext i8 %3 to i32
  %shl10 = shl nuw nsw i32 %conv9, 16
  %or = or i32 %shl, %conv5
  %or11 = or i32 %or, %shl10
  %or12 = or i32 %or11, -16777216
  %incdec.ptr = getelementptr inbounds i32, i32* %cp.addr.1319, i64 1
  store i32 %or12, i32* %cp.addr.1319, align 4, !tbaa !38
  %add.ptr = getelementptr inbounds i8, i8* %pp.addr.1318, i64 %idx.ext
  %4 = load i8, i8* %add.ptr, align 1, !tbaa !36
  %conv14 = zext i8 %4 to i32
  %arrayidx15 = getelementptr inbounds i8, i8* %add.ptr, i64 1
  %5 = load i8, i8* %arrayidx15, align 1, !tbaa !36
  %conv16 = zext i8 %5 to i32
  %shl17 = shl nuw nsw i32 %conv16, 8
  %arrayidx19 = getelementptr inbounds i8, i8* %add.ptr, i64 2
  %6 = load i8, i8* %arrayidx19, align 1, !tbaa !36
  %conv20 = zext i8 %6 to i32
  %shl21 = shl nuw nsw i32 %conv20, 16
  %or18 = or i32 %shl17, %conv14
  %or22 = or i32 %or18, %shl21
  %or23 = or i32 %or22, -16777216
  %incdec.ptr24 = getelementptr inbounds i32, i32* %cp.addr.1319, i64 2
  store i32 %or23, i32* %incdec.ptr, align 4, !tbaa !38
  %add.ptr26 = getelementptr inbounds i8, i8* %add.ptr, i64 %idx.ext
  %7 = load i8, i8* %add.ptr26, align 1, !tbaa !36
  %conv28 = zext i8 %7 to i32
  %arrayidx29 = getelementptr inbounds i8, i8* %add.ptr26, i64 1
  %8 = load i8, i8* %arrayidx29, align 1, !tbaa !36
  %conv30 = zext i8 %8 to i32
  %shl31 = shl nuw nsw i32 %conv30, 8
  %arrayidx33 = getelementptr inbounds i8, i8* %add.ptr26, i64 2
  %9 = load i8, i8* %arrayidx33, align 1, !tbaa !36
  %conv34 = zext i8 %9 to i32
  %shl35 = shl nuw nsw i32 %conv34, 16
  %or32 = or i32 %shl31, %conv28
  %or36 = or i32 %or32, %shl35
  %or37 = or i32 %or36, -16777216
  %incdec.ptr38 = getelementptr inbounds i32, i32* %cp.addr.1319, i64 3
  store i32 %or37, i32* %incdec.ptr24, align 4, !tbaa !38
  %add.ptr40 = getelementptr inbounds i8, i8* %add.ptr26, i64 %idx.ext
  %10 = load i8, i8* %add.ptr40, align 1, !tbaa !36
  %conv42 = zext i8 %10 to i32
  %arrayidx43 = getelementptr inbounds i8, i8* %add.ptr40, i64 1
  %11 = load i8, i8* %arrayidx43, align 1, !tbaa !36
  %conv44 = zext i8 %11 to i32
  %shl45 = shl nuw nsw i32 %conv44, 8
  %arrayidx47 = getelementptr inbounds i8, i8* %add.ptr40, i64 2
  %12 = load i8, i8* %arrayidx47, align 1, !tbaa !36
  %conv48 = zext i8 %12 to i32
  %shl49 = shl nuw nsw i32 %conv48, 16
  %or46 = or i32 %shl45, %conv42
  %or50 = or i32 %or46, %shl49
  %or51 = or i32 %or50, -16777216
  %incdec.ptr52 = getelementptr inbounds i32, i32* %cp.addr.1319, i64 4
  store i32 %or51, i32* %incdec.ptr38, align 4, !tbaa !38
  %add.ptr54 = getelementptr inbounds i8, i8* %add.ptr40, i64 %idx.ext
  %13 = load i8, i8* %add.ptr54, align 1, !tbaa !36
  %conv56 = zext i8 %13 to i32
  %arrayidx57 = getelementptr inbounds i8, i8* %add.ptr54, i64 1
  %14 = load i8, i8* %arrayidx57, align 1, !tbaa !36
  %conv58 = zext i8 %14 to i32
  %shl59 = shl nuw nsw i32 %conv58, 8
  %arrayidx61 = getelementptr inbounds i8, i8* %add.ptr54, i64 2
  %15 = load i8, i8* %arrayidx61, align 1, !tbaa !36
  %conv62 = zext i8 %15 to i32
  %shl63 = shl nuw nsw i32 %conv62, 16
  %or60 = or i32 %shl59, %conv56
  %or64 = or i32 %or60, %shl63
  %or65 = or i32 %or64, -16777216
  %incdec.ptr66 = getelementptr inbounds i32, i32* %cp.addr.1319, i64 5
  store i32 %or65, i32* %incdec.ptr52, align 4, !tbaa !38
  %add.ptr68 = getelementptr inbounds i8, i8* %add.ptr54, i64 %idx.ext
  %16 = load i8, i8* %add.ptr68, align 1, !tbaa !36
  %conv70 = zext i8 %16 to i32
  %arrayidx71 = getelementptr inbounds i8, i8* %add.ptr68, i64 1
  %17 = load i8, i8* %arrayidx71, align 1, !tbaa !36
  %conv72 = zext i8 %17 to i32
  %shl73 = shl nuw nsw i32 %conv72, 8
  %arrayidx75 = getelementptr inbounds i8, i8* %add.ptr68, i64 2
  %18 = load i8, i8* %arrayidx75, align 1, !tbaa !36
  %conv76 = zext i8 %18 to i32
  %shl77 = shl nuw nsw i32 %conv76, 16
  %or74 = or i32 %shl73, %conv70
  %or78 = or i32 %or74, %shl77
  %or79 = or i32 %or78, -16777216
  %incdec.ptr80 = getelementptr inbounds i32, i32* %cp.addr.1319, i64 6
  store i32 %or79, i32* %incdec.ptr66, align 4, !tbaa !38
  %add.ptr82 = getelementptr inbounds i8, i8* %add.ptr68, i64 %idx.ext
  %19 = load i8, i8* %add.ptr82, align 1, !tbaa !36
  %conv84 = zext i8 %19 to i32
  %arrayidx85 = getelementptr inbounds i8, i8* %add.ptr82, i64 1
  %20 = load i8, i8* %arrayidx85, align 1, !tbaa !36
  %conv86 = zext i8 %20 to i32
  %shl87 = shl nuw nsw i32 %conv86, 8
  %arrayidx89 = getelementptr inbounds i8, i8* %add.ptr82, i64 2
  %21 = load i8, i8* %arrayidx89, align 1, !tbaa !36
  %conv90 = zext i8 %21 to i32
  %shl91 = shl nuw nsw i32 %conv90, 16
  %or88 = or i32 %shl87, %conv84
  %or92 = or i32 %or88, %shl91
  %or93 = or i32 %or92, -16777216
  %incdec.ptr94 = getelementptr inbounds i32, i32* %cp.addr.1319, i64 7
  store i32 %or93, i32* %incdec.ptr80, align 4, !tbaa !38
  %add.ptr96 = getelementptr inbounds i8, i8* %add.ptr82, i64 %idx.ext
  %22 = load i8, i8* %add.ptr96, align 1, !tbaa !36
  %conv98 = zext i8 %22 to i32
  %arrayidx99 = getelementptr inbounds i8, i8* %add.ptr96, i64 1
  %23 = load i8, i8* %arrayidx99, align 1, !tbaa !36
  %conv100 = zext i8 %23 to i32
  %shl101 = shl nuw nsw i32 %conv100, 8
  %arrayidx103 = getelementptr inbounds i8, i8* %add.ptr96, i64 2
  %24 = load i8, i8* %arrayidx103, align 1, !tbaa !36
  %conv104 = zext i8 %24 to i32
  %shl105 = shl nuw nsw i32 %conv104, 16
  %or102 = or i32 %shl101, %conv98
  %or106 = or i32 %or102, %shl105
  %or107 = or i32 %or106, -16777216
  %incdec.ptr108 = getelementptr inbounds i32, i32* %cp.addr.1319, i64 8
  store i32 %or107, i32* %incdec.ptr94, align 4, !tbaa !38
  %add.ptr110 = getelementptr inbounds i8, i8* %add.ptr96, i64 %idx.ext
  %sub = add i32 %_x.0320, -8
  %cmp3 = icmp ugt i32 %sub, 7
  br i1 %cmp3, label %for.body, label %for.end.loopexit, !llvm.loop !58

for.end.loopexit:                                 ; preds = %for.body
  %incdec.ptr108.lcssa = phi i32* [ %incdec.ptr108, %for.body ]
  %add.ptr110.lcssa = phi i8* [ %add.ptr110, %for.body ]
  %sub.lcssa = phi i32 [ %sub, %for.body ]
  br label %for.end

for.end:                                          ; preds = %for.end.loopexit, %for.cond.preheader
  %pp.addr.1.lcssa = phi i8* [ %pp.addr.0325, %for.cond.preheader ], [ %add.ptr110.lcssa, %for.end.loopexit ]
  %cp.addr.1.lcssa = phi i32* [ %cp.addr.0326, %for.cond.preheader ], [ %incdec.ptr108.lcssa, %for.end.loopexit ]
  %_x.0.lcssa = phi i32 [ %w, %for.cond.preheader ], [ %sub.lcssa, %for.end.loopexit ]
  switch i32 %_x.0.lcssa, label %if.end [
    i32 1, label %sw.bb202
    i32 7, label %sw.bb
    i32 6, label %sw.bb127
    i32 5, label %sw.bb142
    i32 4, label %sw.bb157
    i32 3, label %sw.bb172
    i32 2, label %sw.bb187
  ]

sw.bb:                                            ; preds = %for.end
  %25 = load i8, i8* %pp.addr.1.lcssa, align 1, !tbaa !36
  %conv114 = zext i8 %25 to i32
  %arrayidx115 = getelementptr inbounds i8, i8* %pp.addr.1.lcssa, i64 1
  %26 = load i8, i8* %arrayidx115, align 1, !tbaa !36
  %conv116 = zext i8 %26 to i32
  %shl117 = shl nuw nsw i32 %conv116, 8
  %arrayidx119 = getelementptr inbounds i8, i8* %pp.addr.1.lcssa, i64 2
  %27 = load i8, i8* %arrayidx119, align 1, !tbaa !36
  %conv120 = zext i8 %27 to i32
  %shl121 = shl nuw nsw i32 %conv120, 16
  %or118 = or i32 %shl117, %conv114
  %or122 = or i32 %or118, %shl121
  %or123 = or i32 %or122, -16777216
  %incdec.ptr124 = getelementptr inbounds i32, i32* %cp.addr.1.lcssa, i64 1
  store i32 %or123, i32* %cp.addr.1.lcssa, align 4, !tbaa !38
  %add.ptr126 = getelementptr inbounds i8, i8* %pp.addr.1.lcssa, i64 %idx.ext
  br label %sw.bb127

sw.bb127:                                         ; preds = %for.end, %sw.bb
  %pp.addr.2 = phi i8* [ %add.ptr126, %sw.bb ], [ %pp.addr.1.lcssa, %for.end ]
  %cp.addr.2 = phi i32* [ %incdec.ptr124, %sw.bb ], [ %cp.addr.1.lcssa, %for.end ]
  %28 = load i8, i8* %pp.addr.2, align 1, !tbaa !36
  %conv129 = zext i8 %28 to i32
  %arrayidx130 = getelementptr inbounds i8, i8* %pp.addr.2, i64 1
  %29 = load i8, i8* %arrayidx130, align 1, !tbaa !36
  %conv131 = zext i8 %29 to i32
  %shl132 = shl nuw nsw i32 %conv131, 8
  %arrayidx134 = getelementptr inbounds i8, i8* %pp.addr.2, i64 2
  %30 = load i8, i8* %arrayidx134, align 1, !tbaa !36
  %conv135 = zext i8 %30 to i32
  %shl136 = shl nuw nsw i32 %conv135, 16
  %or133 = or i32 %shl132, %conv129
  %or137 = or i32 %or133, %shl136
  %or138 = or i32 %or137, -16777216
  %incdec.ptr139 = getelementptr inbounds i32, i32* %cp.addr.2, i64 1
  store i32 %or138, i32* %cp.addr.2, align 4, !tbaa !38
  %add.ptr141 = getelementptr inbounds i8, i8* %pp.addr.2, i64 %idx.ext
  br label %sw.bb142

sw.bb142:                                         ; preds = %for.end, %sw.bb127
  %pp.addr.3 = phi i8* [ %add.ptr141, %sw.bb127 ], [ %pp.addr.1.lcssa, %for.end ]
  %cp.addr.3 = phi i32* [ %incdec.ptr139, %sw.bb127 ], [ %cp.addr.1.lcssa, %for.end ]
  %31 = load i8, i8* %pp.addr.3, align 1, !tbaa !36
  %conv144 = zext i8 %31 to i32
  %arrayidx145 = getelementptr inbounds i8, i8* %pp.addr.3, i64 1
  %32 = load i8, i8* %arrayidx145, align 1, !tbaa !36
  %conv146 = zext i8 %32 to i32
  %shl147 = shl nuw nsw i32 %conv146, 8
  %arrayidx149 = getelementptr inbounds i8, i8* %pp.addr.3, i64 2
  %33 = load i8, i8* %arrayidx149, align 1, !tbaa !36
  %conv150 = zext i8 %33 to i32
  %shl151 = shl nuw nsw i32 %conv150, 16
  %or148 = or i32 %shl147, %conv144
  %or152 = or i32 %or148, %shl151
  %or153 = or i32 %or152, -16777216
  %incdec.ptr154 = getelementptr inbounds i32, i32* %cp.addr.3, i64 1
  store i32 %or153, i32* %cp.addr.3, align 4, !tbaa !38
  %add.ptr156 = getelementptr inbounds i8, i8* %pp.addr.3, i64 %idx.ext
  br label %sw.bb157

sw.bb157:                                         ; preds = %for.end, %sw.bb142
  %pp.addr.4 = phi i8* [ %add.ptr156, %sw.bb142 ], [ %pp.addr.1.lcssa, %for.end ]
  %cp.addr.4 = phi i32* [ %incdec.ptr154, %sw.bb142 ], [ %cp.addr.1.lcssa, %for.end ]
  %34 = load i8, i8* %pp.addr.4, align 1, !tbaa !36
  %conv159 = zext i8 %34 to i32
  %arrayidx160 = getelementptr inbounds i8, i8* %pp.addr.4, i64 1
  %35 = load i8, i8* %arrayidx160, align 1, !tbaa !36
  %conv161 = zext i8 %35 to i32
  %shl162 = shl nuw nsw i32 %conv161, 8
  %arrayidx164 = getelementptr inbounds i8, i8* %pp.addr.4, i64 2
  %36 = load i8, i8* %arrayidx164, align 1, !tbaa !36
  %conv165 = zext i8 %36 to i32
  %shl166 = shl nuw nsw i32 %conv165, 16
  %or163 = or i32 %shl162, %conv159
  %or167 = or i32 %or163, %shl166
  %or168 = or i32 %or167, -16777216
  %incdec.ptr169 = getelementptr inbounds i32, i32* %cp.addr.4, i64 1
  store i32 %or168, i32* %cp.addr.4, align 4, !tbaa !38
  %add.ptr171 = getelementptr inbounds i8, i8* %pp.addr.4, i64 %idx.ext
  br label %sw.bb172

sw.bb172:                                         ; preds = %for.end, %sw.bb157
  %pp.addr.5 = phi i8* [ %add.ptr171, %sw.bb157 ], [ %pp.addr.1.lcssa, %for.end ]
  %cp.addr.5 = phi i32* [ %incdec.ptr169, %sw.bb157 ], [ %cp.addr.1.lcssa, %for.end ]
  %37 = load i8, i8* %pp.addr.5, align 1, !tbaa !36
  %conv174 = zext i8 %37 to i32
  %arrayidx175 = getelementptr inbounds i8, i8* %pp.addr.5, i64 1
  %38 = load i8, i8* %arrayidx175, align 1, !tbaa !36
  %conv176 = zext i8 %38 to i32
  %shl177 = shl nuw nsw i32 %conv176, 8
  %arrayidx179 = getelementptr inbounds i8, i8* %pp.addr.5, i64 2
  %39 = load i8, i8* %arrayidx179, align 1, !tbaa !36
  %conv180 = zext i8 %39 to i32
  %shl181 = shl nuw nsw i32 %conv180, 16
  %or178 = or i32 %shl177, %conv174
  %or182 = or i32 %or178, %shl181
  %or183 = or i32 %or182, -16777216
  %incdec.ptr184 = getelementptr inbounds i32, i32* %cp.addr.5, i64 1
  store i32 %or183, i32* %cp.addr.5, align 4, !tbaa !38
  %add.ptr186 = getelementptr inbounds i8, i8* %pp.addr.5, i64 %idx.ext
  br label %sw.bb187

sw.bb187:                                         ; preds = %for.end, %sw.bb172
  %pp.addr.6 = phi i8* [ %add.ptr186, %sw.bb172 ], [ %pp.addr.1.lcssa, %for.end ]
  %cp.addr.6 = phi i32* [ %incdec.ptr184, %sw.bb172 ], [ %cp.addr.1.lcssa, %for.end ]
  %40 = load i8, i8* %pp.addr.6, align 1, !tbaa !36
  %conv189 = zext i8 %40 to i32
  %arrayidx190 = getelementptr inbounds i8, i8* %pp.addr.6, i64 1
  %41 = load i8, i8* %arrayidx190, align 1, !tbaa !36
  %conv191 = zext i8 %41 to i32
  %shl192 = shl nuw nsw i32 %conv191, 8
  %arrayidx194 = getelementptr inbounds i8, i8* %pp.addr.6, i64 2
  %42 = load i8, i8* %arrayidx194, align 1, !tbaa !36
  %conv195 = zext i8 %42 to i32
  %shl196 = shl nuw nsw i32 %conv195, 16
  %or193 = or i32 %shl192, %conv189
  %or197 = or i32 %or193, %shl196
  %or198 = or i32 %or197, -16777216
  %incdec.ptr199 = getelementptr inbounds i32, i32* %cp.addr.6, i64 1
  store i32 %or198, i32* %cp.addr.6, align 4, !tbaa !38
  %add.ptr201 = getelementptr inbounds i8, i8* %pp.addr.6, i64 %idx.ext
  br label %sw.bb202

sw.bb202:                                         ; preds = %for.end, %sw.bb187
  %pp.addr.7 = phi i8* [ %add.ptr201, %sw.bb187 ], [ %pp.addr.1.lcssa, %for.end ]
  %cp.addr.7 = phi i32* [ %incdec.ptr199, %sw.bb187 ], [ %cp.addr.1.lcssa, %for.end ]
  %43 = load i8, i8* %pp.addr.7, align 1, !tbaa !36
  %conv204 = zext i8 %43 to i32
  %arrayidx205 = getelementptr inbounds i8, i8* %pp.addr.7, i64 1
  %44 = load i8, i8* %arrayidx205, align 1, !tbaa !36
  %conv206 = zext i8 %44 to i32
  %shl207 = shl nuw nsw i32 %conv206, 8
  %arrayidx209 = getelementptr inbounds i8, i8* %pp.addr.7, i64 2
  %45 = load i8, i8* %arrayidx209, align 1, !tbaa !36
  %conv210 = zext i8 %45 to i32
  %shl211 = shl nuw nsw i32 %conv210, 16
  %or208 = or i32 %shl207, %conv204
  %or212 = or i32 %or208, %shl211
  %or213 = or i32 %or212, -16777216
  %incdec.ptr214 = getelementptr inbounds i32, i32* %cp.addr.7, i64 1
  store i32 %or213, i32* %cp.addr.7, align 4, !tbaa !38
  %add.ptr216 = getelementptr inbounds i8, i8* %pp.addr.7, i64 %idx.ext
  br label %if.end

if.end:                                           ; preds = %for.end, %sw.bb202
  %pp.addr.8 = phi i8* [ %add.ptr216, %sw.bb202 ], [ %pp.addr.1.lcssa, %for.end ]
  %cp.addr.8 = phi i32* [ %incdec.ptr214, %sw.bb202 ], [ %cp.addr.1.lcssa, %for.end ]
  %add.ptr218 = getelementptr inbounds i32, i32* %cp.addr.8, i64 %idx.ext217
  %add.ptr220 = getelementptr inbounds i8, i8* %pp.addr.8, i64 %idx.ext219
  %cmp.not = icmp eq i32 %dec327, 0
  br i1 %cmp.not, label %while.end.loopexit, label %for.cond.preheader, !llvm.loop !59

while.end.loopexit:                               ; preds = %if.end
  br label %while.end

while.end:                                        ; preds = %while.end.loopexit, %entry
  ret void

rolled.pre:                                       ; No predecessors!
  %46 = alloca i8*, i8 8, align 8
  %47 = getelementptr i8*, i8** %46, i8 0
  store i8* %pp.addr.1318, i8** %47, align 8
  %48 = getelementptr i8*, i8** %46, i8 1
  store i8* %add.ptr, i8** %48, align 8
  %49 = getelementptr i8*, i8** %46, i8 2
  store i8* %add.ptr26, i8** %49, align 8
  %50 = getelementptr i8*, i8** %46, i8 3
  store i8* %add.ptr40, i8** %50, align 8
  %51 = getelementptr i8*, i8** %46, i8 4
  store i8* %add.ptr54, i8** %51, align 8
  %52 = getelementptr i8*, i8** %46, i8 5
  store i8* %add.ptr68, i8** %52, align 8
  %53 = getelementptr i8*, i8** %46, i8 6
  store i8* %add.ptr82, i8** %53, align 8
  %54 = getelementptr i8*, i8** %46, i8 7
  store i8* %add.ptr96, i8** %54, align 8

rolled.loop:                                      ; No predecessors!
  %55 = phi i8 
  %56 = getelementptr i8*, i8** %46, i8 %55
  %57 = load i8*, i8** %56, align 8
  %58 = getelementptr inbounds i8, i8* %57, i64 1
  %59 = load i8, i8* %58, align 1
  %60 = zext i8 %59 to i32
  %61 = shl nuw nsw i32 %60, 8
  %62 = load i8, i8* %57, align 1
  %63 = zext i8 %62 to i32
  %64 = or i32 %61, %63
  %65 = getelementptr inbounds i8, i8* %57, i64 2
  %66 = load i8, i8* %65, align 1
  %67 = zext i8 %66 to i32
  %68 = shl nuw nsw i32 %67, 16
  %69 = or i32 %64, %68
  %70 = or i32 %69, -16777216
  %71 = zext i8 %55 to i64
  %72 = add i64 %71, 1
  %73 = getelementptr i32, i32* %cp.addr.1319, i64 %72
  store i32 %70, i32* %73, align 4
  %74 = add i8 %55, 1
  %75 = icmp ne i8 %74, 8

rolled.exit:                                      ; No predecessors!
}

Done!
; Function Attrs: nofree norecurse nounwind optsize uwtable
define internal void @putRGBcontig8bittile(%struct._TIFFRGBAImage* nocapture readonly %img, i32* nocapture %cp, i32 %x, i32 %y, i32 %w, i32 %h, i32 %fromskew, i32 %toskew, i8* nocapture readonly %pp) #5 {
entry:
  %samplesperpixel1 = getelementptr inbounds %struct._TIFFRGBAImage, %struct._TIFFRGBAImage* %img, i64 0, i32 7
  %0 = load i16, i16* %samplesperpixel1, align 2, !tbaa !32
  %cmp.not324 = icmp eq i32 %h, 0
  br i1 %cmp.not324, label %while.end, label %for.cond.preheader.lr.ph

for.cond.preheader.lr.ph:                         ; preds = %entry
  %conv = zext i16 %0 to i32
  %mul = mul nsw i32 %conv, %fromskew
  %cmp3317 = icmp ugt i32 %w, 7
  %idx.ext = zext i16 %0 to i64
  %idx.ext217 = sext i32 %toskew to i64
  %idx.ext219 = sext i32 %mul to i64
  br label %for.cond.preheader

for.cond.preheader:                               ; preds = %for.cond.preheader.lr.ph, %if.end
  %dec327.in = phi i32 [ %h, %for.cond.preheader.lr.ph ], [ %dec327, %if.end ]
  %cp.addr.0326 = phi i32* [ %cp, %for.cond.preheader.lr.ph ], [ %add.ptr218, %if.end ]
  %pp.addr.0325 = phi i8* [ %pp, %for.cond.preheader.lr.ph ], [ %add.ptr220, %if.end ]
  %dec327 = add i32 %dec327.in, -1
  br i1 %cmp3317, label %for.body.preheader, label %for.end

for.body.preheader:                               ; preds = %for.cond.preheader
  br label %for.body

for.body:                                         ; preds = %for.body.preheader, %rolled.exit
  %_x.0320 = phi i32 [ %53, %rolled.exit ], [ %w, %for.body.preheader ]
  %cp.addr.1319 = phi i32* [ %incdec.ptr108, %rolled.exit ], [ %cp.addr.0326, %for.body.preheader ]
  %pp.addr.1318 = phi i8* [ %52, %rolled.exit ], [ %pp.addr.0325, %for.body.preheader ]
  %add.ptr = getelementptr inbounds i8, i8* %pp.addr.1318, i64 %idx.ext
  %add.ptr26 = getelementptr inbounds i8, i8* %add.ptr, i64 %idx.ext
  %add.ptr40 = getelementptr inbounds i8, i8* %add.ptr26, i64 %idx.ext
  %add.ptr54 = getelementptr inbounds i8, i8* %add.ptr40, i64 %idx.ext
  %add.ptr68 = getelementptr inbounds i8, i8* %add.ptr54, i64 %idx.ext
  %add.ptr82 = getelementptr inbounds i8, i8* %add.ptr68, i64 %idx.ext
  %add.ptr96 = getelementptr inbounds i8, i8* %add.ptr82, i64 %idx.ext
  %incdec.ptr108 = getelementptr inbounds i32, i32* %cp.addr.1319, i64 8
  br label %rolled.pre

for.end.loopexit:                                 ; preds = %rolled.exit
  %incdec.ptr108.lcssa = phi i32* [ %incdec.ptr108, %rolled.exit ]
  %add.ptr110.lcssa = phi i8* [ %52, %rolled.exit ]
  %sub.lcssa = phi i32 [ %53, %rolled.exit ]
  br label %for.end

for.end:                                          ; preds = %for.end.loopexit, %for.cond.preheader
  %pp.addr.1.lcssa = phi i8* [ %pp.addr.0325, %for.cond.preheader ], [ %add.ptr110.lcssa, %for.end.loopexit ]
  %cp.addr.1.lcssa = phi i32* [ %cp.addr.0326, %for.cond.preheader ], [ %incdec.ptr108.lcssa, %for.end.loopexit ]
  %_x.0.lcssa = phi i32 [ %w, %for.cond.preheader ], [ %sub.lcssa, %for.end.loopexit ]
  switch i32 %_x.0.lcssa, label %if.end [
    i32 1, label %sw.bb202
    i32 7, label %sw.bb
    i32 6, label %sw.bb127
    i32 5, label %sw.bb142
    i32 4, label %sw.bb157
    i32 3, label %sw.bb172
    i32 2, label %sw.bb187
  ]

sw.bb:                                            ; preds = %for.end
  %1 = load i8, i8* %pp.addr.1.lcssa, align 1, !tbaa !36
  %conv114 = zext i8 %1 to i32
  %arrayidx115 = getelementptr inbounds i8, i8* %pp.addr.1.lcssa, i64 1
  %2 = load i8, i8* %arrayidx115, align 1, !tbaa !36
  %conv116 = zext i8 %2 to i32
  %shl117 = shl nuw nsw i32 %conv116, 8
  %arrayidx119 = getelementptr inbounds i8, i8* %pp.addr.1.lcssa, i64 2
  %3 = load i8, i8* %arrayidx119, align 1, !tbaa !36
  %conv120 = zext i8 %3 to i32
  %shl121 = shl nuw nsw i32 %conv120, 16
  %or118 = or i32 %shl117, %conv114
  %or122 = or i32 %or118, %shl121
  %or123 = or i32 %or122, -16777216
  %incdec.ptr124 = getelementptr inbounds i32, i32* %cp.addr.1.lcssa, i64 1
  store i32 %or123, i32* %cp.addr.1.lcssa, align 4, !tbaa !38
  %add.ptr126 = getelementptr inbounds i8, i8* %pp.addr.1.lcssa, i64 %idx.ext
  br label %sw.bb127

sw.bb127:                                         ; preds = %for.end, %sw.bb
  %pp.addr.2 = phi i8* [ %add.ptr126, %sw.bb ], [ %pp.addr.1.lcssa, %for.end ]
  %cp.addr.2 = phi i32* [ %incdec.ptr124, %sw.bb ], [ %cp.addr.1.lcssa, %for.end ]
  %4 = load i8, i8* %pp.addr.2, align 1, !tbaa !36
  %conv129 = zext i8 %4 to i32
  %arrayidx130 = getelementptr inbounds i8, i8* %pp.addr.2, i64 1
  %5 = load i8, i8* %arrayidx130, align 1, !tbaa !36
  %conv131 = zext i8 %5 to i32
  %shl132 = shl nuw nsw i32 %conv131, 8
  %arrayidx134 = getelementptr inbounds i8, i8* %pp.addr.2, i64 2
  %6 = load i8, i8* %arrayidx134, align 1, !tbaa !36
  %conv135 = zext i8 %6 to i32
  %shl136 = shl nuw nsw i32 %conv135, 16
  %or133 = or i32 %shl132, %conv129
  %or137 = or i32 %or133, %shl136
  %or138 = or i32 %or137, -16777216
  %incdec.ptr139 = getelementptr inbounds i32, i32* %cp.addr.2, i64 1
  store i32 %or138, i32* %cp.addr.2, align 4, !tbaa !38
  %add.ptr141 = getelementptr inbounds i8, i8* %pp.addr.2, i64 %idx.ext
  br label %sw.bb142

sw.bb142:                                         ; preds = %for.end, %sw.bb127
  %pp.addr.3 = phi i8* [ %add.ptr141, %sw.bb127 ], [ %pp.addr.1.lcssa, %for.end ]
  %cp.addr.3 = phi i32* [ %incdec.ptr139, %sw.bb127 ], [ %cp.addr.1.lcssa, %for.end ]
  %7 = load i8, i8* %pp.addr.3, align 1, !tbaa !36
  %conv144 = zext i8 %7 to i32
  %arrayidx145 = getelementptr inbounds i8, i8* %pp.addr.3, i64 1
  %8 = load i8, i8* %arrayidx145, align 1, !tbaa !36
  %conv146 = zext i8 %8 to i32
  %shl147 = shl nuw nsw i32 %conv146, 8
  %arrayidx149 = getelementptr inbounds i8, i8* %pp.addr.3, i64 2
  %9 = load i8, i8* %arrayidx149, align 1, !tbaa !36
  %conv150 = zext i8 %9 to i32
  %shl151 = shl nuw nsw i32 %conv150, 16
  %or148 = or i32 %shl147, %conv144
  %or152 = or i32 %or148, %shl151
  %or153 = or i32 %or152, -16777216
  %incdec.ptr154 = getelementptr inbounds i32, i32* %cp.addr.3, i64 1
  store i32 %or153, i32* %cp.addr.3, align 4, !tbaa !38
  %add.ptr156 = getelementptr inbounds i8, i8* %pp.addr.3, i64 %idx.ext
  br label %sw.bb157

sw.bb157:                                         ; preds = %for.end, %sw.bb142
  %pp.addr.4 = phi i8* [ %add.ptr156, %sw.bb142 ], [ %pp.addr.1.lcssa, %for.end ]
  %cp.addr.4 = phi i32* [ %incdec.ptr154, %sw.bb142 ], [ %cp.addr.1.lcssa, %for.end ]
  %10 = load i8, i8* %pp.addr.4, align 1, !tbaa !36
  %conv159 = zext i8 %10 to i32
  %arrayidx160 = getelementptr inbounds i8, i8* %pp.addr.4, i64 1
  %11 = load i8, i8* %arrayidx160, align 1, !tbaa !36
  %conv161 = zext i8 %11 to i32
  %shl162 = shl nuw nsw i32 %conv161, 8
  %arrayidx164 = getelementptr inbounds i8, i8* %pp.addr.4, i64 2
  %12 = load i8, i8* %arrayidx164, align 1, !tbaa !36
  %conv165 = zext i8 %12 to i32
  %shl166 = shl nuw nsw i32 %conv165, 16
  %or163 = or i32 %shl162, %conv159
  %or167 = or i32 %or163, %shl166
  %or168 = or i32 %or167, -16777216
  %incdec.ptr169 = getelementptr inbounds i32, i32* %cp.addr.4, i64 1
  store i32 %or168, i32* %cp.addr.4, align 4, !tbaa !38
  %add.ptr171 = getelementptr inbounds i8, i8* %pp.addr.4, i64 %idx.ext
  br label %sw.bb172

sw.bb172:                                         ; preds = %for.end, %sw.bb157
  %pp.addr.5 = phi i8* [ %add.ptr171, %sw.bb157 ], [ %pp.addr.1.lcssa, %for.end ]
  %cp.addr.5 = phi i32* [ %incdec.ptr169, %sw.bb157 ], [ %cp.addr.1.lcssa, %for.end ]
  %13 = load i8, i8* %pp.addr.5, align 1, !tbaa !36
  %conv174 = zext i8 %13 to i32
  %arrayidx175 = getelementptr inbounds i8, i8* %pp.addr.5, i64 1
  %14 = load i8, i8* %arrayidx175, align 1, !tbaa !36
  %conv176 = zext i8 %14 to i32
  %shl177 = shl nuw nsw i32 %conv176, 8
  %arrayidx179 = getelementptr inbounds i8, i8* %pp.addr.5, i64 2
  %15 = load i8, i8* %arrayidx179, align 1, !tbaa !36
  %conv180 = zext i8 %15 to i32
  %shl181 = shl nuw nsw i32 %conv180, 16
  %or178 = or i32 %shl177, %conv174
  %or182 = or i32 %or178, %shl181
  %or183 = or i32 %or182, -16777216
  %incdec.ptr184 = getelementptr inbounds i32, i32* %cp.addr.5, i64 1
  store i32 %or183, i32* %cp.addr.5, align 4, !tbaa !38
  %add.ptr186 = getelementptr inbounds i8, i8* %pp.addr.5, i64 %idx.ext
  br label %sw.bb187

sw.bb187:                                         ; preds = %for.end, %sw.bb172
  %pp.addr.6 = phi i8* [ %add.ptr186, %sw.bb172 ], [ %pp.addr.1.lcssa, %for.end ]
  %cp.addr.6 = phi i32* [ %incdec.ptr184, %sw.bb172 ], [ %cp.addr.1.lcssa, %for.end ]
  %16 = load i8, i8* %pp.addr.6, align 1, !tbaa !36
  %conv189 = zext i8 %16 to i32
  %arrayidx190 = getelementptr inbounds i8, i8* %pp.addr.6, i64 1
  %17 = load i8, i8* %arrayidx190, align 1, !tbaa !36
  %conv191 = zext i8 %17 to i32
  %shl192 = shl nuw nsw i32 %conv191, 8
  %arrayidx194 = getelementptr inbounds i8, i8* %pp.addr.6, i64 2
  %18 = load i8, i8* %arrayidx194, align 1, !tbaa !36
  %conv195 = zext i8 %18 to i32
  %shl196 = shl nuw nsw i32 %conv195, 16
  %or193 = or i32 %shl192, %conv189
  %or197 = or i32 %or193, %shl196
  %or198 = or i32 %or197, -16777216
  %incdec.ptr199 = getelementptr inbounds i32, i32* %cp.addr.6, i64 1
  store i32 %or198, i32* %cp.addr.6, align 4, !tbaa !38
  %add.ptr201 = getelementptr inbounds i8, i8* %pp.addr.6, i64 %idx.ext
  br label %sw.bb202

sw.bb202:                                         ; preds = %for.end, %sw.bb187
  %pp.addr.7 = phi i8* [ %add.ptr201, %sw.bb187 ], [ %pp.addr.1.lcssa, %for.end ]
  %cp.addr.7 = phi i32* [ %incdec.ptr199, %sw.bb187 ], [ %cp.addr.1.lcssa, %for.end ]
  %19 = load i8, i8* %pp.addr.7, align 1, !tbaa !36
  %conv204 = zext i8 %19 to i32
  %arrayidx205 = getelementptr inbounds i8, i8* %pp.addr.7, i64 1
  %20 = load i8, i8* %arrayidx205, align 1, !tbaa !36
  %conv206 = zext i8 %20 to i32
  %shl207 = shl nuw nsw i32 %conv206, 8
  %arrayidx209 = getelementptr inbounds i8, i8* %pp.addr.7, i64 2
  %21 = load i8, i8* %arrayidx209, align 1, !tbaa !36
  %conv210 = zext i8 %21 to i32
  %shl211 = shl nuw nsw i32 %conv210, 16
  %or208 = or i32 %shl207, %conv204
  %or212 = or i32 %or208, %shl211
  %or213 = or i32 %or212, -16777216
  %incdec.ptr214 = getelementptr inbounds i32, i32* %cp.addr.7, i64 1
  store i32 %or213, i32* %cp.addr.7, align 4, !tbaa !38
  %add.ptr216 = getelementptr inbounds i8, i8* %pp.addr.7, i64 %idx.ext
  br label %if.end

if.end:                                           ; preds = %for.end, %sw.bb202
  %pp.addr.8 = phi i8* [ %add.ptr216, %sw.bb202 ], [ %pp.addr.1.lcssa, %for.end ]
  %cp.addr.8 = phi i32* [ %incdec.ptr214, %sw.bb202 ], [ %cp.addr.1.lcssa, %for.end ]
  %add.ptr218 = getelementptr inbounds i32, i32* %cp.addr.8, i64 %idx.ext217
  %add.ptr220 = getelementptr inbounds i8, i8* %pp.addr.8, i64 %idx.ext219
  %cmp.not = icmp eq i32 %dec327, 0
  br i1 %cmp.not, label %while.end.loopexit, label %for.cond.preheader, !llvm.loop !58

while.end.loopexit:                               ; preds = %if.end
  br label %while.end

while.end:                                        ; preds = %while.end.loopexit, %entry
  ret void

rolled.pre:                                       ; preds = %for.body
  %22 = alloca i8*, i8 8, align 8
  %23 = getelementptr i8*, i8** %22, i8 0
  store i8* %pp.addr.1318, i8** %23, align 8
  %24 = getelementptr i8*, i8** %22, i8 1
  store i8* %add.ptr, i8** %24, align 8
  %25 = getelementptr i8*, i8** %22, i8 2
  store i8* %add.ptr26, i8** %25, align 8
  %26 = getelementptr i8*, i8** %22, i8 3
  store i8* %add.ptr40, i8** %26, align 8
  %27 = getelementptr i8*, i8** %22, i8 4
  store i8* %add.ptr54, i8** %27, align 8
  %28 = getelementptr i8*, i8** %22, i8 5
  store i8* %add.ptr68, i8** %28, align 8
  %29 = getelementptr i8*, i8** %22, i8 6
  store i8* %add.ptr82, i8** %29, align 8
  %30 = getelementptr i8*, i8** %22, i8 7
  store i8* %add.ptr96, i8** %30, align 8
  br label %rolled.loop

rolled.loop:                                      ; preds = %rolled.pre, %rolled.loop
  %31 = phi i8 [ 0, %rolled.pre ], [ %50, %rolled.loop ]
  %32 = getelementptr i8*, i8** %22, i8 %31
  %33 = load i8*, i8** %32, align 8
  %34 = getelementptr inbounds i8, i8* %33, i64 1
  %35 = load i8, i8* %34, align 1
  %36 = zext i8 %35 to i32
  %37 = shl nuw nsw i32 %36, 8
  %38 = load i8, i8* %33, align 1
  %39 = zext i8 %38 to i32
  %40 = or i32 %37, %39
  %41 = getelementptr inbounds i8, i8* %33, i64 2
  %42 = load i8, i8* %41, align 1
  %43 = zext i8 %42 to i32
  %44 = shl nuw nsw i32 %43, 16
  %45 = or i32 %40, %44
  %46 = or i32 %45, -16777216
  %47 = zext i8 %31 to i64
  %48 = add i64 %47, 1
  %49 = getelementptr i32, i32* %cp.addr.1319, i64 %48
  store i32 %46, i32* %49, align 4
  %50 = add i8 %31, 1
  %51 = icmp ne i8 %50, 8
  br i1 %51, label %rolled.loop, label %rolled.exit

rolled.exit:                                      ; preds = %rolled.loop
  %52 = getelementptr inbounds i8, i8* %add.ptr96, i64 %idx.ext
  %53 = add i32 %_x.0320, -8
  %54 = icmp ugt i32 %53, 7
  br i1 %54, label %for.body, label %for.end.loopexit, !llvm.loop !59
}

code gen 1
destroying tree
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   %arrayidx = getelementptr inbounds i8, i8* %pp.addr.1797, i64 3
Here ..
Skipping:   %incdec.ptr = getelementptr inbounds i32, i32* %cp.addr.1798, i64 1
Skipping:   %add.ptr = getelementptr inbounds i8, i8* %pp.addr.1797, i64 %idx.ext
Here ..
Skipping:   %incdec.ptr66 = getelementptr inbounds i32, i32* %cp.addr.1798, i64 2
Skipping:   %add.ptr68 = getelementptr inbounds i8, i8* %add.ptr, i64 %idx.ext
Here ..
Skipping:   %incdec.ptr102 = getelementptr inbounds i32, i32* %cp.addr.1798, i64 3
Skipping:   %add.ptr104 = getelementptr inbounds i8, i8* %add.ptr68, i64 %idx.ext
Here ..
Skipping:   %incdec.ptr138 = getelementptr inbounds i32, i32* %cp.addr.1798, i64 4
Skipping:   %add.ptr140 = getelementptr inbounds i8, i8* %add.ptr104, i64 %idx.ext
Here ..
Skipping:   %incdec.ptr174 = getelementptr inbounds i32, i32* %cp.addr.1798, i64 5
Skipping:   %add.ptr176 = getelementptr inbounds i8, i8* %add.ptr140, i64 %idx.ext
Here ..
Skipping:   %incdec.ptr210 = getelementptr inbounds i32, i32* %cp.addr.1798, i64 6
Skipping:   %add.ptr212 = getelementptr inbounds i8, i8* %add.ptr176, i64 %idx.ext
Here ..
Skipping:   %incdec.ptr246 = getelementptr inbounds i32, i32* %cp.addr.1798, i64 7
Skipping:   %add.ptr248 = getelementptr inbounds i8, i8* %add.ptr212, i64 %idx.ext
Here ..
Skipping:   %incdec.ptr282 = getelementptr inbounds i32, i32* %cp.addr.1798, i64 8
Here ..
I:   %add.ptr284 = getelementptr inbounds i8, i8* %add.ptr248, i64 %idx.ext
Last:   %add.ptr284 = getelementptr inbounds i8, i8* %add.ptr248, i64 %idx.ext
Schedulable: 1
code gen 0
Gains: 191 - 45 = 146
Profitable: finishing code generation
; Function Attrs: nofree norecurse nounwind optsize uwtable
define internal void @putRGBcontig8bitCMYKtile(%struct._TIFFRGBAImage* nocapture readonly %img, i32* nocapture %cp, i32 %x, i32 %y, i32 %w, i32 %h, i32 %fromskew, i32 %toskew, i8* nocapture readonly %pp) #5 {
entry:
  %samplesperpixel1 = getelementptr inbounds %struct._TIFFRGBAImage, %struct._TIFFRGBAImage* %img, i64 0, i32 7
  %0 = load i16, i16* %samplesperpixel1, align 2, !tbaa !32
  %cmp.not803 = icmp eq i32 %h, 0
  br i1 %cmp.not803, label %while.end, label %for.cond.preheader.lr.ph

for.cond.preheader.lr.ph:                         ; preds = %entry
  %conv = zext i16 %0 to i32
  %mul = mul nsw i32 %conv, %fromskew
  %cmp3796 = icmp ugt i32 %w, 7
  %idx.ext = zext i16 %0 to i64
  %idx.ext546 = sext i32 %toskew to i64
  %idx.ext548 = sext i32 %mul to i64
  br label %for.cond.preheader

for.cond.preheader:                               ; preds = %for.cond.preheader.lr.ph, %if.end
  %dec806.in = phi i32 [ %h, %for.cond.preheader.lr.ph ], [ %dec806, %if.end ]
  %cp.addr.0805 = phi i32* [ %cp, %for.cond.preheader.lr.ph ], [ %add.ptr547, %if.end ]
  %pp.addr.0804 = phi i8* [ %pp, %for.cond.preheader.lr.ph ], [ %add.ptr549, %if.end ]
  %dec806 = add i32 %dec806.in, -1
  br i1 %cmp3796, label %for.body.preheader, label %for.end

for.body.preheader:                               ; preds = %for.cond.preheader
  br label %for.body

for.body:                                         ; preds = %for.body.preheader, %for.body
  %_x.0799 = phi i32 [ %sub285, %for.body ], [ %w, %for.body.preheader ]
  %cp.addr.1798 = phi i32* [ %incdec.ptr282, %for.body ], [ %cp.addr.0805, %for.body.preheader ]
  %pp.addr.1797 = phi i8* [ %add.ptr284, %for.body ], [ %pp.addr.0804, %for.body.preheader ]
  %arrayidx = getelementptr inbounds i8, i8* %pp.addr.1797, i64 3
  %1 = load i8, i8* %arrayidx, align 1, !tbaa !36
  %2 = xor i8 %1, -1
  %conv7 = zext i8 %2 to i32
  %3 = load i8, i8* %pp.addr.1797, align 1, !tbaa !36
  %4 = xor i8 %3, -1
  %sub10 = zext i8 %4 to i32
  %mul11 = mul nuw nsw i32 %sub10, %conv7
  %div.lhs.trunc = trunc i32 %mul11 to i16
  %div751 = udiv i16 %div.lhs.trunc, 255
  %div.zext = zext i16 %div751 to i32
  %arrayidx14 = getelementptr inbounds i8, i8* %pp.addr.1797, i64 1
  %5 = load i8, i8* %arrayidx14, align 1, !tbaa !36
  %6 = xor i8 %5, -1
  %sub16 = zext i8 %6 to i32
  %mul17 = mul nuw nsw i32 %sub16, %conv7
  %div18.lhs.trunc = trunc i32 %mul17 to i16
  %div18752 = udiv i16 %div18.lhs.trunc, 255
  %div18.zext = zext i16 %div18752 to i32
  %arrayidx21 = getelementptr inbounds i8, i8* %pp.addr.1797, i64 2
  %7 = load i8, i8* %arrayidx21, align 1, !tbaa !36
  %8 = xor i8 %7, -1
  %sub23 = zext i8 %8 to i32
  %mul24 = mul nuw nsw i32 %sub23, %conv7
  %div25.lhs.trunc = trunc i32 %mul24 to i16
  %div25753 = udiv i16 %div25.lhs.trunc, 255
  %div25.zext = zext i16 %div25753 to i32
  %shl = shl nuw nsw i32 %div18.zext, 8
  %shl30 = shl nuw nsw i32 %div25.zext, 16
  %or = or i32 %shl, %div.zext
  %or31 = or i32 %or, %shl30
  %or32 = or i32 %or31, -16777216
  %incdec.ptr = getelementptr inbounds i32, i32* %cp.addr.1798, i64 1
  store i32 %or32, i32* %cp.addr.1798, align 4, !tbaa !38
  %add.ptr = getelementptr inbounds i8, i8* %pp.addr.1797, i64 %idx.ext
  %arrayidx33 = getelementptr inbounds i8, i8* %add.ptr, i64 3
  %9 = load i8, i8* %arrayidx33, align 1, !tbaa !36
  %10 = xor i8 %9, -1
  %conv37 = zext i8 %10 to i32
  %11 = load i8, i8* %add.ptr, align 1, !tbaa !36
  %12 = xor i8 %11, -1
  %sub40 = zext i8 %12 to i32
  %mul41 = mul nuw nsw i32 %sub40, %conv37
  %div42.lhs.trunc = trunc i32 %mul41 to i16
  %div42754 = udiv i16 %div42.lhs.trunc, 255
  %div42.zext = zext i16 %div42754 to i32
  %arrayidx45 = getelementptr inbounds i8, i8* %add.ptr, i64 1
  %13 = load i8, i8* %arrayidx45, align 1, !tbaa !36
  %14 = xor i8 %13, -1
  %sub47 = zext i8 %14 to i32
  %mul48 = mul nuw nsw i32 %sub47, %conv37
  %div49.lhs.trunc = trunc i32 %mul48 to i16
  %div49755 = udiv i16 %div49.lhs.trunc, 255
  %div49.zext = zext i16 %div49755 to i32
  %arrayidx52 = getelementptr inbounds i8, i8* %add.ptr, i64 2
  %15 = load i8, i8* %arrayidx52, align 1, !tbaa !36
  %16 = xor i8 %15, -1
  %sub54 = zext i8 %16 to i32
  %mul55 = mul nuw nsw i32 %sub54, %conv37
  %div56.lhs.trunc = trunc i32 %mul55 to i16
  %div56756 = udiv i16 %div56.lhs.trunc, 255
  %div56.zext = zext i16 %div56756 to i32
  %shl60 = shl nuw nsw i32 %div49.zext, 8
  %shl63 = shl nuw nsw i32 %div56.zext, 16
  %or61 = or i32 %shl60, %div42.zext
  %or64 = or i32 %or61, %shl63
  %or65 = or i32 %or64, -16777216
  %incdec.ptr66 = getelementptr inbounds i32, i32* %cp.addr.1798, i64 2
  store i32 %or65, i32* %incdec.ptr, align 4, !tbaa !38
  %add.ptr68 = getelementptr inbounds i8, i8* %add.ptr, i64 %idx.ext
  %arrayidx69 = getelementptr inbounds i8, i8* %add.ptr68, i64 3
  %17 = load i8, i8* %arrayidx69, align 1, !tbaa !36
  %18 = xor i8 %17, -1
  %conv73 = zext i8 %18 to i32
  %19 = load i8, i8* %add.ptr68, align 1, !tbaa !36
  %20 = xor i8 %19, -1
  %sub76 = zext i8 %20 to i32
  %mul77 = mul nuw nsw i32 %sub76, %conv73
  %div78.lhs.trunc = trunc i32 %mul77 to i16
  %div78757 = udiv i16 %div78.lhs.trunc, 255
  %div78.zext = zext i16 %div78757 to i32
  %arrayidx81 = getelementptr inbounds i8, i8* %add.ptr68, i64 1
  %21 = load i8, i8* %arrayidx81, align 1, !tbaa !36
  %22 = xor i8 %21, -1
  %sub83 = zext i8 %22 to i32
  %mul84 = mul nuw nsw i32 %sub83, %conv73
  %div85.lhs.trunc = trunc i32 %mul84 to i16
  %div85758 = udiv i16 %div85.lhs.trunc, 255
  %div85.zext = zext i16 %div85758 to i32
  %arrayidx88 = getelementptr inbounds i8, i8* %add.ptr68, i64 2
  %23 = load i8, i8* %arrayidx88, align 1, !tbaa !36
  %24 = xor i8 %23, -1
  %sub90 = zext i8 %24 to i32
  %mul91 = mul nuw nsw i32 %sub90, %conv73
  %div92.lhs.trunc = trunc i32 %mul91 to i16
  %div92759 = udiv i16 %div92.lhs.trunc, 255
  %div92.zext = zext i16 %div92759 to i32
  %shl96 = shl nuw nsw i32 %div85.zext, 8
  %shl99 = shl nuw nsw i32 %div92.zext, 16
  %or97 = or i32 %shl96, %div78.zext
  %or100 = or i32 %or97, %shl99
  %or101 = or i32 %or100, -16777216
  %incdec.ptr102 = getelementptr inbounds i32, i32* %cp.addr.1798, i64 3
  store i32 %or101, i32* %incdec.ptr66, align 4, !tbaa !38
  %add.ptr104 = getelementptr inbounds i8, i8* %add.ptr68, i64 %idx.ext
  %arrayidx105 = getelementptr inbounds i8, i8* %add.ptr104, i64 3
  %25 = load i8, i8* %arrayidx105, align 1, !tbaa !36
  %26 = xor i8 %25, -1
  %conv109 = zext i8 %26 to i32
  %27 = load i8, i8* %add.ptr104, align 1, !tbaa !36
  %28 = xor i8 %27, -1
  %sub112 = zext i8 %28 to i32
  %mul113 = mul nuw nsw i32 %sub112, %conv109
  %div114.lhs.trunc = trunc i32 %mul113 to i16
  %div114760 = udiv i16 %div114.lhs.trunc, 255
  %div114.zext = zext i16 %div114760 to i32
  %arrayidx117 = getelementptr inbounds i8, i8* %add.ptr104, i64 1
  %29 = load i8, i8* %arrayidx117, align 1, !tbaa !36
  %30 = xor i8 %29, -1
  %sub119 = zext i8 %30 to i32
  %mul120 = mul nuw nsw i32 %sub119, %conv109
  %div121.lhs.trunc = trunc i32 %mul120 to i16
  %div121761 = udiv i16 %div121.lhs.trunc, 255
  %div121.zext = zext i16 %div121761 to i32
  %arrayidx124 = getelementptr inbounds i8, i8* %add.ptr104, i64 2
  %31 = load i8, i8* %arrayidx124, align 1, !tbaa !36
  %32 = xor i8 %31, -1
  %sub126 = zext i8 %32 to i32
  %mul127 = mul nuw nsw i32 %sub126, %conv109
  %div128.lhs.trunc = trunc i32 %mul127 to i16
  %div128762 = udiv i16 %div128.lhs.trunc, 255
  %div128.zext = zext i16 %div128762 to i32
  %shl132 = shl nuw nsw i32 %div121.zext, 8
  %shl135 = shl nuw nsw i32 %div128.zext, 16
  %or133 = or i32 %shl132, %div114.zext
  %or136 = or i32 %or133, %shl135
  %or137 = or i32 %or136, -16777216
  %incdec.ptr138 = getelementptr inbounds i32, i32* %cp.addr.1798, i64 4
  store i32 %or137, i32* %incdec.ptr102, align 4, !tbaa !38
  %add.ptr140 = getelementptr inbounds i8, i8* %add.ptr104, i64 %idx.ext
  %arrayidx141 = getelementptr inbounds i8, i8* %add.ptr140, i64 3
  %33 = load i8, i8* %arrayidx141, align 1, !tbaa !36
  %34 = xor i8 %33, -1
  %conv145 = zext i8 %34 to i32
  %35 = load i8, i8* %add.ptr140, align 1, !tbaa !36
  %36 = xor i8 %35, -1
  %sub148 = zext i8 %36 to i32
  %mul149 = mul nuw nsw i32 %sub148, %conv145
  %div150.lhs.trunc = trunc i32 %mul149 to i16
  %div150763 = udiv i16 %div150.lhs.trunc, 255
  %div150.zext = zext i16 %div150763 to i32
  %arrayidx153 = getelementptr inbounds i8, i8* %add.ptr140, i64 1
  %37 = load i8, i8* %arrayidx153, align 1, !tbaa !36
  %38 = xor i8 %37, -1
  %sub155 = zext i8 %38 to i32
  %mul156 = mul nuw nsw i32 %sub155, %conv145
  %div157.lhs.trunc = trunc i32 %mul156 to i16
  %div157764 = udiv i16 %div157.lhs.trunc, 255
  %div157.zext = zext i16 %div157764 to i32
  %arrayidx160 = getelementptr inbounds i8, i8* %add.ptr140, i64 2
  %39 = load i8, i8* %arrayidx160, align 1, !tbaa !36
  %40 = xor i8 %39, -1
  %sub162 = zext i8 %40 to i32
  %mul163 = mul nuw nsw i32 %sub162, %conv145
  %div164.lhs.trunc = trunc i32 %mul163 to i16
  %div164765 = udiv i16 %div164.lhs.trunc, 255
  %div164.zext = zext i16 %div164765 to i32
  %shl168 = shl nuw nsw i32 %div157.zext, 8
  %shl171 = shl nuw nsw i32 %div164.zext, 16
  %or169 = or i32 %shl168, %div150.zext
  %or172 = or i32 %or169, %shl171
  %or173 = or i32 %or172, -16777216
  %incdec.ptr174 = getelementptr inbounds i32, i32* %cp.addr.1798, i64 5
  store i32 %or173, i32* %incdec.ptr138, align 4, !tbaa !38
  %add.ptr176 = getelementptr inbounds i8, i8* %add.ptr140, i64 %idx.ext
  %arrayidx177 = getelementptr inbounds i8, i8* %add.ptr176, i64 3
  %41 = load i8, i8* %arrayidx177, align 1, !tbaa !36
  %42 = xor i8 %41, -1
  %conv181 = zext i8 %42 to i32
  %43 = load i8, i8* %add.ptr176, align 1, !tbaa !36
  %44 = xor i8 %43, -1
  %sub184 = zext i8 %44 to i32
  %mul185 = mul nuw nsw i32 %sub184, %conv181
  %div186.lhs.trunc = trunc i32 %mul185 to i16
  %div186766 = udiv i16 %div186.lhs.trunc, 255
  %div186.zext = zext i16 %div186766 to i32
  %arrayidx189 = getelementptr inbounds i8, i8* %add.ptr176, i64 1
  %45 = load i8, i8* %arrayidx189, align 1, !tbaa !36
  %46 = xor i8 %45, -1
  %sub191 = zext i8 %46 to i32
  %mul192 = mul nuw nsw i32 %sub191, %conv181
  %div193.lhs.trunc = trunc i32 %mul192 to i16
  %div193767 = udiv i16 %div193.lhs.trunc, 255
  %div193.zext = zext i16 %div193767 to i32
  %arrayidx196 = getelementptr inbounds i8, i8* %add.ptr176, i64 2
  %47 = load i8, i8* %arrayidx196, align 1, !tbaa !36
  %48 = xor i8 %47, -1
  %sub198 = zext i8 %48 to i32
  %mul199 = mul nuw nsw i32 %sub198, %conv181
  %div200.lhs.trunc = trunc i32 %mul199 to i16
  %div200768 = udiv i16 %div200.lhs.trunc, 255
  %div200.zext = zext i16 %div200768 to i32
  %shl204 = shl nuw nsw i32 %div193.zext, 8
  %shl207 = shl nuw nsw i32 %div200.zext, 16
  %or205 = or i32 %shl204, %div186.zext
  %or208 = or i32 %or205, %shl207
  %or209 = or i32 %or208, -16777216
  %incdec.ptr210 = getelementptr inbounds i32, i32* %cp.addr.1798, i64 6
  store i32 %or209, i32* %incdec.ptr174, align 4, !tbaa !38
  %add.ptr212 = getelementptr inbounds i8, i8* %add.ptr176, i64 %idx.ext
  %arrayidx213 = getelementptr inbounds i8, i8* %add.ptr212, i64 3
  %49 = load i8, i8* %arrayidx213, align 1, !tbaa !36
  %50 = xor i8 %49, -1
  %conv217 = zext i8 %50 to i32
  %51 = load i8, i8* %add.ptr212, align 1, !tbaa !36
  %52 = xor i8 %51, -1
  %sub220 = zext i8 %52 to i32
  %mul221 = mul nuw nsw i32 %sub220, %conv217
  %div222.lhs.trunc = trunc i32 %mul221 to i16
  %div222769 = udiv i16 %div222.lhs.trunc, 255
  %div222.zext = zext i16 %div222769 to i32
  %arrayidx225 = getelementptr inbounds i8, i8* %add.ptr212, i64 1
  %53 = load i8, i8* %arrayidx225, align 1, !tbaa !36
  %54 = xor i8 %53, -1
  %sub227 = zext i8 %54 to i32
  %mul228 = mul nuw nsw i32 %sub227, %conv217
  %div229.lhs.trunc = trunc i32 %mul228 to i16
  %div229770 = udiv i16 %div229.lhs.trunc, 255
  %div229.zext = zext i16 %div229770 to i32
  %arrayidx232 = getelementptr inbounds i8, i8* %add.ptr212, i64 2
  %55 = load i8, i8* %arrayidx232, align 1, !tbaa !36
  %56 = xor i8 %55, -1
  %sub234 = zext i8 %56 to i32
  %mul235 = mul nuw nsw i32 %sub234, %conv217
  %div236.lhs.trunc = trunc i32 %mul235 to i16
  %div236771 = udiv i16 %div236.lhs.trunc, 255
  %div236.zext = zext i16 %div236771 to i32
  %shl240 = shl nuw nsw i32 %div229.zext, 8
  %shl243 = shl nuw nsw i32 %div236.zext, 16
  %or241 = or i32 %shl240, %div222.zext
  %or244 = or i32 %or241, %shl243
  %or245 = or i32 %or244, -16777216
  %incdec.ptr246 = getelementptr inbounds i32, i32* %cp.addr.1798, i64 7
  store i32 %or245, i32* %incdec.ptr210, align 4, !tbaa !38
  %add.ptr248 = getelementptr inbounds i8, i8* %add.ptr212, i64 %idx.ext
  %arrayidx249 = getelementptr inbounds i8, i8* %add.ptr248, i64 3
  %57 = load i8, i8* %arrayidx249, align 1, !tbaa !36
  %58 = xor i8 %57, -1
  %conv253 = zext i8 %58 to i32
  %59 = load i8, i8* %add.ptr248, align 1, !tbaa !36
  %60 = xor i8 %59, -1
  %sub256 = zext i8 %60 to i32
  %mul257 = mul nuw nsw i32 %sub256, %conv253
  %div258.lhs.trunc = trunc i32 %mul257 to i16
  %div258772 = udiv i16 %div258.lhs.trunc, 255
  %div258.zext = zext i16 %div258772 to i32
  %arrayidx261 = getelementptr inbounds i8, i8* %add.ptr248, i64 1
  %61 = load i8, i8* %arrayidx261, align 1, !tbaa !36
  %62 = xor i8 %61, -1
  %sub263 = zext i8 %62 to i32
  %mul264 = mul nuw nsw i32 %sub263, %conv253
  %div265.lhs.trunc = trunc i32 %mul264 to i16
  %div265773 = udiv i16 %div265.lhs.trunc, 255
  %div265.zext = zext i16 %div265773 to i32
  %arrayidx268 = getelementptr inbounds i8, i8* %add.ptr248, i64 2
  %63 = load i8, i8* %arrayidx268, align 1, !tbaa !36
  %64 = xor i8 %63, -1
  %sub270 = zext i8 %64 to i32
  %mul271 = mul nuw nsw i32 %sub270, %conv253
  %div272.lhs.trunc = trunc i32 %mul271 to i16
  %div272774 = udiv i16 %div272.lhs.trunc, 255
  %div272.zext = zext i16 %div272774 to i32
  %shl276 = shl nuw nsw i32 %div265.zext, 8
  %shl279 = shl nuw nsw i32 %div272.zext, 16
  %or277 = or i32 %shl276, %div258.zext
  %or280 = or i32 %or277, %shl279
  %or281 = or i32 %or280, -16777216
  %incdec.ptr282 = getelementptr inbounds i32, i32* %cp.addr.1798, i64 8
  store i32 %or281, i32* %incdec.ptr246, align 4, !tbaa !38
  %add.ptr284 = getelementptr inbounds i8, i8* %add.ptr248, i64 %idx.ext
  %sub285 = add i32 %_x.0799, -8
  %cmp3 = icmp ugt i32 %sub285, 7
  br i1 %cmp3, label %for.body, label %for.end.loopexit, !llvm.loop !68

for.end.loopexit:                                 ; preds = %for.body
  %incdec.ptr282.lcssa = phi i32* [ %incdec.ptr282, %for.body ]
  %add.ptr284.lcssa = phi i8* [ %add.ptr284, %for.body ]
  %sub285.lcssa = phi i32 [ %sub285, %for.body ]
  br label %for.end

for.end:                                          ; preds = %for.end.loopexit, %for.cond.preheader
  %pp.addr.1.lcssa = phi i8* [ %pp.addr.0804, %for.cond.preheader ], [ %add.ptr284.lcssa, %for.end.loopexit ]
  %cp.addr.1.lcssa = phi i32* [ %cp.addr.0805, %for.cond.preheader ], [ %incdec.ptr282.lcssa, %for.end.loopexit ]
  %_x.0.lcssa = phi i32 [ %w, %for.cond.preheader ], [ %sub285.lcssa, %for.end.loopexit ]
  switch i32 %_x.0.lcssa, label %if.end [
    i32 1, label %sw.bb509
    i32 7, label %sw.bb
    i32 6, label %sw.bb324
    i32 5, label %sw.bb361
    i32 4, label %sw.bb398
    i32 3, label %sw.bb435
    i32 2, label %sw.bb472
  ]

sw.bb:                                            ; preds = %for.end
  %arrayidx288 = getelementptr inbounds i8, i8* %pp.addr.1.lcssa, i64 3
  %65 = load i8, i8* %arrayidx288, align 1, !tbaa !36
  %66 = xor i8 %65, -1
  %conv292 = zext i8 %66 to i32
  %67 = load i8, i8* %pp.addr.1.lcssa, align 1, !tbaa !36
  %68 = xor i8 %67, -1
  %sub295 = zext i8 %68 to i32
  %mul296 = mul nuw nsw i32 %sub295, %conv292
  %div297.lhs.trunc = trunc i32 %mul296 to i16
  %div297778 = udiv i16 %div297.lhs.trunc, 255
  %div297.zext = zext i16 %div297778 to i32
  %arrayidx300 = getelementptr inbounds i8, i8* %pp.addr.1.lcssa, i64 1
  %69 = load i8, i8* %arrayidx300, align 1, !tbaa !36
  %70 = xor i8 %69, -1
  %sub302 = zext i8 %70 to i32
  %mul303 = mul nuw nsw i32 %sub302, %conv292
  %div304.lhs.trunc = trunc i32 %mul303 to i16
  %div304779 = udiv i16 %div304.lhs.trunc, 255
  %div304.zext = zext i16 %div304779 to i32
  %arrayidx307 = getelementptr inbounds i8, i8* %pp.addr.1.lcssa, i64 2
  %71 = load i8, i8* %arrayidx307, align 1, !tbaa !36
  %72 = xor i8 %71, -1
  %sub309 = zext i8 %72 to i32
  %mul310 = mul nuw nsw i32 %sub309, %conv292
  %div311.lhs.trunc = trunc i32 %mul310 to i16
  %div311780 = udiv i16 %div311.lhs.trunc, 255
  %div311.zext = zext i16 %div311780 to i32
  %shl315 = shl nuw nsw i32 %div304.zext, 8
  %shl318 = shl nuw nsw i32 %div311.zext, 16
  %or316 = or i32 %shl315, %div297.zext
  %or319 = or i32 %or316, %shl318
  %or320 = or i32 %or319, -16777216
  %incdec.ptr321 = getelementptr inbounds i32, i32* %cp.addr.1.lcssa, i64 1
  store i32 %or320, i32* %cp.addr.1.lcssa, align 4, !tbaa !38
  %add.ptr323 = getelementptr inbounds i8, i8* %pp.addr.1.lcssa, i64 %idx.ext
  br label %sw.bb324

sw.bb324:                                         ; preds = %for.end, %sw.bb
  %pp.addr.2 = phi i8* [ %add.ptr323, %sw.bb ], [ %pp.addr.1.lcssa, %for.end ]
  %cp.addr.2 = phi i32* [ %incdec.ptr321, %sw.bb ], [ %cp.addr.1.lcssa, %for.end ]
  %arrayidx325 = getelementptr inbounds i8, i8* %pp.addr.2, i64 3
  %73 = load i8, i8* %arrayidx325, align 1, !tbaa !36
  %74 = xor i8 %73, -1
  %conv329 = zext i8 %74 to i32
  %75 = load i8, i8* %pp.addr.2, align 1, !tbaa !36
  %76 = xor i8 %75, -1
  %sub332 = zext i8 %76 to i32
  %mul333 = mul nuw nsw i32 %sub332, %conv329
  %div334.lhs.trunc = trunc i32 %mul333 to i16
  %div334781 = udiv i16 %div334.lhs.trunc, 255
  %div334.zext = zext i16 %div334781 to i32
  %arrayidx337 = getelementptr inbounds i8, i8* %pp.addr.2, i64 1
  %77 = load i8, i8* %arrayidx337, align 1, !tbaa !36
  %78 = xor i8 %77, -1
  %sub339 = zext i8 %78 to i32
  %mul340 = mul nuw nsw i32 %sub339, %conv329
  %div341.lhs.trunc = trunc i32 %mul340 to i16
  %div341782 = udiv i16 %div341.lhs.trunc, 255
  %div341.zext = zext i16 %div341782 to i32
  %arrayidx344 = getelementptr inbounds i8, i8* %pp.addr.2, i64 2
  %79 = load i8, i8* %arrayidx344, align 1, !tbaa !36
  %80 = xor i8 %79, -1
  %sub346 = zext i8 %80 to i32
  %mul347 = mul nuw nsw i32 %sub346, %conv329
  %div348.lhs.trunc = trunc i32 %mul347 to i16
  %div348783 = udiv i16 %div348.lhs.trunc, 255
  %div348.zext = zext i16 %div348783 to i32
  %shl352 = shl nuw nsw i32 %div341.zext, 8
  %shl355 = shl nuw nsw i32 %div348.zext, 16
  %or353 = or i32 %shl352, %div334.zext
  %or356 = or i32 %or353, %shl355
  %or357 = or i32 %or356, -16777216
  %incdec.ptr358 = getelementptr inbounds i32, i32* %cp.addr.2, i64 1
  store i32 %or357, i32* %cp.addr.2, align 4, !tbaa !38
  %add.ptr360 = getelementptr inbounds i8, i8* %pp.addr.2, i64 %idx.ext
  br label %sw.bb361

sw.bb361:                                         ; preds = %for.end, %sw.bb324
  %pp.addr.3 = phi i8* [ %add.ptr360, %sw.bb324 ], [ %pp.addr.1.lcssa, %for.end ]
  %cp.addr.3 = phi i32* [ %incdec.ptr358, %sw.bb324 ], [ %cp.addr.1.lcssa, %for.end ]
  %arrayidx362 = getelementptr inbounds i8, i8* %pp.addr.3, i64 3
  %81 = load i8, i8* %arrayidx362, align 1, !tbaa !36
  %82 = xor i8 %81, -1
  %conv366 = zext i8 %82 to i32
  %83 = load i8, i8* %pp.addr.3, align 1, !tbaa !36
  %84 = xor i8 %83, -1
  %sub369 = zext i8 %84 to i32
  %mul370 = mul nuw nsw i32 %sub369, %conv366
  %div371.lhs.trunc = trunc i32 %mul370 to i16
  %div371784 = udiv i16 %div371.lhs.trunc, 255
  %div371.zext = zext i16 %div371784 to i32
  %arrayidx374 = getelementptr inbounds i8, i8* %pp.addr.3, i64 1
  %85 = load i8, i8* %arrayidx374, align 1, !tbaa !36
  %86 = xor i8 %85, -1
  %sub376 = zext i8 %86 to i32
  %mul377 = mul nuw nsw i32 %sub376, %conv366
  %div378.lhs.trunc = trunc i32 %mul377 to i16
  %div378785 = udiv i16 %div378.lhs.trunc, 255
  %div378.zext = zext i16 %div378785 to i32
  %arrayidx381 = getelementptr inbounds i8, i8* %pp.addr.3, i64 2
  %87 = load i8, i8* %arrayidx381, align 1, !tbaa !36
  %88 = xor i8 %87, -1
  %sub383 = zext i8 %88 to i32
  %mul384 = mul nuw nsw i32 %sub383, %conv366
  %div385.lhs.trunc = trunc i32 %mul384 to i16
  %div385786 = udiv i16 %div385.lhs.trunc, 255
  %div385.zext = zext i16 %div385786 to i32
  %shl389 = shl nuw nsw i32 %div378.zext, 8
  %shl392 = shl nuw nsw i32 %div385.zext, 16
  %or390 = or i32 %shl389, %div371.zext
  %or393 = or i32 %or390, %shl392
  %or394 = or i32 %or393, -16777216
  %incdec.ptr395 = getelementptr inbounds i32, i32* %cp.addr.3, i64 1
  store i32 %or394, i32* %cp.addr.3, align 4, !tbaa !38
  %add.ptr397 = getelementptr inbounds i8, i8* %pp.addr.3, i64 %idx.ext
  br label %sw.bb398

sw.bb398:                                         ; preds = %for.end, %sw.bb361
  %pp.addr.4 = phi i8* [ %add.ptr397, %sw.bb361 ], [ %pp.addr.1.lcssa, %for.end ]
  %cp.addr.4 = phi i32* [ %incdec.ptr395, %sw.bb361 ], [ %cp.addr.1.lcssa, %for.end ]
  %arrayidx399 = getelementptr inbounds i8, i8* %pp.addr.4, i64 3
  %89 = load i8, i8* %arrayidx399, align 1, !tbaa !36
  %90 = xor i8 %89, -1
  %conv403 = zext i8 %90 to i32
  %91 = load i8, i8* %pp.addr.4, align 1, !tbaa !36
  %92 = xor i8 %91, -1
  %sub406 = zext i8 %92 to i32
  %mul407 = mul nuw nsw i32 %sub406, %conv403
  %div408.lhs.trunc = trunc i32 %mul407 to i16
  %div408787 = udiv i16 %div408.lhs.trunc, 255
  %div408.zext = zext i16 %div408787 to i32
  %arrayidx411 = getelementptr inbounds i8, i8* %pp.addr.4, i64 1
  %93 = load i8, i8* %arrayidx411, align 1, !tbaa !36
  %94 = xor i8 %93, -1
  %sub413 = zext i8 %94 to i32
  %mul414 = mul nuw nsw i32 %sub413, %conv403
  %div415.lhs.trunc = trunc i32 %mul414 to i16
  %div415788 = udiv i16 %div415.lhs.trunc, 255
  %div415.zext = zext i16 %div415788 to i32
  %arrayidx418 = getelementptr inbounds i8, i8* %pp.addr.4, i64 2
  %95 = load i8, i8* %arrayidx418, align 1, !tbaa !36
  %96 = xor i8 %95, -1
  %sub420 = zext i8 %96 to i32
  %mul421 = mul nuw nsw i32 %sub420, %conv403
  %div422.lhs.trunc = trunc i32 %mul421 to i16
  %div422789 = udiv i16 %div422.lhs.trunc, 255
  %div422.zext = zext i16 %div422789 to i32
  %shl426 = shl nuw nsw i32 %div415.zext, 8
  %shl429 = shl nuw nsw i32 %div422.zext, 16
  %or427 = or i32 %shl426, %div408.zext
  %or430 = or i32 %or427, %shl429
  %or431 = or i32 %or430, -16777216
  %incdec.ptr432 = getelementptr inbounds i32, i32* %cp.addr.4, i64 1
  store i32 %or431, i32* %cp.addr.4, align 4, !tbaa !38
  %add.ptr434 = getelementptr inbounds i8, i8* %pp.addr.4, i64 %idx.ext
  br label %sw.bb435

sw.bb435:                                         ; preds = %for.end, %sw.bb398
  %pp.addr.5 = phi i8* [ %add.ptr434, %sw.bb398 ], [ %pp.addr.1.lcssa, %for.end ]
  %cp.addr.5 = phi i32* [ %incdec.ptr432, %sw.bb398 ], [ %cp.addr.1.lcssa, %for.end ]
  %arrayidx436 = getelementptr inbounds i8, i8* %pp.addr.5, i64 3
  %97 = load i8, i8* %arrayidx436, align 1, !tbaa !36
  %98 = xor i8 %97, -1
  %conv440 = zext i8 %98 to i32
  %99 = load i8, i8* %pp.addr.5, align 1, !tbaa !36
  %100 = xor i8 %99, -1
  %sub443 = zext i8 %100 to i32
  %mul444 = mul nuw nsw i32 %sub443, %conv440
  %div445.lhs.trunc = trunc i32 %mul444 to i16
  %div445790 = udiv i16 %div445.lhs.trunc, 255
  %div445.zext = zext i16 %div445790 to i32
  %arrayidx448 = getelementptr inbounds i8, i8* %pp.addr.5, i64 1
  %101 = load i8, i8* %arrayidx448, align 1, !tbaa !36
  %102 = xor i8 %101, -1
  %sub450 = zext i8 %102 to i32
  %mul451 = mul nuw nsw i32 %sub450, %conv440
  %div452.lhs.trunc = trunc i32 %mul451 to i16
  %div452791 = udiv i16 %div452.lhs.trunc, 255
  %div452.zext = zext i16 %div452791 to i32
  %arrayidx455 = getelementptr inbounds i8, i8* %pp.addr.5, i64 2
  %103 = load i8, i8* %arrayidx455, align 1, !tbaa !36
  %104 = xor i8 %103, -1
  %sub457 = zext i8 %104 to i32
  %mul458 = mul nuw nsw i32 %sub457, %conv440
  %div459.lhs.trunc = trunc i32 %mul458 to i16
  %div459792 = udiv i16 %div459.lhs.trunc, 255
  %div459.zext = zext i16 %div459792 to i32
  %shl463 = shl nuw nsw i32 %div452.zext, 8
  %shl466 = shl nuw nsw i32 %div459.zext, 16
  %or464 = or i32 %shl463, %div445.zext
  %or467 = or i32 %or464, %shl466
  %or468 = or i32 %or467, -16777216
  %incdec.ptr469 = getelementptr inbounds i32, i32* %cp.addr.5, i64 1
  store i32 %or468, i32* %cp.addr.5, align 4, !tbaa !38
  %add.ptr471 = getelementptr inbounds i8, i8* %pp.addr.5, i64 %idx.ext
  br label %sw.bb472

sw.bb472:                                         ; preds = %for.end, %sw.bb435
  %pp.addr.6 = phi i8* [ %add.ptr471, %sw.bb435 ], [ %pp.addr.1.lcssa, %for.end ]
  %cp.addr.6 = phi i32* [ %incdec.ptr469, %sw.bb435 ], [ %cp.addr.1.lcssa, %for.end ]
  %arrayidx473 = getelementptr inbounds i8, i8* %pp.addr.6, i64 3
  %105 = load i8, i8* %arrayidx473, align 1, !tbaa !36
  %106 = xor i8 %105, -1
  %conv477 = zext i8 %106 to i32
  %107 = load i8, i8* %pp.addr.6, align 1, !tbaa !36
  %108 = xor i8 %107, -1
  %sub480 = zext i8 %108 to i32
  %mul481 = mul nuw nsw i32 %sub480, %conv477
  %div482.lhs.trunc = trunc i32 %mul481 to i16
  %div482793 = udiv i16 %div482.lhs.trunc, 255
  %div482.zext = zext i16 %div482793 to i32
  %arrayidx485 = getelementptr inbounds i8, i8* %pp.addr.6, i64 1
  %109 = load i8, i8* %arrayidx485, align 1, !tbaa !36
  %110 = xor i8 %109, -1
  %sub487 = zext i8 %110 to i32
  %mul488 = mul nuw nsw i32 %sub487, %conv477
  %div489.lhs.trunc = trunc i32 %mul488 to i16
  %div489794 = udiv i16 %div489.lhs.trunc, 255
  %div489.zext = zext i16 %div489794 to i32
  %arrayidx492 = getelementptr inbounds i8, i8* %pp.addr.6, i64 2
  %111 = load i8, i8* %arrayidx492, align 1, !tbaa !36
  %112 = xor i8 %111, -1
  %sub494 = zext i8 %112 to i32
  %mul495 = mul nuw nsw i32 %sub494, %conv477
  %div496.lhs.trunc = trunc i32 %mul495 to i16
  %div496795 = udiv i16 %div496.lhs.trunc, 255
  %div496.zext = zext i16 %div496795 to i32
  %shl500 = shl nuw nsw i32 %div489.zext, 8
  %shl503 = shl nuw nsw i32 %div496.zext, 16
  %or501 = or i32 %shl500, %div482.zext
  %or504 = or i32 %or501, %shl503
  %or505 = or i32 %or504, -16777216
  %incdec.ptr506 = getelementptr inbounds i32, i32* %cp.addr.6, i64 1
  store i32 %or505, i32* %cp.addr.6, align 4, !tbaa !38
  %add.ptr508 = getelementptr inbounds i8, i8* %pp.addr.6, i64 %idx.ext
  br label %sw.bb509

sw.bb509:                                         ; preds = %for.end, %sw.bb472
  %pp.addr.7 = phi i8* [ %add.ptr508, %sw.bb472 ], [ %pp.addr.1.lcssa, %for.end ]
  %cp.addr.7 = phi i32* [ %incdec.ptr506, %sw.bb472 ], [ %cp.addr.1.lcssa, %for.end ]
  %arrayidx510 = getelementptr inbounds i8, i8* %pp.addr.7, i64 3
  %113 = load i8, i8* %arrayidx510, align 1, !tbaa !36
  %114 = xor i8 %113, -1
  %conv514 = zext i8 %114 to i32
  %115 = load i8, i8* %pp.addr.7, align 1, !tbaa !36
  %116 = xor i8 %115, -1
  %sub517 = zext i8 %116 to i32
  %mul518 = mul nuw nsw i32 %sub517, %conv514
  %div519.lhs.trunc = trunc i32 %mul518 to i16
  %div519775 = udiv i16 %div519.lhs.trunc, 255
  %div519.zext = zext i16 %div519775 to i32
  %arrayidx522 = getelementptr inbounds i8, i8* %pp.addr.7, i64 1
  %117 = load i8, i8* %arrayidx522, align 1, !tbaa !36
  %118 = xor i8 %117, -1
  %sub524 = zext i8 %118 to i32
  %mul525 = mul nuw nsw i32 %sub524, %conv514
  %div526.lhs.trunc = trunc i32 %mul525 to i16
  %div526776 = udiv i16 %div526.lhs.trunc, 255
  %div526.zext = zext i16 %div526776 to i32
  %arrayidx529 = getelementptr inbounds i8, i8* %pp.addr.7, i64 2
  %119 = load i8, i8* %arrayidx529, align 1, !tbaa !36
  %120 = xor i8 %119, -1
  %sub531 = zext i8 %120 to i32
  %mul532 = mul nuw nsw i32 %sub531, %conv514
  %div533.lhs.trunc = trunc i32 %mul532 to i16
  %div533777 = udiv i16 %div533.lhs.trunc, 255
  %div533.zext = zext i16 %div533777 to i32
  %shl537 = shl nuw nsw i32 %div526.zext, 8
  %shl540 = shl nuw nsw i32 %div533.zext, 16
  %or538 = or i32 %shl537, %div519.zext
  %or541 = or i32 %or538, %shl540
  %or542 = or i32 %or541, -16777216
  %incdec.ptr543 = getelementptr inbounds i32, i32* %cp.addr.7, i64 1
  store i32 %or542, i32* %cp.addr.7, align 4, !tbaa !38
  %add.ptr545 = getelementptr inbounds i8, i8* %pp.addr.7, i64 %idx.ext
  br label %if.end

if.end:                                           ; preds = %for.end, %sw.bb509
  %pp.addr.8 = phi i8* [ %add.ptr545, %sw.bb509 ], [ %pp.addr.1.lcssa, %for.end ]
  %cp.addr.8 = phi i32* [ %incdec.ptr543, %sw.bb509 ], [ %cp.addr.1.lcssa, %for.end ]
  %add.ptr547 = getelementptr inbounds i32, i32* %cp.addr.8, i64 %idx.ext546
  %add.ptr549 = getelementptr inbounds i8, i8* %pp.addr.8, i64 %idx.ext548
  %cmp.not = icmp eq i32 %dec806, 0
  br i1 %cmp.not, label %while.end.loopexit, label %for.cond.preheader, !llvm.loop !69

while.end.loopexit:                               ; preds = %if.end
  br label %while.end

while.end:                                        ; preds = %while.end.loopexit, %entry
  ret void

rolled.pre:                                       ; No predecessors!
  %121 = alloca i8*, i8 8, align 8
  %122 = getelementptr i8*, i8** %121, i8 0
  store i8* %pp.addr.1797, i8** %122, align 8
  %123 = getelementptr i8*, i8** %121, i8 1
  store i8* %add.ptr, i8** %123, align 8
  %124 = getelementptr i8*, i8** %121, i8 2
  store i8* %add.ptr68, i8** %124, align 8
  %125 = getelementptr i8*, i8** %121, i8 3
  store i8* %add.ptr104, i8** %125, align 8
  %126 = getelementptr i8*, i8** %121, i8 4
  store i8* %add.ptr140, i8** %126, align 8
  %127 = getelementptr i8*, i8** %121, i8 5
  store i8* %add.ptr176, i8** %127, align 8
  %128 = getelementptr i8*, i8** %121, i8 6
  store i8* %add.ptr212, i8** %128, align 8
  %129 = getelementptr i8*, i8** %121, i8 7
  store i8* %add.ptr248, i8** %129, align 8

rolled.loop:                                      ; No predecessors!
  %130 = phi i8 
  %131 = getelementptr i8*, i8** %121, i8 %130
  %132 = load i8*, i8** %131, align 8
  %133 = getelementptr inbounds i8, i8* %132, i64 1
  %134 = load i8, i8* %133, align 1
  %135 = xor i8 %134, -1
  %136 = zext i8 %135 to i32
  %137 = getelementptr inbounds i8, i8* %132, i64 3
  %138 = load i8, i8* %137, align 1
  %139 = xor i8 %138, -1
  %140 = zext i8 %139 to i32
  %141 = mul nuw nsw i32 %136, %140
  %142 = trunc i32 %141 to i16
  %143 = udiv i16 %142, 255
  %144 = zext i16 %143 to i32
  %145 = shl nuw nsw i32 %144, 8
  %146 = load i8, i8* %132, align 1
  %147 = xor i8 %146, -1
  %148 = zext i8 %147 to i32
  %149 = mul nuw nsw i32 %148, %140
  %150 = trunc i32 %149 to i16
  %151 = udiv i16 %150, 255
  %152 = zext i16 %151 to i32
  %153 = or i32 %145, %152
  %154 = getelementptr inbounds i8, i8* %132, i64 2
  %155 = load i8, i8* %154, align 1
  %156 = xor i8 %155, -1
  %157 = zext i8 %156 to i32
  %158 = mul nuw nsw i32 %157, %140
  %159 = trunc i32 %158 to i16
  %160 = udiv i16 %159, 255
  %161 = zext i16 %160 to i32
  %162 = shl nuw nsw i32 %161, 16
  %163 = or i32 %153, %162
  %164 = or i32 %163, -16777216
  %165 = zext i8 %130 to i64
  %166 = add i64 %165, 1
  %167 = getelementptr i32, i32* %cp.addr.1798, i64 %166
  store i32 %164, i32* %167, align 4
  %168 = add i8 %130, 1
  %169 = icmp ne i8 %168, 8

rolled.exit:                                      ; No predecessors!
}

Done!
; Function Attrs: nofree norecurse nounwind optsize uwtable
define internal void @putRGBcontig8bitCMYKtile(%struct._TIFFRGBAImage* nocapture readonly %img, i32* nocapture %cp, i32 %x, i32 %y, i32 %w, i32 %h, i32 %fromskew, i32 %toskew, i8* nocapture readonly %pp) #5 {
entry:
  %samplesperpixel1 = getelementptr inbounds %struct._TIFFRGBAImage, %struct._TIFFRGBAImage* %img, i64 0, i32 7
  %0 = load i16, i16* %samplesperpixel1, align 2, !tbaa !32
  %cmp.not803 = icmp eq i32 %h, 0
  br i1 %cmp.not803, label %while.end, label %for.cond.preheader.lr.ph

for.cond.preheader.lr.ph:                         ; preds = %entry
  %conv = zext i16 %0 to i32
  %mul = mul nsw i32 %conv, %fromskew
  %cmp3796 = icmp ugt i32 %w, 7
  %idx.ext = zext i16 %0 to i64
  %idx.ext546 = sext i32 %toskew to i64
  %idx.ext548 = sext i32 %mul to i64
  br label %for.cond.preheader

for.cond.preheader:                               ; preds = %for.cond.preheader.lr.ph, %if.end
  %dec806.in = phi i32 [ %h, %for.cond.preheader.lr.ph ], [ %dec806, %if.end ]
  %cp.addr.0805 = phi i32* [ %cp, %for.cond.preheader.lr.ph ], [ %add.ptr547, %if.end ]
  %pp.addr.0804 = phi i8* [ %pp, %for.cond.preheader.lr.ph ], [ %add.ptr549, %if.end ]
  %dec806 = add i32 %dec806.in, -1
  br i1 %cmp3796, label %for.body.preheader, label %for.end

for.body.preheader:                               ; preds = %for.cond.preheader
  br label %for.body

for.body:                                         ; preds = %for.body.preheader, %rolled.exit
  %_x.0799 = phi i32 [ %107, %rolled.exit ], [ %w, %for.body.preheader ]
  %cp.addr.1798 = phi i32* [ %incdec.ptr282, %rolled.exit ], [ %cp.addr.0805, %for.body.preheader ]
  %pp.addr.1797 = phi i8* [ %106, %rolled.exit ], [ %pp.addr.0804, %for.body.preheader ]
  %add.ptr = getelementptr inbounds i8, i8* %pp.addr.1797, i64 %idx.ext
  %add.ptr68 = getelementptr inbounds i8, i8* %add.ptr, i64 %idx.ext
  %add.ptr104 = getelementptr inbounds i8, i8* %add.ptr68, i64 %idx.ext
  %add.ptr140 = getelementptr inbounds i8, i8* %add.ptr104, i64 %idx.ext
  %add.ptr176 = getelementptr inbounds i8, i8* %add.ptr140, i64 %idx.ext
  %add.ptr212 = getelementptr inbounds i8, i8* %add.ptr176, i64 %idx.ext
  %add.ptr248 = getelementptr inbounds i8, i8* %add.ptr212, i64 %idx.ext
  %incdec.ptr282 = getelementptr inbounds i32, i32* %cp.addr.1798, i64 8
  br label %rolled.pre

for.end.loopexit:                                 ; preds = %rolled.exit
  %incdec.ptr282.lcssa = phi i32* [ %incdec.ptr282, %rolled.exit ]
  %add.ptr284.lcssa = phi i8* [ %106, %rolled.exit ]
  %sub285.lcssa = phi i32 [ %107, %rolled.exit ]
  br label %for.end

for.end:                                          ; preds = %for.end.loopexit, %for.cond.preheader
  %pp.addr.1.lcssa = phi i8* [ %pp.addr.0804, %for.cond.preheader ], [ %add.ptr284.lcssa, %for.end.loopexit ]
  %cp.addr.1.lcssa = phi i32* [ %cp.addr.0805, %for.cond.preheader ], [ %incdec.ptr282.lcssa, %for.end.loopexit ]
  %_x.0.lcssa = phi i32 [ %w, %for.cond.preheader ], [ %sub285.lcssa, %for.end.loopexit ]
  switch i32 %_x.0.lcssa, label %if.end [
    i32 1, label %sw.bb509
    i32 7, label %sw.bb
    i32 6, label %sw.bb324
    i32 5, label %sw.bb361
    i32 4, label %sw.bb398
    i32 3, label %sw.bb435
    i32 2, label %sw.bb472
  ]

sw.bb:                                            ; preds = %for.end
  %arrayidx288 = getelementptr inbounds i8, i8* %pp.addr.1.lcssa, i64 3
  %1 = load i8, i8* %arrayidx288, align 1, !tbaa !36
  %2 = xor i8 %1, -1
  %conv292 = zext i8 %2 to i32
  %3 = load i8, i8* %pp.addr.1.lcssa, align 1, !tbaa !36
  %4 = xor i8 %3, -1
  %sub295 = zext i8 %4 to i32
  %mul296 = mul nuw nsw i32 %sub295, %conv292
  %div297.lhs.trunc = trunc i32 %mul296 to i16
  %div297778 = udiv i16 %div297.lhs.trunc, 255
  %div297.zext = zext i16 %div297778 to i32
  %arrayidx300 = getelementptr inbounds i8, i8* %pp.addr.1.lcssa, i64 1
  %5 = load i8, i8* %arrayidx300, align 1, !tbaa !36
  %6 = xor i8 %5, -1
  %sub302 = zext i8 %6 to i32
  %mul303 = mul nuw nsw i32 %sub302, %conv292
  %div304.lhs.trunc = trunc i32 %mul303 to i16
  %div304779 = udiv i16 %div304.lhs.trunc, 255
  %div304.zext = zext i16 %div304779 to i32
  %arrayidx307 = getelementptr inbounds i8, i8* %pp.addr.1.lcssa, i64 2
  %7 = load i8, i8* %arrayidx307, align 1, !tbaa !36
  %8 = xor i8 %7, -1
  %sub309 = zext i8 %8 to i32
  %mul310 = mul nuw nsw i32 %sub309, %conv292
  %div311.lhs.trunc = trunc i32 %mul310 to i16
  %div311780 = udiv i16 %div311.lhs.trunc, 255
  %div311.zext = zext i16 %div311780 to i32
  %shl315 = shl nuw nsw i32 %div304.zext, 8
  %shl318 = shl nuw nsw i32 %div311.zext, 16
  %or316 = or i32 %shl315, %div297.zext
  %or319 = or i32 %or316, %shl318
  %or320 = or i32 %or319, -16777216
  %incdec.ptr321 = getelementptr inbounds i32, i32* %cp.addr.1.lcssa, i64 1
  store i32 %or320, i32* %cp.addr.1.lcssa, align 4, !tbaa !38
  %add.ptr323 = getelementptr inbounds i8, i8* %pp.addr.1.lcssa, i64 %idx.ext
  br label %sw.bb324

sw.bb324:                                         ; preds = %for.end, %sw.bb
  %pp.addr.2 = phi i8* [ %add.ptr323, %sw.bb ], [ %pp.addr.1.lcssa, %for.end ]
  %cp.addr.2 = phi i32* [ %incdec.ptr321, %sw.bb ], [ %cp.addr.1.lcssa, %for.end ]
  %arrayidx325 = getelementptr inbounds i8, i8* %pp.addr.2, i64 3
  %9 = load i8, i8* %arrayidx325, align 1, !tbaa !36
  %10 = xor i8 %9, -1
  %conv329 = zext i8 %10 to i32
  %11 = load i8, i8* %pp.addr.2, align 1, !tbaa !36
  %12 = xor i8 %11, -1
  %sub332 = zext i8 %12 to i32
  %mul333 = mul nuw nsw i32 %sub332, %conv329
  %div334.lhs.trunc = trunc i32 %mul333 to i16
  %div334781 = udiv i16 %div334.lhs.trunc, 255
  %div334.zext = zext i16 %div334781 to i32
  %arrayidx337 = getelementptr inbounds i8, i8* %pp.addr.2, i64 1
  %13 = load i8, i8* %arrayidx337, align 1, !tbaa !36
  %14 = xor i8 %13, -1
  %sub339 = zext i8 %14 to i32
  %mul340 = mul nuw nsw i32 %sub339, %conv329
  %div341.lhs.trunc = trunc i32 %mul340 to i16
  %div341782 = udiv i16 %div341.lhs.trunc, 255
  %div341.zext = zext i16 %div341782 to i32
  %arrayidx344 = getelementptr inbounds i8, i8* %pp.addr.2, i64 2
  %15 = load i8, i8* %arrayidx344, align 1, !tbaa !36
  %16 = xor i8 %15, -1
  %sub346 = zext i8 %16 to i32
  %mul347 = mul nuw nsw i32 %sub346, %conv329
  %div348.lhs.trunc = trunc i32 %mul347 to i16
  %div348783 = udiv i16 %div348.lhs.trunc, 255
  %div348.zext = zext i16 %div348783 to i32
  %shl352 = shl nuw nsw i32 %div341.zext, 8
  %shl355 = shl nuw nsw i32 %div348.zext, 16
  %or353 = or i32 %shl352, %div334.zext
  %or356 = or i32 %or353, %shl355
  %or357 = or i32 %or356, -16777216
  %incdec.ptr358 = getelementptr inbounds i32, i32* %cp.addr.2, i64 1
  store i32 %or357, i32* %cp.addr.2, align 4, !tbaa !38
  %add.ptr360 = getelementptr inbounds i8, i8* %pp.addr.2, i64 %idx.ext
  br label %sw.bb361

sw.bb361:                                         ; preds = %for.end, %sw.bb324
  %pp.addr.3 = phi i8* [ %add.ptr360, %sw.bb324 ], [ %pp.addr.1.lcssa, %for.end ]
  %cp.addr.3 = phi i32* [ %incdec.ptr358, %sw.bb324 ], [ %cp.addr.1.lcssa, %for.end ]
  %arrayidx362 = getelementptr inbounds i8, i8* %pp.addr.3, i64 3
  %17 = load i8, i8* %arrayidx362, align 1, !tbaa !36
  %18 = xor i8 %17, -1
  %conv366 = zext i8 %18 to i32
  %19 = load i8, i8* %pp.addr.3, align 1, !tbaa !36
  %20 = xor i8 %19, -1
  %sub369 = zext i8 %20 to i32
  %mul370 = mul nuw nsw i32 %sub369, %conv366
  %div371.lhs.trunc = trunc i32 %mul370 to i16
  %div371784 = udiv i16 %div371.lhs.trunc, 255
  %div371.zext = zext i16 %div371784 to i32
  %arrayidx374 = getelementptr inbounds i8, i8* %pp.addr.3, i64 1
  %21 = load i8, i8* %arrayidx374, align 1, !tbaa !36
  %22 = xor i8 %21, -1
  %sub376 = zext i8 %22 to i32
  %mul377 = mul nuw nsw i32 %sub376, %conv366
  %div378.lhs.trunc = trunc i32 %mul377 to i16
  %div378785 = udiv i16 %div378.lhs.trunc, 255
  %div378.zext = zext i16 %div378785 to i32
  %arrayidx381 = getelementptr inbounds i8, i8* %pp.addr.3, i64 2
  %23 = load i8, i8* %arrayidx381, align 1, !tbaa !36
  %24 = xor i8 %23, -1
  %sub383 = zext i8 %24 to i32
  %mul384 = mul nuw nsw i32 %sub383, %conv366
  %div385.lhs.trunc = trunc i32 %mul384 to i16
  %div385786 = udiv i16 %div385.lhs.trunc, 255
  %div385.zext = zext i16 %div385786 to i32
  %shl389 = shl nuw nsw i32 %div378.zext, 8
  %shl392 = shl nuw nsw i32 %div385.zext, 16
  %or390 = or i32 %shl389, %div371.zext
  %or393 = or i32 %or390, %shl392
  %or394 = or i32 %or393, -16777216
  %incdec.ptr395 = getelementptr inbounds i32, i32* %cp.addr.3, i64 1
  store i32 %or394, i32* %cp.addr.3, align 4, !tbaa !38
  %add.ptr397 = getelementptr inbounds i8, i8* %pp.addr.3, i64 %idx.ext
  br label %sw.bb398

sw.bb398:                                         ; preds = %for.end, %sw.bb361
  %pp.addr.4 = phi i8* [ %add.ptr397, %sw.bb361 ], [ %pp.addr.1.lcssa, %for.end ]
  %cp.addr.4 = phi i32* [ %incdec.ptr395, %sw.bb361 ], [ %cp.addr.1.lcssa, %for.end ]
  %arrayidx399 = getelementptr inbounds i8, i8* %pp.addr.4, i64 3
  %25 = load i8, i8* %arrayidx399, align 1, !tbaa !36
  %26 = xor i8 %25, -1
  %conv403 = zext i8 %26 to i32
  %27 = load i8, i8* %pp.addr.4, align 1, !tbaa !36
  %28 = xor i8 %27, -1
  %sub406 = zext i8 %28 to i32
  %mul407 = mul nuw nsw i32 %sub406, %conv403
  %div408.lhs.trunc = trunc i32 %mul407 to i16
  %div408787 = udiv i16 %div408.lhs.trunc, 255
  %div408.zext = zext i16 %div408787 to i32
  %arrayidx411 = getelementptr inbounds i8, i8* %pp.addr.4, i64 1
  %29 = load i8, i8* %arrayidx411, align 1, !tbaa !36
  %30 = xor i8 %29, -1
  %sub413 = zext i8 %30 to i32
  %mul414 = mul nuw nsw i32 %sub413, %conv403
  %div415.lhs.trunc = trunc i32 %mul414 to i16
  %div415788 = udiv i16 %div415.lhs.trunc, 255
  %div415.zext = zext i16 %div415788 to i32
  %arrayidx418 = getelementptr inbounds i8, i8* %pp.addr.4, i64 2
  %31 = load i8, i8* %arrayidx418, align 1, !tbaa !36
  %32 = xor i8 %31, -1
  %sub420 = zext i8 %32 to i32
  %mul421 = mul nuw nsw i32 %sub420, %conv403
  %div422.lhs.trunc = trunc i32 %mul421 to i16
  %div422789 = udiv i16 %div422.lhs.trunc, 255
  %div422.zext = zext i16 %div422789 to i32
  %shl426 = shl nuw nsw i32 %div415.zext, 8
  %shl429 = shl nuw nsw i32 %div422.zext, 16
  %or427 = or i32 %shl426, %div408.zext
  %or430 = or i32 %or427, %shl429
  %or431 = or i32 %or430, -16777216
  %incdec.ptr432 = getelementptr inbounds i32, i32* %cp.addr.4, i64 1
  store i32 %or431, i32* %cp.addr.4, align 4, !tbaa !38
  %add.ptr434 = getelementptr inbounds i8, i8* %pp.addr.4, i64 %idx.ext
  br label %sw.bb435

sw.bb435:                                         ; preds = %for.end, %sw.bb398
  %pp.addr.5 = phi i8* [ %add.ptr434, %sw.bb398 ], [ %pp.addr.1.lcssa, %for.end ]
  %cp.addr.5 = phi i32* [ %incdec.ptr432, %sw.bb398 ], [ %cp.addr.1.lcssa, %for.end ]
  %arrayidx436 = getelementptr inbounds i8, i8* %pp.addr.5, i64 3
  %33 = load i8, i8* %arrayidx436, align 1, !tbaa !36
  %34 = xor i8 %33, -1
  %conv440 = zext i8 %34 to i32
  %35 = load i8, i8* %pp.addr.5, align 1, !tbaa !36
  %36 = xor i8 %35, -1
  %sub443 = zext i8 %36 to i32
  %mul444 = mul nuw nsw i32 %sub443, %conv440
  %div445.lhs.trunc = trunc i32 %mul444 to i16
  %div445790 = udiv i16 %div445.lhs.trunc, 255
  %div445.zext = zext i16 %div445790 to i32
  %arrayidx448 = getelementptr inbounds i8, i8* %pp.addr.5, i64 1
  %37 = load i8, i8* %arrayidx448, align 1, !tbaa !36
  %38 = xor i8 %37, -1
  %sub450 = zext i8 %38 to i32
  %mul451 = mul nuw nsw i32 %sub450, %conv440
  %div452.lhs.trunc = trunc i32 %mul451 to i16
  %div452791 = udiv i16 %div452.lhs.trunc, 255
  %div452.zext = zext i16 %div452791 to i32
  %arrayidx455 = getelementptr inbounds i8, i8* %pp.addr.5, i64 2
  %39 = load i8, i8* %arrayidx455, align 1, !tbaa !36
  %40 = xor i8 %39, -1
  %sub457 = zext i8 %40 to i32
  %mul458 = mul nuw nsw i32 %sub457, %conv440
  %div459.lhs.trunc = trunc i32 %mul458 to i16
  %div459792 = udiv i16 %div459.lhs.trunc, 255
  %div459.zext = zext i16 %div459792 to i32
  %shl463 = shl nuw nsw i32 %div452.zext, 8
  %shl466 = shl nuw nsw i32 %div459.zext, 16
  %or464 = or i32 %shl463, %div445.zext
  %or467 = or i32 %or464, %shl466
  %or468 = or i32 %or467, -16777216
  %incdec.ptr469 = getelementptr inbounds i32, i32* %cp.addr.5, i64 1
  store i32 %or468, i32* %cp.addr.5, align 4, !tbaa !38
  %add.ptr471 = getelementptr inbounds i8, i8* %pp.addr.5, i64 %idx.ext
  br label %sw.bb472

sw.bb472:                                         ; preds = %for.end, %sw.bb435
  %pp.addr.6 = phi i8* [ %add.ptr471, %sw.bb435 ], [ %pp.addr.1.lcssa, %for.end ]
  %cp.addr.6 = phi i32* [ %incdec.ptr469, %sw.bb435 ], [ %cp.addr.1.lcssa, %for.end ]
  %arrayidx473 = getelementptr inbounds i8, i8* %pp.addr.6, i64 3
  %41 = load i8, i8* %arrayidx473, align 1, !tbaa !36
  %42 = xor i8 %41, -1
  %conv477 = zext i8 %42 to i32
  %43 = load i8, i8* %pp.addr.6, align 1, !tbaa !36
  %44 = xor i8 %43, -1
  %sub480 = zext i8 %44 to i32
  %mul481 = mul nuw nsw i32 %sub480, %conv477
  %div482.lhs.trunc = trunc i32 %mul481 to i16
  %div482793 = udiv i16 %div482.lhs.trunc, 255
  %div482.zext = zext i16 %div482793 to i32
  %arrayidx485 = getelementptr inbounds i8, i8* %pp.addr.6, i64 1
  %45 = load i8, i8* %arrayidx485, align 1, !tbaa !36
  %46 = xor i8 %45, -1
  %sub487 = zext i8 %46 to i32
  %mul488 = mul nuw nsw i32 %sub487, %conv477
  %div489.lhs.trunc = trunc i32 %mul488 to i16
  %div489794 = udiv i16 %div489.lhs.trunc, 255
  %div489.zext = zext i16 %div489794 to i32
  %arrayidx492 = getelementptr inbounds i8, i8* %pp.addr.6, i64 2
  %47 = load i8, i8* %arrayidx492, align 1, !tbaa !36
  %48 = xor i8 %47, -1
  %sub494 = zext i8 %48 to i32
  %mul495 = mul nuw nsw i32 %sub494, %conv477
  %div496.lhs.trunc = trunc i32 %mul495 to i16
  %div496795 = udiv i16 %div496.lhs.trunc, 255
  %div496.zext = zext i16 %div496795 to i32
  %shl500 = shl nuw nsw i32 %div489.zext, 8
  %shl503 = shl nuw nsw i32 %div496.zext, 16
  %or501 = or i32 %shl500, %div482.zext
  %or504 = or i32 %or501, %shl503
  %or505 = or i32 %or504, -16777216
  %incdec.ptr506 = getelementptr inbounds i32, i32* %cp.addr.6, i64 1
  store i32 %or505, i32* %cp.addr.6, align 4, !tbaa !38
  %add.ptr508 = getelementptr inbounds i8, i8* %pp.addr.6, i64 %idx.ext
  br label %sw.bb509

sw.bb509:                                         ; preds = %for.end, %sw.bb472
  %pp.addr.7 = phi i8* [ %add.ptr508, %sw.bb472 ], [ %pp.addr.1.lcssa, %for.end ]
  %cp.addr.7 = phi i32* [ %incdec.ptr506, %sw.bb472 ], [ %cp.addr.1.lcssa, %for.end ]
  %arrayidx510 = getelementptr inbounds i8, i8* %pp.addr.7, i64 3
  %49 = load i8, i8* %arrayidx510, align 1, !tbaa !36
  %50 = xor i8 %49, -1
  %conv514 = zext i8 %50 to i32
  %51 = load i8, i8* %pp.addr.7, align 1, !tbaa !36
  %52 = xor i8 %51, -1
  %sub517 = zext i8 %52 to i32
  %mul518 = mul nuw nsw i32 %sub517, %conv514
  %div519.lhs.trunc = trunc i32 %mul518 to i16
  %div519775 = udiv i16 %div519.lhs.trunc, 255
  %div519.zext = zext i16 %div519775 to i32
  %arrayidx522 = getelementptr inbounds i8, i8* %pp.addr.7, i64 1
  %53 = load i8, i8* %arrayidx522, align 1, !tbaa !36
  %54 = xor i8 %53, -1
  %sub524 = zext i8 %54 to i32
  %mul525 = mul nuw nsw i32 %sub524, %conv514
  %div526.lhs.trunc = trunc i32 %mul525 to i16
  %div526776 = udiv i16 %div526.lhs.trunc, 255
  %div526.zext = zext i16 %div526776 to i32
  %arrayidx529 = getelementptr inbounds i8, i8* %pp.addr.7, i64 2
  %55 = load i8, i8* %arrayidx529, align 1, !tbaa !36
  %56 = xor i8 %55, -1
  %sub531 = zext i8 %56 to i32
  %mul532 = mul nuw nsw i32 %sub531, %conv514
  %div533.lhs.trunc = trunc i32 %mul532 to i16
  %div533777 = udiv i16 %div533.lhs.trunc, 255
  %div533.zext = zext i16 %div533777 to i32
  %shl537 = shl nuw nsw i32 %div526.zext, 8
  %shl540 = shl nuw nsw i32 %div533.zext, 16
  %or538 = or i32 %shl537, %div519.zext
  %or541 = or i32 %or538, %shl540
  %or542 = or i32 %or541, -16777216
  %incdec.ptr543 = getelementptr inbounds i32, i32* %cp.addr.7, i64 1
  store i32 %or542, i32* %cp.addr.7, align 4, !tbaa !38
  %add.ptr545 = getelementptr inbounds i8, i8* %pp.addr.7, i64 %idx.ext
  br label %if.end

if.end:                                           ; preds = %for.end, %sw.bb509
  %pp.addr.8 = phi i8* [ %add.ptr545, %sw.bb509 ], [ %pp.addr.1.lcssa, %for.end ]
  %cp.addr.8 = phi i32* [ %incdec.ptr543, %sw.bb509 ], [ %cp.addr.1.lcssa, %for.end ]
  %add.ptr547 = getelementptr inbounds i32, i32* %cp.addr.8, i64 %idx.ext546
  %add.ptr549 = getelementptr inbounds i8, i8* %pp.addr.8, i64 %idx.ext548
  %cmp.not = icmp eq i32 %dec806, 0
  br i1 %cmp.not, label %while.end.loopexit, label %for.cond.preheader, !llvm.loop !68

while.end.loopexit:                               ; preds = %if.end
  br label %while.end

while.end:                                        ; preds = %while.end.loopexit, %entry
  ret void

rolled.pre:                                       ; preds = %for.body
  %57 = alloca i8*, i8 8, align 8
  %58 = getelementptr i8*, i8** %57, i8 0
  store i8* %pp.addr.1797, i8** %58, align 8
  %59 = getelementptr i8*, i8** %57, i8 1
  store i8* %add.ptr, i8** %59, align 8
  %60 = getelementptr i8*, i8** %57, i8 2
  store i8* %add.ptr68, i8** %60, align 8
  %61 = getelementptr i8*, i8** %57, i8 3
  store i8* %add.ptr104, i8** %61, align 8
  %62 = getelementptr i8*, i8** %57, i8 4
  store i8* %add.ptr140, i8** %62, align 8
  %63 = getelementptr i8*, i8** %57, i8 5
  store i8* %add.ptr176, i8** %63, align 8
  %64 = getelementptr i8*, i8** %57, i8 6
  store i8* %add.ptr212, i8** %64, align 8
  %65 = getelementptr i8*, i8** %57, i8 7
  store i8* %add.ptr248, i8** %65, align 8
  br label %rolled.loop

rolled.loop:                                      ; preds = %rolled.pre, %rolled.loop
  %66 = phi i8 [ 0, %rolled.pre ], [ %104, %rolled.loop ]
  %67 = getelementptr i8*, i8** %57, i8 %66
  %68 = load i8*, i8** %67, align 8
  %69 = getelementptr inbounds i8, i8* %68, i64 1
  %70 = load i8, i8* %69, align 1
  %71 = xor i8 %70, -1
  %72 = zext i8 %71 to i32
  %73 = getelementptr inbounds i8, i8* %68, i64 3
  %74 = load i8, i8* %73, align 1
  %75 = xor i8 %74, -1
  %76 = zext i8 %75 to i32
  %77 = mul nuw nsw i32 %72, %76
  %78 = trunc i32 %77 to i16
  %79 = udiv i16 %78, 255
  %80 = zext i16 %79 to i32
  %81 = shl nuw nsw i32 %80, 8
  %82 = load i8, i8* %68, align 1
  %83 = xor i8 %82, -1
  %84 = zext i8 %83 to i32
  %85 = mul nuw nsw i32 %84, %76
  %86 = trunc i32 %85 to i16
  %87 = udiv i16 %86, 255
  %88 = zext i16 %87 to i32
  %89 = or i32 %81, %88
  %90 = getelementptr inbounds i8, i8* %68, i64 2
  %91 = load i8, i8* %90, align 1
  %92 = xor i8 %91, -1
  %93 = zext i8 %92 to i32
  %94 = mul nuw nsw i32 %93, %76
  %95 = trunc i32 %94 to i16
  %96 = udiv i16 %95, 255
  %97 = zext i16 %96 to i32
  %98 = shl nuw nsw i32 %97, 16
  %99 = or i32 %89, %98
  %100 = or i32 %99, -16777216
  %101 = zext i8 %66 to i64
  %102 = add i64 %101, 1
  %103 = getelementptr i32, i32* %cp.addr.1798, i64 %102
  store i32 %100, i32* %103, align 4
  %104 = add i8 %66, 1
  %105 = icmp ne i8 %104, 8
  br i1 %105, label %rolled.loop, label %rolled.exit

rolled.exit:                                      ; preds = %rolled.loop
  %106 = getelementptr inbounds i8, i8* %add.ptr248, i64 %idx.ext
  %107 = add i32 %_x.0799, -8
  %108 = icmp ugt i32 %107, 7
  br i1 %108, label %for.body, label %for.end.loopexit, !llvm.loop !69
}

code gen 1
destroying tree
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   %1 = load i8, i8* %pp.addr.1134, align 1, !tbaa !9
Here ..
Skipping:   %incdec.ptr4 = getelementptr inbounds i32, i32* %cp.addr.1135, i64 1
Skipping:   %incdec.ptr5 = getelementptr inbounds i8, i8* %pp.addr.1134, i64 2
Here ..
Skipping:   %incdec.ptr9 = getelementptr inbounds i32, i32* %cp.addr.1135, i64 2
Skipping:   %incdec.ptr10 = getelementptr inbounds i8, i8* %pp.addr.1134, i64 3
Here ..
Skipping:   %incdec.ptr14 = getelementptr inbounds i32, i32* %cp.addr.1135, i64 3
Skipping:   %incdec.ptr15 = getelementptr inbounds i8, i8* %pp.addr.1134, i64 4
Here ..
Skipping:   %incdec.ptr19 = getelementptr inbounds i32, i32* %cp.addr.1135, i64 4
Skipping:   %incdec.ptr20 = getelementptr inbounds i8, i8* %pp.addr.1134, i64 5
Here ..
Skipping:   %incdec.ptr24 = getelementptr inbounds i32, i32* %cp.addr.1135, i64 5
Skipping:   %incdec.ptr25 = getelementptr inbounds i8, i8* %pp.addr.1134, i64 6
Here ..
Skipping:   %incdec.ptr29 = getelementptr inbounds i32, i32* %cp.addr.1135, i64 6
Skipping:   %incdec.ptr30 = getelementptr inbounds i8, i8* %pp.addr.1134, i64 7
Here ..
Skipping:   %incdec.ptr34 = getelementptr inbounds i32, i32* %cp.addr.1135, i64 7
Skipping:   %incdec.ptr35 = getelementptr inbounds i8, i8* %pp.addr.1134, i64 8
Here ..
Skipping:   %incdec.ptr39 = getelementptr inbounds i32, i32* %cp.addr.1135, i64 8
Here ..
I:   %sub = add i32 %_x.0136, -8
Last:   %sub = add i32 %_x.0136, -8
Schedulable: 1
code gen 0
Gains: 54 - 11 = 43
Profitable: finishing code generation
; Function Attrs: nofree norecurse nounwind optsize uwtable
define internal void @put8bitcmaptile(%struct._TIFFRGBAImage* nocapture readonly %img, i32* nocapture %cp, i32 %x, i32 %y, i32 %w, i32 %h, i32 %fromskew, i32 %toskew, i8* nocapture readonly %pp) #5 {
entry:
  %PALmap1 = getelementptr inbounds %struct._TIFFRGBAImage, %struct._TIFFRGBAImage* %img, i64 0, i32 17
  %0 = load i32**, i32*** %PALmap1, align 8, !tbaa !20
  %cmp.not140 = icmp eq i32 %h, 0
  br i1 %cmp.not140, label %while.end, label %for.cond.preheader.lr.ph

for.cond.preheader.lr.ph:                         ; preds = %entry
  %cmp2133 = icmp ugt i32 %w, 7
  %idx.ext = sext i32 %toskew to i64
  %idx.ext82 = sext i32 %fromskew to i64
  br label %for.cond.preheader

for.cond.preheader:                               ; preds = %for.cond.preheader.lr.ph, %if.end
  %dec143.in = phi i32 [ %h, %for.cond.preheader.lr.ph ], [ %dec143, %if.end ]
  %cp.addr.0142 = phi i32* [ %cp, %for.cond.preheader.lr.ph ], [ %add.ptr, %if.end ]
  %pp.addr.0141 = phi i8* [ %pp, %for.cond.preheader.lr.ph ], [ %add.ptr83, %if.end ]
  %dec143 = add i32 %dec143.in, -1
  br i1 %cmp2133, label %for.body.preheader, label %for.end

for.body.preheader:                               ; preds = %for.cond.preheader
  br label %for.body

for.body:                                         ; preds = %for.body.preheader, %for.body
  %_x.0136 = phi i32 [ %sub, %for.body ], [ %w, %for.body.preheader ]
  %cp.addr.1135 = phi i32* [ %incdec.ptr39, %for.body ], [ %cp.addr.0142, %for.body.preheader ]
  %pp.addr.1134 = phi i8* [ %incdec.ptr35, %for.body ], [ %pp.addr.0141, %for.body.preheader ]
  %incdec.ptr = getelementptr inbounds i8, i8* %pp.addr.1134, i64 1
  %1 = load i8, i8* %pp.addr.1134, align 1, !tbaa !36
  %idxprom = zext i8 %1 to i64
  %arrayidx = getelementptr inbounds i32*, i32** %0, i64 %idxprom
  %2 = load i32*, i32** %arrayidx, align 8, !tbaa !31
  %3 = load i32, i32* %2, align 4, !tbaa !38
  %incdec.ptr4 = getelementptr inbounds i32, i32* %cp.addr.1135, i64 1
  store i32 %3, i32* %cp.addr.1135, align 4, !tbaa !38
  %incdec.ptr5 = getelementptr inbounds i8, i8* %pp.addr.1134, i64 2
  %4 = load i8, i8* %incdec.ptr, align 1, !tbaa !36
  %idxprom6 = zext i8 %4 to i64
  %arrayidx7 = getelementptr inbounds i32*, i32** %0, i64 %idxprom6
  %5 = load i32*, i32** %arrayidx7, align 8, !tbaa !31
  %6 = load i32, i32* %5, align 4, !tbaa !38
  %incdec.ptr9 = getelementptr inbounds i32, i32* %cp.addr.1135, i64 2
  store i32 %6, i32* %incdec.ptr4, align 4, !tbaa !38
  %incdec.ptr10 = getelementptr inbounds i8, i8* %pp.addr.1134, i64 3
  %7 = load i8, i8* %incdec.ptr5, align 1, !tbaa !36
  %idxprom11 = zext i8 %7 to i64
  %arrayidx12 = getelementptr inbounds i32*, i32** %0, i64 %idxprom11
  %8 = load i32*, i32** %arrayidx12, align 8, !tbaa !31
  %9 = load i32, i32* %8, align 4, !tbaa !38
  %incdec.ptr14 = getelementptr inbounds i32, i32* %cp.addr.1135, i64 3
  store i32 %9, i32* %incdec.ptr9, align 4, !tbaa !38
  %incdec.ptr15 = getelementptr inbounds i8, i8* %pp.addr.1134, i64 4
  %10 = load i8, i8* %incdec.ptr10, align 1, !tbaa !36
  %idxprom16 = zext i8 %10 to i64
  %arrayidx17 = getelementptr inbounds i32*, i32** %0, i64 %idxprom16
  %11 = load i32*, i32** %arrayidx17, align 8, !tbaa !31
  %12 = load i32, i32* %11, align 4, !tbaa !38
  %incdec.ptr19 = getelementptr inbounds i32, i32* %cp.addr.1135, i64 4
  store i32 %12, i32* %incdec.ptr14, align 4, !tbaa !38
  %incdec.ptr20 = getelementptr inbounds i8, i8* %pp.addr.1134, i64 5
  %13 = load i8, i8* %incdec.ptr15, align 1, !tbaa !36
  %idxprom21 = zext i8 %13 to i64
  %arrayidx22 = getelementptr inbounds i32*, i32** %0, i64 %idxprom21
  %14 = load i32*, i32** %arrayidx22, align 8, !tbaa !31
  %15 = load i32, i32* %14, align 4, !tbaa !38
  %incdec.ptr24 = getelementptr inbounds i32, i32* %cp.addr.1135, i64 5
  store i32 %15, i32* %incdec.ptr19, align 4, !tbaa !38
  %incdec.ptr25 = getelementptr inbounds i8, i8* %pp.addr.1134, i64 6
  %16 = load i8, i8* %incdec.ptr20, align 1, !tbaa !36
  %idxprom26 = zext i8 %16 to i64
  %arrayidx27 = getelementptr inbounds i32*, i32** %0, i64 %idxprom26
  %17 = load i32*, i32** %arrayidx27, align 8, !tbaa !31
  %18 = load i32, i32* %17, align 4, !tbaa !38
  %incdec.ptr29 = getelementptr inbounds i32, i32* %cp.addr.1135, i64 6
  store i32 %18, i32* %incdec.ptr24, align 4, !tbaa !38
  %incdec.ptr30 = getelementptr inbounds i8, i8* %pp.addr.1134, i64 7
  %19 = load i8, i8* %incdec.ptr25, align 1, !tbaa !36
  %idxprom31 = zext i8 %19 to i64
  %arrayidx32 = getelementptr inbounds i32*, i32** %0, i64 %idxprom31
  %20 = load i32*, i32** %arrayidx32, align 8, !tbaa !31
  %21 = load i32, i32* %20, align 4, !tbaa !38
  %incdec.ptr34 = getelementptr inbounds i32, i32* %cp.addr.1135, i64 7
  store i32 %21, i32* %incdec.ptr29, align 4, !tbaa !38
  %incdec.ptr35 = getelementptr inbounds i8, i8* %pp.addr.1134, i64 8
  %22 = load i8, i8* %incdec.ptr30, align 1, !tbaa !36
  %idxprom36 = zext i8 %22 to i64
  %arrayidx37 = getelementptr inbounds i32*, i32** %0, i64 %idxprom36
  %23 = load i32*, i32** %arrayidx37, align 8, !tbaa !31
  %24 = load i32, i32* %23, align 4, !tbaa !38
  %incdec.ptr39 = getelementptr inbounds i32, i32* %cp.addr.1135, i64 8
  store i32 %24, i32* %incdec.ptr34, align 4, !tbaa !38
  %sub = add i32 %_x.0136, -8
  %cmp2 = icmp ugt i32 %sub, 7
  br i1 %cmp2, label %for.body, label %for.end.loopexit, !llvm.loop !72

for.end.loopexit:                                 ; preds = %for.body
  %incdec.ptr35.lcssa = phi i8* [ %incdec.ptr35, %for.body ]
  %incdec.ptr39.lcssa = phi i32* [ %incdec.ptr39, %for.body ]
  %sub.lcssa = phi i32 [ %sub, %for.body ]
  br label %for.end

for.end:                                          ; preds = %for.end.loopexit, %for.cond.preheader
  %pp.addr.1.lcssa = phi i8* [ %pp.addr.0141, %for.cond.preheader ], [ %incdec.ptr35.lcssa, %for.end.loopexit ]
  %cp.addr.1.lcssa = phi i32* [ %cp.addr.0142, %for.cond.preheader ], [ %incdec.ptr39.lcssa, %for.end.loopexit ]
  %_x.0.lcssa = phi i32 [ %w, %for.cond.preheader ], [ %sub.lcssa, %for.end.loopexit ]
  switch i32 %_x.0.lcssa, label %if.end [
    i32 1, label %sw.bb76
    i32 7, label %sw.bb
    i32 6, label %sw.bb46
    i32 5, label %sw.bb52
    i32 4, label %sw.bb58
    i32 3, label %sw.bb64
    i32 2, label %sw.bb70
  ]

sw.bb:                                            ; preds = %for.end
  %incdec.ptr41 = getelementptr inbounds i8, i8* %pp.addr.1.lcssa, i64 1
  %25 = load i8, i8* %pp.addr.1.lcssa, align 1, !tbaa !36
  %idxprom42 = zext i8 %25 to i64
  %arrayidx43 = getelementptr inbounds i32*, i32** %0, i64 %idxprom42
  %26 = load i32*, i32** %arrayidx43, align 8, !tbaa !31
  %27 = load i32, i32* %26, align 4, !tbaa !38
  %incdec.ptr45 = getelementptr inbounds i32, i32* %cp.addr.1.lcssa, i64 1
  store i32 %27, i32* %cp.addr.1.lcssa, align 4, !tbaa !38
  br label %sw.bb46

sw.bb46:                                          ; preds = %for.end, %sw.bb
  %pp.addr.2 = phi i8* [ %incdec.ptr41, %sw.bb ], [ %pp.addr.1.lcssa, %for.end ]
  %cp.addr.2 = phi i32* [ %incdec.ptr45, %sw.bb ], [ %cp.addr.1.lcssa, %for.end ]
  %incdec.ptr47 = getelementptr inbounds i8, i8* %pp.addr.2, i64 1
  %28 = load i8, i8* %pp.addr.2, align 1, !tbaa !36
  %idxprom48 = zext i8 %28 to i64
  %arrayidx49 = getelementptr inbounds i32*, i32** %0, i64 %idxprom48
  %29 = load i32*, i32** %arrayidx49, align 8, !tbaa !31
  %30 = load i32, i32* %29, align 4, !tbaa !38
  %incdec.ptr51 = getelementptr inbounds i32, i32* %cp.addr.2, i64 1
  store i32 %30, i32* %cp.addr.2, align 4, !tbaa !38
  br label %sw.bb52

sw.bb52:                                          ; preds = %for.end, %sw.bb46
  %pp.addr.3 = phi i8* [ %incdec.ptr47, %sw.bb46 ], [ %pp.addr.1.lcssa, %for.end ]
  %cp.addr.3 = phi i32* [ %incdec.ptr51, %sw.bb46 ], [ %cp.addr.1.lcssa, %for.end ]
  %incdec.ptr53 = getelementptr inbounds i8, i8* %pp.addr.3, i64 1
  %31 = load i8, i8* %pp.addr.3, align 1, !tbaa !36
  %idxprom54 = zext i8 %31 to i64
  %arrayidx55 = getelementptr inbounds i32*, i32** %0, i64 %idxprom54
  %32 = load i32*, i32** %arrayidx55, align 8, !tbaa !31
  %33 = load i32, i32* %32, align 4, !tbaa !38
  %incdec.ptr57 = getelementptr inbounds i32, i32* %cp.addr.3, i64 1
  store i32 %33, i32* %cp.addr.3, align 4, !tbaa !38
  br label %sw.bb58

sw.bb58:                                          ; preds = %for.end, %sw.bb52
  %pp.addr.4 = phi i8* [ %incdec.ptr53, %sw.bb52 ], [ %pp.addr.1.lcssa, %for.end ]
  %cp.addr.4 = phi i32* [ %incdec.ptr57, %sw.bb52 ], [ %cp.addr.1.lcssa, %for.end ]
  %incdec.ptr59 = getelementptr inbounds i8, i8* %pp.addr.4, i64 1
  %34 = load i8, i8* %pp.addr.4, align 1, !tbaa !36
  %idxprom60 = zext i8 %34 to i64
  %arrayidx61 = getelementptr inbounds i32*, i32** %0, i64 %idxprom60
  %35 = load i32*, i32** %arrayidx61, align 8, !tbaa !31
  %36 = load i32, i32* %35, align 4, !tbaa !38
  %incdec.ptr63 = getelementptr inbounds i32, i32* %cp.addr.4, i64 1
  store i32 %36, i32* %cp.addr.4, align 4, !tbaa !38
  br label %sw.bb64

sw.bb64:                                          ; preds = %for.end, %sw.bb58
  %pp.addr.5 = phi i8* [ %incdec.ptr59, %sw.bb58 ], [ %pp.addr.1.lcssa, %for.end ]
  %cp.addr.5 = phi i32* [ %incdec.ptr63, %sw.bb58 ], [ %cp.addr.1.lcssa, %for.end ]
  %incdec.ptr65 = getelementptr inbounds i8, i8* %pp.addr.5, i64 1
  %37 = load i8, i8* %pp.addr.5, align 1, !tbaa !36
  %idxprom66 = zext i8 %37 to i64
  %arrayidx67 = getelementptr inbounds i32*, i32** %0, i64 %idxprom66
  %38 = load i32*, i32** %arrayidx67, align 8, !tbaa !31
  %39 = load i32, i32* %38, align 4, !tbaa !38
  %incdec.ptr69 = getelementptr inbounds i32, i32* %cp.addr.5, i64 1
  store i32 %39, i32* %cp.addr.5, align 4, !tbaa !38
  br label %sw.bb70

sw.bb70:                                          ; preds = %for.end, %sw.bb64
  %pp.addr.6 = phi i8* [ %incdec.ptr65, %sw.bb64 ], [ %pp.addr.1.lcssa, %for.end ]
  %cp.addr.6 = phi i32* [ %incdec.ptr69, %sw.bb64 ], [ %cp.addr.1.lcssa, %for.end ]
  %incdec.ptr71 = getelementptr inbounds i8, i8* %pp.addr.6, i64 1
  %40 = load i8, i8* %pp.addr.6, align 1, !tbaa !36
  %idxprom72 = zext i8 %40 to i64
  %arrayidx73 = getelementptr inbounds i32*, i32** %0, i64 %idxprom72
  %41 = load i32*, i32** %arrayidx73, align 8, !tbaa !31
  %42 = load i32, i32* %41, align 4, !tbaa !38
  %incdec.ptr75 = getelementptr inbounds i32, i32* %cp.addr.6, i64 1
  store i32 %42, i32* %cp.addr.6, align 4, !tbaa !38
  br label %sw.bb76

sw.bb76:                                          ; preds = %for.end, %sw.bb70
  %pp.addr.7 = phi i8* [ %incdec.ptr71, %sw.bb70 ], [ %pp.addr.1.lcssa, %for.end ]
  %cp.addr.7 = phi i32* [ %incdec.ptr75, %sw.bb70 ], [ %cp.addr.1.lcssa, %for.end ]
  %incdec.ptr77 = getelementptr inbounds i8, i8* %pp.addr.7, i64 1
  %43 = load i8, i8* %pp.addr.7, align 1, !tbaa !36
  %idxprom78 = zext i8 %43 to i64
  %arrayidx79 = getelementptr inbounds i32*, i32** %0, i64 %idxprom78
  %44 = load i32*, i32** %arrayidx79, align 8, !tbaa !31
  %45 = load i32, i32* %44, align 4, !tbaa !38
  %incdec.ptr81 = getelementptr inbounds i32, i32* %cp.addr.7, i64 1
  store i32 %45, i32* %cp.addr.7, align 4, !tbaa !38
  br label %if.end

if.end:                                           ; preds = %for.end, %sw.bb76
  %pp.addr.8 = phi i8* [ %incdec.ptr77, %sw.bb76 ], [ %pp.addr.1.lcssa, %for.end ]
  %cp.addr.8 = phi i32* [ %incdec.ptr81, %sw.bb76 ], [ %cp.addr.1.lcssa, %for.end ]
  %add.ptr = getelementptr inbounds i32, i32* %cp.addr.8, i64 %idx.ext
  %add.ptr83 = getelementptr inbounds i8, i8* %pp.addr.8, i64 %idx.ext82
  %cmp.not = icmp eq i32 %dec143, 0
  br i1 %cmp.not, label %while.end.loopexit, label %for.cond.preheader, !llvm.loop !73

while.end.loopexit:                               ; preds = %if.end
  br label %while.end

while.end:                                        ; preds = %while.end.loopexit, %entry
  ret void

rolled.pre:                                       ; No predecessors!

rolled.loop:                                      ; No predecessors!
  %46 = phi i8 
  %47 = zext i8 %46 to i64
  %48 = add i64 %47, 1
  %49 = getelementptr i8, i8* %pp.addr.1134, i64 %48
  %50 = load i8, i8* %49, align 1
  %51 = zext i8 %50 to i64
  %52 = getelementptr inbounds i32*, i32** %0, i64 %51
  %53 = load i32*, i32** %52, align 8
  %54 = load i32, i32* %53, align 4
  %55 = zext i8 %46 to i64
  %56 = add i64 %55, 1
  %57 = getelementptr i32, i32* %cp.addr.1135, i64 %56
  store i32 %54, i32* %57, align 4
  %58 = add i8 %46, 1
  %59 = icmp ne i8 %58, 8

rolled.exit:                                      ; No predecessors!
}

Done!
; Function Attrs: nofree norecurse nounwind optsize uwtable
define internal void @put8bitcmaptile(%struct._TIFFRGBAImage* nocapture readonly %img, i32* nocapture %cp, i32 %x, i32 %y, i32 %w, i32 %h, i32 %fromskew, i32 %toskew, i8* nocapture readonly %pp) #5 {
entry:
  %PALmap1 = getelementptr inbounds %struct._TIFFRGBAImage, %struct._TIFFRGBAImage* %img, i64 0, i32 17
  %0 = load i32**, i32*** %PALmap1, align 8, !tbaa !20
  %cmp.not140 = icmp eq i32 %h, 0
  br i1 %cmp.not140, label %while.end, label %for.cond.preheader.lr.ph

for.cond.preheader.lr.ph:                         ; preds = %entry
  %cmp2133 = icmp ugt i32 %w, 7
  %idx.ext = sext i32 %toskew to i64
  %idx.ext82 = sext i32 %fromskew to i64
  br label %for.cond.preheader

for.cond.preheader:                               ; preds = %for.cond.preheader.lr.ph, %if.end
  %dec143.in = phi i32 [ %h, %for.cond.preheader.lr.ph ], [ %dec143, %if.end ]
  %cp.addr.0142 = phi i32* [ %cp, %for.cond.preheader.lr.ph ], [ %add.ptr, %if.end ]
  %pp.addr.0141 = phi i8* [ %pp, %for.cond.preheader.lr.ph ], [ %add.ptr83, %if.end ]
  %dec143 = add i32 %dec143.in, -1
  br i1 %cmp2133, label %for.body.preheader, label %for.end

for.body.preheader:                               ; preds = %for.cond.preheader
  br label %for.body

for.body:                                         ; preds = %for.body.preheader, %rolled.exit
  %_x.0136 = phi i32 [ %36, %rolled.exit ], [ %w, %for.body.preheader ]
  %cp.addr.1135 = phi i32* [ %incdec.ptr39, %rolled.exit ], [ %cp.addr.0142, %for.body.preheader ]
  %pp.addr.1134 = phi i8* [ %incdec.ptr35, %rolled.exit ], [ %pp.addr.0141, %for.body.preheader ]
  %incdec.ptr35 = getelementptr inbounds i8, i8* %pp.addr.1134, i64 8
  %incdec.ptr39 = getelementptr inbounds i32, i32* %cp.addr.1135, i64 8
  br label %rolled.pre

for.end.loopexit:                                 ; preds = %rolled.exit
  %incdec.ptr35.lcssa = phi i8* [ %incdec.ptr35, %rolled.exit ]
  %incdec.ptr39.lcssa = phi i32* [ %incdec.ptr39, %rolled.exit ]
  %sub.lcssa = phi i32 [ %36, %rolled.exit ]
  br label %for.end

for.end:                                          ; preds = %for.end.loopexit, %for.cond.preheader
  %pp.addr.1.lcssa = phi i8* [ %pp.addr.0141, %for.cond.preheader ], [ %incdec.ptr35.lcssa, %for.end.loopexit ]
  %cp.addr.1.lcssa = phi i32* [ %cp.addr.0142, %for.cond.preheader ], [ %incdec.ptr39.lcssa, %for.end.loopexit ]
  %_x.0.lcssa = phi i32 [ %w, %for.cond.preheader ], [ %sub.lcssa, %for.end.loopexit ]
  switch i32 %_x.0.lcssa, label %if.end [
    i32 1, label %sw.bb76
    i32 7, label %sw.bb
    i32 6, label %sw.bb46
    i32 5, label %sw.bb52
    i32 4, label %sw.bb58
    i32 3, label %sw.bb64
    i32 2, label %sw.bb70
  ]

sw.bb:                                            ; preds = %for.end
  %incdec.ptr41 = getelementptr inbounds i8, i8* %pp.addr.1.lcssa, i64 1
  %1 = load i8, i8* %pp.addr.1.lcssa, align 1, !tbaa !36
  %idxprom42 = zext i8 %1 to i64
  %arrayidx43 = getelementptr inbounds i32*, i32** %0, i64 %idxprom42
  %2 = load i32*, i32** %arrayidx43, align 8, !tbaa !31
  %3 = load i32, i32* %2, align 4, !tbaa !38
  %incdec.ptr45 = getelementptr inbounds i32, i32* %cp.addr.1.lcssa, i64 1
  store i32 %3, i32* %cp.addr.1.lcssa, align 4, !tbaa !38
  br label %sw.bb46

sw.bb46:                                          ; preds = %for.end, %sw.bb
  %pp.addr.2 = phi i8* [ %incdec.ptr41, %sw.bb ], [ %pp.addr.1.lcssa, %for.end ]
  %cp.addr.2 = phi i32* [ %incdec.ptr45, %sw.bb ], [ %cp.addr.1.lcssa, %for.end ]
  %incdec.ptr47 = getelementptr inbounds i8, i8* %pp.addr.2, i64 1
  %4 = load i8, i8* %pp.addr.2, align 1, !tbaa !36
  %idxprom48 = zext i8 %4 to i64
  %arrayidx49 = getelementptr inbounds i32*, i32** %0, i64 %idxprom48
  %5 = load i32*, i32** %arrayidx49, align 8, !tbaa !31
  %6 = load i32, i32* %5, align 4, !tbaa !38
  %incdec.ptr51 = getelementptr inbounds i32, i32* %cp.addr.2, i64 1
  store i32 %6, i32* %cp.addr.2, align 4, !tbaa !38
  br label %sw.bb52

sw.bb52:                                          ; preds = %for.end, %sw.bb46
  %pp.addr.3 = phi i8* [ %incdec.ptr47, %sw.bb46 ], [ %pp.addr.1.lcssa, %for.end ]
  %cp.addr.3 = phi i32* [ %incdec.ptr51, %sw.bb46 ], [ %cp.addr.1.lcssa, %for.end ]
  %incdec.ptr53 = getelementptr inbounds i8, i8* %pp.addr.3, i64 1
  %7 = load i8, i8* %pp.addr.3, align 1, !tbaa !36
  %idxprom54 = zext i8 %7 to i64
  %arrayidx55 = getelementptr inbounds i32*, i32** %0, i64 %idxprom54
  %8 = load i32*, i32** %arrayidx55, align 8, !tbaa !31
  %9 = load i32, i32* %8, align 4, !tbaa !38
  %incdec.ptr57 = getelementptr inbounds i32, i32* %cp.addr.3, i64 1
  store i32 %9, i32* %cp.addr.3, align 4, !tbaa !38
  br label %sw.bb58

sw.bb58:                                          ; preds = %for.end, %sw.bb52
  %pp.addr.4 = phi i8* [ %incdec.ptr53, %sw.bb52 ], [ %pp.addr.1.lcssa, %for.end ]
  %cp.addr.4 = phi i32* [ %incdec.ptr57, %sw.bb52 ], [ %cp.addr.1.lcssa, %for.end ]
  %incdec.ptr59 = getelementptr inbounds i8, i8* %pp.addr.4, i64 1
  %10 = load i8, i8* %pp.addr.4, align 1, !tbaa !36
  %idxprom60 = zext i8 %10 to i64
  %arrayidx61 = getelementptr inbounds i32*, i32** %0, i64 %idxprom60
  %11 = load i32*, i32** %arrayidx61, align 8, !tbaa !31
  %12 = load i32, i32* %11, align 4, !tbaa !38
  %incdec.ptr63 = getelementptr inbounds i32, i32* %cp.addr.4, i64 1
  store i32 %12, i32* %cp.addr.4, align 4, !tbaa !38
  br label %sw.bb64

sw.bb64:                                          ; preds = %for.end, %sw.bb58
  %pp.addr.5 = phi i8* [ %incdec.ptr59, %sw.bb58 ], [ %pp.addr.1.lcssa, %for.end ]
  %cp.addr.5 = phi i32* [ %incdec.ptr63, %sw.bb58 ], [ %cp.addr.1.lcssa, %for.end ]
  %incdec.ptr65 = getelementptr inbounds i8, i8* %pp.addr.5, i64 1
  %13 = load i8, i8* %pp.addr.5, align 1, !tbaa !36
  %idxprom66 = zext i8 %13 to i64
  %arrayidx67 = getelementptr inbounds i32*, i32** %0, i64 %idxprom66
  %14 = load i32*, i32** %arrayidx67, align 8, !tbaa !31
  %15 = load i32, i32* %14, align 4, !tbaa !38
  %incdec.ptr69 = getelementptr inbounds i32, i32* %cp.addr.5, i64 1
  store i32 %15, i32* %cp.addr.5, align 4, !tbaa !38
  br label %sw.bb70

sw.bb70:                                          ; preds = %for.end, %sw.bb64
  %pp.addr.6 = phi i8* [ %incdec.ptr65, %sw.bb64 ], [ %pp.addr.1.lcssa, %for.end ]
  %cp.addr.6 = phi i32* [ %incdec.ptr69, %sw.bb64 ], [ %cp.addr.1.lcssa, %for.end ]
  %incdec.ptr71 = getelementptr inbounds i8, i8* %pp.addr.6, i64 1
  %16 = load i8, i8* %pp.addr.6, align 1, !tbaa !36
  %idxprom72 = zext i8 %16 to i64
  %arrayidx73 = getelementptr inbounds i32*, i32** %0, i64 %idxprom72
  %17 = load i32*, i32** %arrayidx73, align 8, !tbaa !31
  %18 = load i32, i32* %17, align 4, !tbaa !38
  %incdec.ptr75 = getelementptr inbounds i32, i32* %cp.addr.6, i64 1
  store i32 %18, i32* %cp.addr.6, align 4, !tbaa !38
  br label %sw.bb76

sw.bb76:                                          ; preds = %for.end, %sw.bb70
  %pp.addr.7 = phi i8* [ %incdec.ptr71, %sw.bb70 ], [ %pp.addr.1.lcssa, %for.end ]
  %cp.addr.7 = phi i32* [ %incdec.ptr75, %sw.bb70 ], [ %cp.addr.1.lcssa, %for.end ]
  %incdec.ptr77 = getelementptr inbounds i8, i8* %pp.addr.7, i64 1
  %19 = load i8, i8* %pp.addr.7, align 1, !tbaa !36
  %idxprom78 = zext i8 %19 to i64
  %arrayidx79 = getelementptr inbounds i32*, i32** %0, i64 %idxprom78
  %20 = load i32*, i32** %arrayidx79, align 8, !tbaa !31
  %21 = load i32, i32* %20, align 4, !tbaa !38
  %incdec.ptr81 = getelementptr inbounds i32, i32* %cp.addr.7, i64 1
  store i32 %21, i32* %cp.addr.7, align 4, !tbaa !38
  br label %if.end

if.end:                                           ; preds = %for.end, %sw.bb76
  %pp.addr.8 = phi i8* [ %incdec.ptr77, %sw.bb76 ], [ %pp.addr.1.lcssa, %for.end ]
  %cp.addr.8 = phi i32* [ %incdec.ptr81, %sw.bb76 ], [ %cp.addr.1.lcssa, %for.end ]
  %add.ptr = getelementptr inbounds i32, i32* %cp.addr.8, i64 %idx.ext
  %add.ptr83 = getelementptr inbounds i8, i8* %pp.addr.8, i64 %idx.ext82
  %cmp.not = icmp eq i32 %dec143, 0
  br i1 %cmp.not, label %while.end.loopexit, label %for.cond.preheader, !llvm.loop !72

while.end.loopexit:                               ; preds = %if.end
  br label %while.end

while.end:                                        ; preds = %while.end.loopexit, %entry
  ret void

rolled.pre:                                       ; preds = %for.body
  br label %rolled.loop

rolled.loop:                                      ; preds = %rolled.pre, %rolled.loop
  %22 = phi i8 [ 0, %rolled.pre ], [ %34, %rolled.loop ]
  %23 = zext i8 %22 to i64
  %24 = add i64 %23, 1
  %25 = getelementptr i8, i8* %pp.addr.1134, i64 %24
  %26 = load i8, i8* %25, align 1
  %27 = zext i8 %26 to i64
  %28 = getelementptr inbounds i32*, i32** %0, i64 %27
  %29 = load i32*, i32** %28, align 8
  %30 = load i32, i32* %29, align 4
  %31 = zext i8 %22 to i64
  %32 = add i64 %31, 1
  %33 = getelementptr i32, i32* %cp.addr.1135, i64 %32
  store i32 %30, i32* %33, align 4
  %34 = add i8 %22, 1
  %35 = icmp ne i8 %34, 8
  br i1 %35, label %rolled.loop, label %rolled.exit

rolled.exit:                                      ; preds = %rolled.loop
  %36 = add i32 %_x.0136, -8
  %37 = icmp ugt i32 %36, 7
  br i1 %37, label %for.body, label %for.end.loopexit, !llvm.loop !73
}

code gen 1
destroying tree
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   %3 = load i32, i32* %2, align 4, !tbaa !11
Here ..
Skipping:   %incdec.ptr4 = getelementptr inbounds i32, i32* %cp.addr.130, i64 1
Here ..
Skipping:   %incdec.ptr6 = getelementptr inbounds i32, i32* %cp.addr.130, i64 2
Here ..
I:   %sub = add i32 %_x.031, -2
Last:   %sub = add i32 %_x.031, -2
Schedulable: 1
code gen 0
Gains: 6 - 6 = 0
Unprofitable: deleting generated code
Done!
code gen 1
destroying tree
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   %3 = load i32, i32* %2, align 4, !tbaa !11
Here ..
Skipping:   %incdec.ptr4 = getelementptr inbounds i32, i32* %cp.addr.150, i64 1
Skipping:   %incdec.ptr5 = getelementptr inbounds i32, i32* %2, i64 2
Here ..
Skipping:   %incdec.ptr6 = getelementptr inbounds i32, i32* %cp.addr.150, i64 2
Skipping:   %incdec.ptr7 = getelementptr inbounds i32, i32* %2, i64 3
Here ..
Skipping:   %incdec.ptr8 = getelementptr inbounds i32, i32* %cp.addr.150, i64 3
Here ..
Skipping:   %incdec.ptr10 = getelementptr inbounds i32, i32* %cp.addr.150, i64 4
Here ..
I:   %sub = add i32 %_x.051, -4
Last:   %sub = add i32 %_x.051, -4
Schedulable: 1
code gen 0
Gains: 14 - 8 = 6
Unprofitable: deleting generated code
Done!
code gen 1
destroying tree
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   %3 = load i32, i32* %2, align 4, !tbaa !11
Here ..
Skipping:   %incdec.ptr4 = getelementptr inbounds i32, i32* %cp.addr.186, i64 1
Skipping:   %incdec.ptr5 = getelementptr inbounds i32, i32* %2, i64 2
Here ..
Skipping:   %incdec.ptr6 = getelementptr inbounds i32, i32* %cp.addr.186, i64 2
Skipping:   %incdec.ptr7 = getelementptr inbounds i32, i32* %2, i64 3
Here ..
Skipping:   %incdec.ptr8 = getelementptr inbounds i32, i32* %cp.addr.186, i64 3
Skipping:   %incdec.ptr9 = getelementptr inbounds i32, i32* %2, i64 4
Here ..
Skipping:   %incdec.ptr10 = getelementptr inbounds i32, i32* %cp.addr.186, i64 4
Skipping:   %incdec.ptr11 = getelementptr inbounds i32, i32* %2, i64 5
Here ..
Skipping:   %incdec.ptr12 = getelementptr inbounds i32, i32* %cp.addr.186, i64 5
Skipping:   %incdec.ptr13 = getelementptr inbounds i32, i32* %2, i64 6
Here ..
Skipping:   %incdec.ptr14 = getelementptr inbounds i32, i32* %cp.addr.186, i64 6
Skipping:   %incdec.ptr15 = getelementptr inbounds i32, i32* %2, i64 7
Here ..
Skipping:   %incdec.ptr16 = getelementptr inbounds i32, i32* %cp.addr.186, i64 7
Here ..
Skipping:   %incdec.ptr18 = getelementptr inbounds i32, i32* %cp.addr.186, i64 8
Here ..
I:   %sub = add i32 %_x.087, -8
Last:   %sub = add i32 %_x.087, -8
Schedulable: 1
code gen 0
Gains: 30 - 8 = 22
Profitable: finishing code generation
; Function Attrs: nofree norecurse nounwind optsize uwtable
define internal void @put1bitcmaptile(%struct._TIFFRGBAImage* nocapture readonly %img, i32* nocapture %cp, i32 %x, i32 %y, i32 %w, i32 %h, i32 %fromskew, i32 %toskew, i8* nocapture readonly %pp) #5 {
entry:
  %PALmap1 = getelementptr inbounds %struct._TIFFRGBAImage, %struct._TIFFRGBAImage* %img, i64 0, i32 17
  %0 = load i32**, i32*** %PALmap1, align 8, !tbaa !20
  %cmp.not91 = icmp eq i32 %h, 0
  br i1 %cmp.not91, label %while.end, label %for.cond.preheader.lr.ph

for.cond.preheader.lr.ph:                         ; preds = %entry
  %div = sdiv i32 %fromskew, 8
  %cmp284 = icmp ugt i32 %w, 7
  %idx.ext = sext i32 %toskew to i64
  %idx.ext43 = sext i32 %div to i64
  br label %for.cond.preheader

for.cond.preheader:                               ; preds = %for.cond.preheader.lr.ph, %if.end
  %dec94.in = phi i32 [ %h, %for.cond.preheader.lr.ph ], [ %dec94, %if.end ]
  %cp.addr.093 = phi i32* [ %cp, %for.cond.preheader.lr.ph ], [ %add.ptr, %if.end ]
  %pp.addr.092 = phi i8* [ %pp, %for.cond.preheader.lr.ph ], [ %add.ptr44, %if.end ]
  %dec94 = add i32 %dec94.in, -1
  br i1 %cmp284, label %for.body.preheader, label %for.end

for.body.preheader:                               ; preds = %for.cond.preheader
  br label %for.body

for.body:                                         ; preds = %for.body.preheader, %for.body
  %_x.087 = phi i32 [ %sub, %for.body ], [ %w, %for.body.preheader ]
  %cp.addr.186 = phi i32* [ %incdec.ptr18, %for.body ], [ %cp.addr.093, %for.body.preheader ]
  %pp.addr.185 = phi i8* [ %incdec.ptr, %for.body ], [ %pp.addr.092, %for.body.preheader ]
  %incdec.ptr = getelementptr inbounds i8, i8* %pp.addr.185, i64 1
  %1 = load i8, i8* %pp.addr.185, align 1, !tbaa !36
  %idxprom = zext i8 %1 to i64
  %arrayidx = getelementptr inbounds i32*, i32** %0, i64 %idxprom
  %2 = load i32*, i32** %arrayidx, align 8, !tbaa !31
  %incdec.ptr3 = getelementptr inbounds i32, i32* %2, i64 1
  %3 = load i32, i32* %2, align 4, !tbaa !38
  %incdec.ptr4 = getelementptr inbounds i32, i32* %cp.addr.186, i64 1
  store i32 %3, i32* %cp.addr.186, align 4, !tbaa !38
  %incdec.ptr5 = getelementptr inbounds i32, i32* %2, i64 2
  %4 = load i32, i32* %incdec.ptr3, align 4, !tbaa !38
  %incdec.ptr6 = getelementptr inbounds i32, i32* %cp.addr.186, i64 2
  store i32 %4, i32* %incdec.ptr4, align 4, !tbaa !38
  %incdec.ptr7 = getelementptr inbounds i32, i32* %2, i64 3
  %5 = load i32, i32* %incdec.ptr5, align 4, !tbaa !38
  %incdec.ptr8 = getelementptr inbounds i32, i32* %cp.addr.186, i64 3
  store i32 %5, i32* %incdec.ptr6, align 4, !tbaa !38
  %incdec.ptr9 = getelementptr inbounds i32, i32* %2, i64 4
  %6 = load i32, i32* %incdec.ptr7, align 4, !tbaa !38
  %incdec.ptr10 = getelementptr inbounds i32, i32* %cp.addr.186, i64 4
  store i32 %6, i32* %incdec.ptr8, align 4, !tbaa !38
  %incdec.ptr11 = getelementptr inbounds i32, i32* %2, i64 5
  %7 = load i32, i32* %incdec.ptr9, align 4, !tbaa !38
  %incdec.ptr12 = getelementptr inbounds i32, i32* %cp.addr.186, i64 5
  store i32 %7, i32* %incdec.ptr10, align 4, !tbaa !38
  %incdec.ptr13 = getelementptr inbounds i32, i32* %2, i64 6
  %8 = load i32, i32* %incdec.ptr11, align 4, !tbaa !38
  %incdec.ptr14 = getelementptr inbounds i32, i32* %cp.addr.186, i64 6
  store i32 %8, i32* %incdec.ptr12, align 4, !tbaa !38
  %incdec.ptr15 = getelementptr inbounds i32, i32* %2, i64 7
  %9 = load i32, i32* %incdec.ptr13, align 4, !tbaa !38
  %incdec.ptr16 = getelementptr inbounds i32, i32* %cp.addr.186, i64 7
  store i32 %9, i32* %incdec.ptr14, align 4, !tbaa !38
  %10 = load i32, i32* %incdec.ptr15, align 4, !tbaa !38
  %incdec.ptr18 = getelementptr inbounds i32, i32* %cp.addr.186, i64 8
  store i32 %10, i32* %incdec.ptr16, align 4, !tbaa !38
  %sub = add i32 %_x.087, -8
  %cmp2 = icmp ugt i32 %sub, 7
  br i1 %cmp2, label %for.body, label %for.end.loopexit, !llvm.loop !78

for.end.loopexit:                                 ; preds = %for.body
  %incdec.ptr.lcssa = phi i8* [ %incdec.ptr, %for.body ]
  %incdec.ptr18.lcssa = phi i32* [ %incdec.ptr18, %for.body ]
  %sub.lcssa = phi i32 [ %sub, %for.body ]
  br label %for.end

for.end:                                          ; preds = %for.end.loopexit, %for.cond.preheader
  %pp.addr.1.lcssa = phi i8* [ %pp.addr.092, %for.cond.preheader ], [ %incdec.ptr.lcssa, %for.end.loopexit ]
  %cp.addr.1.lcssa = phi i32* [ %cp.addr.093, %for.cond.preheader ], [ %incdec.ptr18.lcssa, %for.end.loopexit ]
  %_x.0.lcssa = phi i32 [ %w, %for.cond.preheader ], [ %sub.lcssa, %for.end.loopexit ]
  %cmp19.not = icmp eq i32 %_x.0.lcssa, 0
  br i1 %cmp19.not, label %if.end, label %if.then

if.then:                                          ; preds = %for.end
  %incdec.ptr20 = getelementptr inbounds i8, i8* %pp.addr.1.lcssa, i64 1
  %11 = load i8, i8* %pp.addr.1.lcssa, align 1, !tbaa !36
  %idxprom21 = zext i8 %11 to i64
  %arrayidx22 = getelementptr inbounds i32*, i32** %0, i64 %idxprom21
  %12 = load i32*, i32** %arrayidx22, align 8, !tbaa !31
  switch i32 %_x.0.lcssa, label %if.end [
    i32 7, label %sw.bb
    i32 6, label %sw.bb25
    i32 5, label %sw.bb28
    i32 4, label %sw.bb31
    i32 3, label %sw.bb34
    i32 2, label %sw.bb37
    i32 1, label %sw.bb40
  ]

sw.bb:                                            ; preds = %if.then
  %incdec.ptr23 = getelementptr inbounds i32, i32* %12, i64 1
  %13 = load i32, i32* %12, align 4, !tbaa !38
  %incdec.ptr24 = getelementptr inbounds i32, i32* %cp.addr.1.lcssa, i64 1
  store i32 %13, i32* %cp.addr.1.lcssa, align 4, !tbaa !38
  br label %sw.bb25

sw.bb25:                                          ; preds = %if.then, %sw.bb
  %cp.addr.2 = phi i32* [ %cp.addr.1.lcssa, %if.then ], [ %incdec.ptr24, %sw.bb ]
  %bw.0 = phi i32* [ %12, %if.then ], [ %incdec.ptr23, %sw.bb ]
  %incdec.ptr26 = getelementptr inbounds i32, i32* %bw.0, i64 1
  %14 = load i32, i32* %bw.0, align 4, !tbaa !38
  %incdec.ptr27 = getelementptr inbounds i32, i32* %cp.addr.2, i64 1
  store i32 %14, i32* %cp.addr.2, align 4, !tbaa !38
  br label %sw.bb28

sw.bb28:                                          ; preds = %if.then, %sw.bb25
  %cp.addr.3 = phi i32* [ %cp.addr.1.lcssa, %if.then ], [ %incdec.ptr27, %sw.bb25 ]
  %bw.1 = phi i32* [ %12, %if.then ], [ %incdec.ptr26, %sw.bb25 ]
  %incdec.ptr29 = getelementptr inbounds i32, i32* %bw.1, i64 1
  %15 = load i32, i32* %bw.1, align 4, !tbaa !38
  %incdec.ptr30 = getelementptr inbounds i32, i32* %cp.addr.3, i64 1
  store i32 %15, i32* %cp.addr.3, align 4, !tbaa !38
  br label %sw.bb31

sw.bb31:                                          ; preds = %if.then, %sw.bb28
  %cp.addr.4 = phi i32* [ %cp.addr.1.lcssa, %if.then ], [ %incdec.ptr30, %sw.bb28 ]
  %bw.2 = phi i32* [ %12, %if.then ], [ %incdec.ptr29, %sw.bb28 ]
  %incdec.ptr32 = getelementptr inbounds i32, i32* %bw.2, i64 1
  %16 = load i32, i32* %bw.2, align 4, !tbaa !38
  %incdec.ptr33 = getelementptr inbounds i32, i32* %cp.addr.4, i64 1
  store i32 %16, i32* %cp.addr.4, align 4, !tbaa !38
  br label %sw.bb34

sw.bb34:                                          ; preds = %if.then, %sw.bb31
  %cp.addr.5 = phi i32* [ %cp.addr.1.lcssa, %if.then ], [ %incdec.ptr33, %sw.bb31 ]
  %bw.3 = phi i32* [ %12, %if.then ], [ %incdec.ptr32, %sw.bb31 ]
  %incdec.ptr35 = getelementptr inbounds i32, i32* %bw.3, i64 1
  %17 = load i32, i32* %bw.3, align 4, !tbaa !38
  %incdec.ptr36 = getelementptr inbounds i32, i32* %cp.addr.5, i64 1
  store i32 %17, i32* %cp.addr.5, align 4, !tbaa !38
  br label %sw.bb37

sw.bb37:                                          ; preds = %if.then, %sw.bb34
  %cp.addr.6 = phi i32* [ %cp.addr.1.lcssa, %if.then ], [ %incdec.ptr36, %sw.bb34 ]
  %bw.4 = phi i32* [ %12, %if.then ], [ %incdec.ptr35, %sw.bb34 ]
  %incdec.ptr38 = getelementptr inbounds i32, i32* %bw.4, i64 1
  %18 = load i32, i32* %bw.4, align 4, !tbaa !38
  %incdec.ptr39 = getelementptr inbounds i32, i32* %cp.addr.6, i64 1
  store i32 %18, i32* %cp.addr.6, align 4, !tbaa !38
  br label %sw.bb40

sw.bb40:                                          ; preds = %if.then, %sw.bb37
  %cp.addr.7 = phi i32* [ %cp.addr.1.lcssa, %if.then ], [ %incdec.ptr39, %sw.bb37 ]
  %bw.5 = phi i32* [ %12, %if.then ], [ %incdec.ptr38, %sw.bb37 ]
  %19 = load i32, i32* %bw.5, align 4, !tbaa !38
  %incdec.ptr42 = getelementptr inbounds i32, i32* %cp.addr.7, i64 1
  store i32 %19, i32* %cp.addr.7, align 4, !tbaa !38
  br label %if.end

if.end:                                           ; preds = %if.then, %sw.bb40, %for.end
  %pp.addr.2 = phi i8* [ %incdec.ptr20, %if.then ], [ %incdec.ptr20, %sw.bb40 ], [ %pp.addr.1.lcssa, %for.end ]
  %cp.addr.8 = phi i32* [ %cp.addr.1.lcssa, %if.then ], [ %incdec.ptr42, %sw.bb40 ], [ %cp.addr.1.lcssa, %for.end ]
  %add.ptr = getelementptr inbounds i32, i32* %cp.addr.8, i64 %idx.ext
  %add.ptr44 = getelementptr inbounds i8, i8* %pp.addr.2, i64 %idx.ext43
  %cmp.not = icmp eq i32 %dec94, 0
  br i1 %cmp.not, label %while.end.loopexit, label %for.cond.preheader, !llvm.loop !79

while.end.loopexit:                               ; preds = %if.end
  br label %while.end

while.end:                                        ; preds = %while.end.loopexit, %entry
  ret void

rolled.pre:                                       ; No predecessors!

rolled.loop:                                      ; No predecessors!
  %20 = phi i8 
  %21 = zext i8 %20 to i64
  %22 = add i64 %21, 1
  %23 = getelementptr i32, i32* %2, i64 %22
  %24 = load i32, i32* %23, align 4
  %25 = zext i8 %20 to i64
  %26 = add i64 %25, 1
  %27 = getelementptr i32, i32* %cp.addr.186, i64 %26
  store i32 %24, i32* %27, align 4
  %28 = add i8 %20, 1
  %29 = icmp ne i8 %28, 8

rolled.exit:                                      ; No predecessors!
}

Done!
; Function Attrs: nofree norecurse nounwind optsize uwtable
define internal void @put1bitcmaptile(%struct._TIFFRGBAImage* nocapture readonly %img, i32* nocapture %cp, i32 %x, i32 %y, i32 %w, i32 %h, i32 %fromskew, i32 %toskew, i8* nocapture readonly %pp) #5 {
entry:
  %PALmap1 = getelementptr inbounds %struct._TIFFRGBAImage, %struct._TIFFRGBAImage* %img, i64 0, i32 17
  %0 = load i32**, i32*** %PALmap1, align 8, !tbaa !20
  %cmp.not91 = icmp eq i32 %h, 0
  br i1 %cmp.not91, label %while.end, label %for.cond.preheader.lr.ph

for.cond.preheader.lr.ph:                         ; preds = %entry
  %div = sdiv i32 %fromskew, 8
  %cmp284 = icmp ugt i32 %w, 7
  %idx.ext = sext i32 %toskew to i64
  %idx.ext43 = sext i32 %div to i64
  br label %for.cond.preheader

for.cond.preheader:                               ; preds = %for.cond.preheader.lr.ph, %if.end
  %dec94.in = phi i32 [ %h, %for.cond.preheader.lr.ph ], [ %dec94, %if.end ]
  %cp.addr.093 = phi i32* [ %cp, %for.cond.preheader.lr.ph ], [ %add.ptr, %if.end ]
  %pp.addr.092 = phi i8* [ %pp, %for.cond.preheader.lr.ph ], [ %add.ptr44, %if.end ]
  %dec94 = add i32 %dec94.in, -1
  br i1 %cmp284, label %for.body.preheader, label %for.end

for.body.preheader:                               ; preds = %for.cond.preheader
  br label %for.body

for.body:                                         ; preds = %for.body.preheader, %rolled.exit
  %_x.087 = phi i32 [ %22, %rolled.exit ], [ %w, %for.body.preheader ]
  %cp.addr.186 = phi i32* [ %incdec.ptr18, %rolled.exit ], [ %cp.addr.093, %for.body.preheader ]
  %pp.addr.185 = phi i8* [ %incdec.ptr, %rolled.exit ], [ %pp.addr.092, %for.body.preheader ]
  %incdec.ptr = getelementptr inbounds i8, i8* %pp.addr.185, i64 1
  %1 = load i8, i8* %pp.addr.185, align 1, !tbaa !36
  %idxprom = zext i8 %1 to i64
  %arrayidx = getelementptr inbounds i32*, i32** %0, i64 %idxprom
  %2 = load i32*, i32** %arrayidx, align 8, !tbaa !31
  %incdec.ptr18 = getelementptr inbounds i32, i32* %cp.addr.186, i64 8
  br label %rolled.pre

for.end.loopexit:                                 ; preds = %rolled.exit
  %incdec.ptr.lcssa = phi i8* [ %incdec.ptr, %rolled.exit ]
  %incdec.ptr18.lcssa = phi i32* [ %incdec.ptr18, %rolled.exit ]
  %sub.lcssa = phi i32 [ %22, %rolled.exit ]
  br label %for.end

for.end:                                          ; preds = %for.end.loopexit, %for.cond.preheader
  %pp.addr.1.lcssa = phi i8* [ %pp.addr.092, %for.cond.preheader ], [ %incdec.ptr.lcssa, %for.end.loopexit ]
  %cp.addr.1.lcssa = phi i32* [ %cp.addr.093, %for.cond.preheader ], [ %incdec.ptr18.lcssa, %for.end.loopexit ]
  %_x.0.lcssa = phi i32 [ %w, %for.cond.preheader ], [ %sub.lcssa, %for.end.loopexit ]
  %cmp19.not = icmp eq i32 %_x.0.lcssa, 0
  br i1 %cmp19.not, label %if.end, label %if.then

if.then:                                          ; preds = %for.end
  %incdec.ptr20 = getelementptr inbounds i8, i8* %pp.addr.1.lcssa, i64 1
  %3 = load i8, i8* %pp.addr.1.lcssa, align 1, !tbaa !36
  %idxprom21 = zext i8 %3 to i64
  %arrayidx22 = getelementptr inbounds i32*, i32** %0, i64 %idxprom21
  %4 = load i32*, i32** %arrayidx22, align 8, !tbaa !31
  switch i32 %_x.0.lcssa, label %if.end [
    i32 7, label %sw.bb
    i32 6, label %sw.bb25
    i32 5, label %sw.bb28
    i32 4, label %sw.bb31
    i32 3, label %sw.bb34
    i32 2, label %sw.bb37
    i32 1, label %sw.bb40
  ]

sw.bb:                                            ; preds = %if.then
  %incdec.ptr23 = getelementptr inbounds i32, i32* %4, i64 1
  %5 = load i32, i32* %4, align 4, !tbaa !38
  %incdec.ptr24 = getelementptr inbounds i32, i32* %cp.addr.1.lcssa, i64 1
  store i32 %5, i32* %cp.addr.1.lcssa, align 4, !tbaa !38
  br label %sw.bb25

sw.bb25:                                          ; preds = %if.then, %sw.bb
  %cp.addr.2 = phi i32* [ %cp.addr.1.lcssa, %if.then ], [ %incdec.ptr24, %sw.bb ]
  %bw.0 = phi i32* [ %4, %if.then ], [ %incdec.ptr23, %sw.bb ]
  %incdec.ptr26 = getelementptr inbounds i32, i32* %bw.0, i64 1
  %6 = load i32, i32* %bw.0, align 4, !tbaa !38
  %incdec.ptr27 = getelementptr inbounds i32, i32* %cp.addr.2, i64 1
  store i32 %6, i32* %cp.addr.2, align 4, !tbaa !38
  br label %sw.bb28

sw.bb28:                                          ; preds = %if.then, %sw.bb25
  %cp.addr.3 = phi i32* [ %cp.addr.1.lcssa, %if.then ], [ %incdec.ptr27, %sw.bb25 ]
  %bw.1 = phi i32* [ %4, %if.then ], [ %incdec.ptr26, %sw.bb25 ]
  %incdec.ptr29 = getelementptr inbounds i32, i32* %bw.1, i64 1
  %7 = load i32, i32* %bw.1, align 4, !tbaa !38
  %incdec.ptr30 = getelementptr inbounds i32, i32* %cp.addr.3, i64 1
  store i32 %7, i32* %cp.addr.3, align 4, !tbaa !38
  br label %sw.bb31

sw.bb31:                                          ; preds = %if.then, %sw.bb28
  %cp.addr.4 = phi i32* [ %cp.addr.1.lcssa, %if.then ], [ %incdec.ptr30, %sw.bb28 ]
  %bw.2 = phi i32* [ %4, %if.then ], [ %incdec.ptr29, %sw.bb28 ]
  %incdec.ptr32 = getelementptr inbounds i32, i32* %bw.2, i64 1
  %8 = load i32, i32* %bw.2, align 4, !tbaa !38
  %incdec.ptr33 = getelementptr inbounds i32, i32* %cp.addr.4, i64 1
  store i32 %8, i32* %cp.addr.4, align 4, !tbaa !38
  br label %sw.bb34

sw.bb34:                                          ; preds = %if.then, %sw.bb31
  %cp.addr.5 = phi i32* [ %cp.addr.1.lcssa, %if.then ], [ %incdec.ptr33, %sw.bb31 ]
  %bw.3 = phi i32* [ %4, %if.then ], [ %incdec.ptr32, %sw.bb31 ]
  %incdec.ptr35 = getelementptr inbounds i32, i32* %bw.3, i64 1
  %9 = load i32, i32* %bw.3, align 4, !tbaa !38
  %incdec.ptr36 = getelementptr inbounds i32, i32* %cp.addr.5, i64 1
  store i32 %9, i32* %cp.addr.5, align 4, !tbaa !38
  br label %sw.bb37

sw.bb37:                                          ; preds = %if.then, %sw.bb34
  %cp.addr.6 = phi i32* [ %cp.addr.1.lcssa, %if.then ], [ %incdec.ptr36, %sw.bb34 ]
  %bw.4 = phi i32* [ %4, %if.then ], [ %incdec.ptr35, %sw.bb34 ]
  %incdec.ptr38 = getelementptr inbounds i32, i32* %bw.4, i64 1
  %10 = load i32, i32* %bw.4, align 4, !tbaa !38
  %incdec.ptr39 = getelementptr inbounds i32, i32* %cp.addr.6, i64 1
  store i32 %10, i32* %cp.addr.6, align 4, !tbaa !38
  br label %sw.bb40

sw.bb40:                                          ; preds = %if.then, %sw.bb37
  %cp.addr.7 = phi i32* [ %cp.addr.1.lcssa, %if.then ], [ %incdec.ptr39, %sw.bb37 ]
  %bw.5 = phi i32* [ %4, %if.then ], [ %incdec.ptr38, %sw.bb37 ]
  %11 = load i32, i32* %bw.5, align 4, !tbaa !38
  %incdec.ptr42 = getelementptr inbounds i32, i32* %cp.addr.7, i64 1
  store i32 %11, i32* %cp.addr.7, align 4, !tbaa !38
  br label %if.end

if.end:                                           ; preds = %if.then, %sw.bb40, %for.end
  %pp.addr.2 = phi i8* [ %incdec.ptr20, %if.then ], [ %incdec.ptr20, %sw.bb40 ], [ %pp.addr.1.lcssa, %for.end ]
  %cp.addr.8 = phi i32* [ %cp.addr.1.lcssa, %if.then ], [ %incdec.ptr42, %sw.bb40 ], [ %cp.addr.1.lcssa, %for.end ]
  %add.ptr = getelementptr inbounds i32, i32* %cp.addr.8, i64 %idx.ext
  %add.ptr44 = getelementptr inbounds i8, i8* %pp.addr.2, i64 %idx.ext43
  %cmp.not = icmp eq i32 %dec94, 0
  br i1 %cmp.not, label %while.end.loopexit, label %for.cond.preheader, !llvm.loop !78

while.end.loopexit:                               ; preds = %if.end
  br label %while.end

while.end:                                        ; preds = %while.end.loopexit, %entry
  ret void

rolled.pre:                                       ; preds = %for.body
  br label %rolled.loop

rolled.loop:                                      ; preds = %rolled.pre, %rolled.loop
  %12 = phi i8 [ 0, %rolled.pre ], [ %20, %rolled.loop ]
  %13 = zext i8 %12 to i64
  %14 = add i64 %13, 1
  %15 = getelementptr i32, i32* %2, i64 %14
  %16 = load i32, i32* %15, align 4
  %17 = zext i8 %12 to i64
  %18 = add i64 %17, 1
  %19 = getelementptr i32, i32* %cp.addr.186, i64 %18
  store i32 %16, i32* %19, align 4
  %20 = add i8 %12, 1
  %21 = icmp ne i8 %20, 8
  br i1 %21, label %rolled.loop, label %rolled.exit

rolled.exit:                                      ; preds = %rolled.loop
  %22 = add i32 %_x.087, -8
  %23 = icmp ugt i32 %22, 7
  br i1 %23, label %for.body, label %for.end.loopexit, !llvm.loop !79
}

code gen 1
destroying tree
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   %3 = load i32, i32* %2, align 4, !tbaa !11
Here ..
Skipping:   %incdec.ptr4 = getelementptr inbounds i32, i32* %cp.addr.130, i64 1
Here ..
Skipping:   %incdec.ptr6 = getelementptr inbounds i32, i32* %cp.addr.130, i64 2
Here ..
I:   %sub = add i32 %_x.031, -2
Last:   %sub = add i32 %_x.031, -2
Schedulable: 1
code gen 0
Gains: 6 - 6 = 0
Unprofitable: deleting generated code
Done!
code gen 1
destroying tree
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   %3 = load i32, i32* %2, align 4, !tbaa !11
Here ..
Skipping:   %incdec.ptr4 = getelementptr inbounds i32, i32* %cp.addr.150, i64 1
Skipping:   %incdec.ptr5 = getelementptr inbounds i32, i32* %2, i64 2
Here ..
Skipping:   %incdec.ptr6 = getelementptr inbounds i32, i32* %cp.addr.150, i64 2
Skipping:   %incdec.ptr7 = getelementptr inbounds i32, i32* %2, i64 3
Here ..
Skipping:   %incdec.ptr8 = getelementptr inbounds i32, i32* %cp.addr.150, i64 3
Here ..
Skipping:   %incdec.ptr10 = getelementptr inbounds i32, i32* %cp.addr.150, i64 4
Here ..
I:   %sub = add i32 %_x.051, -4
Last:   %sub = add i32 %_x.051, -4
Schedulable: 1
code gen 0
Gains: 14 - 8 = 6
Unprofitable: deleting generated code
Done!
code gen 1
destroying tree
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   %3 = load i32, i32* %2, align 4, !tbaa !11
Here ..
Skipping:   %incdec.ptr4 = getelementptr inbounds i32, i32* %cp.addr.186, i64 1
Skipping:   %incdec.ptr5 = getelementptr inbounds i32, i32* %2, i64 2
Here ..
Skipping:   %incdec.ptr6 = getelementptr inbounds i32, i32* %cp.addr.186, i64 2
Skipping:   %incdec.ptr7 = getelementptr inbounds i32, i32* %2, i64 3
Here ..
Skipping:   %incdec.ptr8 = getelementptr inbounds i32, i32* %cp.addr.186, i64 3
Skipping:   %incdec.ptr9 = getelementptr inbounds i32, i32* %2, i64 4
Here ..
Skipping:   %incdec.ptr10 = getelementptr inbounds i32, i32* %cp.addr.186, i64 4
Skipping:   %incdec.ptr11 = getelementptr inbounds i32, i32* %2, i64 5
Here ..
Skipping:   %incdec.ptr12 = getelementptr inbounds i32, i32* %cp.addr.186, i64 5
Skipping:   %incdec.ptr13 = getelementptr inbounds i32, i32* %2, i64 6
Here ..
Skipping:   %incdec.ptr14 = getelementptr inbounds i32, i32* %cp.addr.186, i64 6
Skipping:   %incdec.ptr15 = getelementptr inbounds i32, i32* %2, i64 7
Here ..
Skipping:   %incdec.ptr16 = getelementptr inbounds i32, i32* %cp.addr.186, i64 7
Here ..
Skipping:   %incdec.ptr18 = getelementptr inbounds i32, i32* %cp.addr.186, i64 8
Here ..
I:   %sub = add i32 %_x.087, -8
Last:   %sub = add i32 %_x.087, -8
Schedulable: 1
code gen 0
Gains: 30 - 8 = 22
Profitable: finishing code generation
; Function Attrs: nofree norecurse nounwind optsize uwtable
define internal void @put1bitbwtile(%struct._TIFFRGBAImage* nocapture readonly %img, i32* nocapture %cp, i32 %x, i32 %y, i32 %w, i32 %h, i32 %fromskew, i32 %toskew, i8* nocapture readonly %pp) #5 {
entry:
  %BWmap1 = getelementptr inbounds %struct._TIFFRGBAImage, %struct._TIFFRGBAImage* %img, i64 0, i32 16
  %0 = load i32**, i32*** %BWmap1, align 8, !tbaa !19
  %cmp.not91 = icmp eq i32 %h, 0
  br i1 %cmp.not91, label %while.end, label %for.cond.preheader.lr.ph

for.cond.preheader.lr.ph:                         ; preds = %entry
  %div = sdiv i32 %fromskew, 8
  %cmp284 = icmp ugt i32 %w, 7
  %idx.ext = sext i32 %toskew to i64
  %idx.ext43 = sext i32 %div to i64
  br label %for.cond.preheader

for.cond.preheader:                               ; preds = %for.cond.preheader.lr.ph, %if.end
  %dec94.in = phi i32 [ %h, %for.cond.preheader.lr.ph ], [ %dec94, %if.end ]
  %cp.addr.093 = phi i32* [ %cp, %for.cond.preheader.lr.ph ], [ %add.ptr, %if.end ]
  %pp.addr.092 = phi i8* [ %pp, %for.cond.preheader.lr.ph ], [ %add.ptr44, %if.end ]
  %dec94 = add i32 %dec94.in, -1
  br i1 %cmp284, label %for.body.preheader, label %for.end

for.body.preheader:                               ; preds = %for.cond.preheader
  br label %for.body

for.body:                                         ; preds = %for.body.preheader, %for.body
  %_x.087 = phi i32 [ %sub, %for.body ], [ %w, %for.body.preheader ]
  %cp.addr.186 = phi i32* [ %incdec.ptr18, %for.body ], [ %cp.addr.093, %for.body.preheader ]
  %pp.addr.185 = phi i8* [ %incdec.ptr, %for.body ], [ %pp.addr.092, %for.body.preheader ]
  %incdec.ptr = getelementptr inbounds i8, i8* %pp.addr.185, i64 1
  %1 = load i8, i8* %pp.addr.185, align 1, !tbaa !36
  %idxprom = zext i8 %1 to i64
  %arrayidx = getelementptr inbounds i32*, i32** %0, i64 %idxprom
  %2 = load i32*, i32** %arrayidx, align 8, !tbaa !31
  %incdec.ptr3 = getelementptr inbounds i32, i32* %2, i64 1
  %3 = load i32, i32* %2, align 4, !tbaa !38
  %incdec.ptr4 = getelementptr inbounds i32, i32* %cp.addr.186, i64 1
  store i32 %3, i32* %cp.addr.186, align 4, !tbaa !38
  %incdec.ptr5 = getelementptr inbounds i32, i32* %2, i64 2
  %4 = load i32, i32* %incdec.ptr3, align 4, !tbaa !38
  %incdec.ptr6 = getelementptr inbounds i32, i32* %cp.addr.186, i64 2
  store i32 %4, i32* %incdec.ptr4, align 4, !tbaa !38
  %incdec.ptr7 = getelementptr inbounds i32, i32* %2, i64 3
  %5 = load i32, i32* %incdec.ptr5, align 4, !tbaa !38
  %incdec.ptr8 = getelementptr inbounds i32, i32* %cp.addr.186, i64 3
  store i32 %5, i32* %incdec.ptr6, align 4, !tbaa !38
  %incdec.ptr9 = getelementptr inbounds i32, i32* %2, i64 4
  %6 = load i32, i32* %incdec.ptr7, align 4, !tbaa !38
  %incdec.ptr10 = getelementptr inbounds i32, i32* %cp.addr.186, i64 4
  store i32 %6, i32* %incdec.ptr8, align 4, !tbaa !38
  %incdec.ptr11 = getelementptr inbounds i32, i32* %2, i64 5
  %7 = load i32, i32* %incdec.ptr9, align 4, !tbaa !38
  %incdec.ptr12 = getelementptr inbounds i32, i32* %cp.addr.186, i64 5
  store i32 %7, i32* %incdec.ptr10, align 4, !tbaa !38
  %incdec.ptr13 = getelementptr inbounds i32, i32* %2, i64 6
  %8 = load i32, i32* %incdec.ptr11, align 4, !tbaa !38
  %incdec.ptr14 = getelementptr inbounds i32, i32* %cp.addr.186, i64 6
  store i32 %8, i32* %incdec.ptr12, align 4, !tbaa !38
  %incdec.ptr15 = getelementptr inbounds i32, i32* %2, i64 7
  %9 = load i32, i32* %incdec.ptr13, align 4, !tbaa !38
  %incdec.ptr16 = getelementptr inbounds i32, i32* %cp.addr.186, i64 7
  store i32 %9, i32* %incdec.ptr14, align 4, !tbaa !38
  %10 = load i32, i32* %incdec.ptr15, align 4, !tbaa !38
  %incdec.ptr18 = getelementptr inbounds i32, i32* %cp.addr.186, i64 8
  store i32 %10, i32* %incdec.ptr16, align 4, !tbaa !38
  %sub = add i32 %_x.087, -8
  %cmp2 = icmp ugt i32 %sub, 7
  br i1 %cmp2, label %for.body, label %for.end.loopexit, !llvm.loop !86

for.end.loopexit:                                 ; preds = %for.body
  %incdec.ptr.lcssa = phi i8* [ %incdec.ptr, %for.body ]
  %incdec.ptr18.lcssa = phi i32* [ %incdec.ptr18, %for.body ]
  %sub.lcssa = phi i32 [ %sub, %for.body ]
  br label %for.end

for.end:                                          ; preds = %for.end.loopexit, %for.cond.preheader
  %pp.addr.1.lcssa = phi i8* [ %pp.addr.092, %for.cond.preheader ], [ %incdec.ptr.lcssa, %for.end.loopexit ]
  %cp.addr.1.lcssa = phi i32* [ %cp.addr.093, %for.cond.preheader ], [ %incdec.ptr18.lcssa, %for.end.loopexit ]
  %_x.0.lcssa = phi i32 [ %w, %for.cond.preheader ], [ %sub.lcssa, %for.end.loopexit ]
  %cmp19.not = icmp eq i32 %_x.0.lcssa, 0
  br i1 %cmp19.not, label %if.end, label %if.then

if.then:                                          ; preds = %for.end
  %incdec.ptr20 = getelementptr inbounds i8, i8* %pp.addr.1.lcssa, i64 1
  %11 = load i8, i8* %pp.addr.1.lcssa, align 1, !tbaa !36
  %idxprom21 = zext i8 %11 to i64
  %arrayidx22 = getelementptr inbounds i32*, i32** %0, i64 %idxprom21
  %12 = load i32*, i32** %arrayidx22, align 8, !tbaa !31
  switch i32 %_x.0.lcssa, label %if.end [
    i32 7, label %sw.bb
    i32 6, label %sw.bb25
    i32 5, label %sw.bb28
    i32 4, label %sw.bb31
    i32 3, label %sw.bb34
    i32 2, label %sw.bb37
    i32 1, label %sw.bb40
  ]

sw.bb:                                            ; preds = %if.then
  %incdec.ptr23 = getelementptr inbounds i32, i32* %12, i64 1
  %13 = load i32, i32* %12, align 4, !tbaa !38
  %incdec.ptr24 = getelementptr inbounds i32, i32* %cp.addr.1.lcssa, i64 1
  store i32 %13, i32* %cp.addr.1.lcssa, align 4, !tbaa !38
  br label %sw.bb25

sw.bb25:                                          ; preds = %if.then, %sw.bb
  %cp.addr.2 = phi i32* [ %cp.addr.1.lcssa, %if.then ], [ %incdec.ptr24, %sw.bb ]
  %bw.0 = phi i32* [ %12, %if.then ], [ %incdec.ptr23, %sw.bb ]
  %incdec.ptr26 = getelementptr inbounds i32, i32* %bw.0, i64 1
  %14 = load i32, i32* %bw.0, align 4, !tbaa !38
  %incdec.ptr27 = getelementptr inbounds i32, i32* %cp.addr.2, i64 1
  store i32 %14, i32* %cp.addr.2, align 4, !tbaa !38
  br label %sw.bb28

sw.bb28:                                          ; preds = %if.then, %sw.bb25
  %cp.addr.3 = phi i32* [ %cp.addr.1.lcssa, %if.then ], [ %incdec.ptr27, %sw.bb25 ]
  %bw.1 = phi i32* [ %12, %if.then ], [ %incdec.ptr26, %sw.bb25 ]
  %incdec.ptr29 = getelementptr inbounds i32, i32* %bw.1, i64 1
  %15 = load i32, i32* %bw.1, align 4, !tbaa !38
  %incdec.ptr30 = getelementptr inbounds i32, i32* %cp.addr.3, i64 1
  store i32 %15, i32* %cp.addr.3, align 4, !tbaa !38
  br label %sw.bb31

sw.bb31:                                          ; preds = %if.then, %sw.bb28
  %cp.addr.4 = phi i32* [ %cp.addr.1.lcssa, %if.then ], [ %incdec.ptr30, %sw.bb28 ]
  %bw.2 = phi i32* [ %12, %if.then ], [ %incdec.ptr29, %sw.bb28 ]
  %incdec.ptr32 = getelementptr inbounds i32, i32* %bw.2, i64 1
  %16 = load i32, i32* %bw.2, align 4, !tbaa !38
  %incdec.ptr33 = getelementptr inbounds i32, i32* %cp.addr.4, i64 1
  store i32 %16, i32* %cp.addr.4, align 4, !tbaa !38
  br label %sw.bb34

sw.bb34:                                          ; preds = %if.then, %sw.bb31
  %cp.addr.5 = phi i32* [ %cp.addr.1.lcssa, %if.then ], [ %incdec.ptr33, %sw.bb31 ]
  %bw.3 = phi i32* [ %12, %if.then ], [ %incdec.ptr32, %sw.bb31 ]
  %incdec.ptr35 = getelementptr inbounds i32, i32* %bw.3, i64 1
  %17 = load i32, i32* %bw.3, align 4, !tbaa !38
  %incdec.ptr36 = getelementptr inbounds i32, i32* %cp.addr.5, i64 1
  store i32 %17, i32* %cp.addr.5, align 4, !tbaa !38
  br label %sw.bb37

sw.bb37:                                          ; preds = %if.then, %sw.bb34
  %cp.addr.6 = phi i32* [ %cp.addr.1.lcssa, %if.then ], [ %incdec.ptr36, %sw.bb34 ]
  %bw.4 = phi i32* [ %12, %if.then ], [ %incdec.ptr35, %sw.bb34 ]
  %incdec.ptr38 = getelementptr inbounds i32, i32* %bw.4, i64 1
  %18 = load i32, i32* %bw.4, align 4, !tbaa !38
  %incdec.ptr39 = getelementptr inbounds i32, i32* %cp.addr.6, i64 1
  store i32 %18, i32* %cp.addr.6, align 4, !tbaa !38
  br label %sw.bb40

sw.bb40:                                          ; preds = %if.then, %sw.bb37
  %cp.addr.7 = phi i32* [ %cp.addr.1.lcssa, %if.then ], [ %incdec.ptr39, %sw.bb37 ]
  %bw.5 = phi i32* [ %12, %if.then ], [ %incdec.ptr38, %sw.bb37 ]
  %19 = load i32, i32* %bw.5, align 4, !tbaa !38
  %incdec.ptr42 = getelementptr inbounds i32, i32* %cp.addr.7, i64 1
  store i32 %19, i32* %cp.addr.7, align 4, !tbaa !38
  br label %if.end

if.end:                                           ; preds = %if.then, %sw.bb40, %for.end
  %pp.addr.2 = phi i8* [ %incdec.ptr20, %if.then ], [ %incdec.ptr20, %sw.bb40 ], [ %pp.addr.1.lcssa, %for.end ]
  %cp.addr.8 = phi i32* [ %cp.addr.1.lcssa, %if.then ], [ %incdec.ptr42, %sw.bb40 ], [ %cp.addr.1.lcssa, %for.end ]
  %add.ptr = getelementptr inbounds i32, i32* %cp.addr.8, i64 %idx.ext
  %add.ptr44 = getelementptr inbounds i8, i8* %pp.addr.2, i64 %idx.ext43
  %cmp.not = icmp eq i32 %dec94, 0
  br i1 %cmp.not, label %while.end.loopexit, label %for.cond.preheader, !llvm.loop !87

while.end.loopexit:                               ; preds = %if.end
  br label %while.end

while.end:                                        ; preds = %while.end.loopexit, %entry
  ret void

rolled.pre:                                       ; No predecessors!

rolled.loop:                                      ; No predecessors!
  %20 = phi i8 
  %21 = zext i8 %20 to i64
  %22 = add i64 %21, 1
  %23 = getelementptr i32, i32* %2, i64 %22
  %24 = load i32, i32* %23, align 4
  %25 = zext i8 %20 to i64
  %26 = add i64 %25, 1
  %27 = getelementptr i32, i32* %cp.addr.186, i64 %26
  store i32 %24, i32* %27, align 4
  %28 = add i8 %20, 1
  %29 = icmp ne i8 %28, 8

rolled.exit:                                      ; No predecessors!
}

Done!
; Function Attrs: nofree norecurse nounwind optsize uwtable
define internal void @put1bitbwtile(%struct._TIFFRGBAImage* nocapture readonly %img, i32* nocapture %cp, i32 %x, i32 %y, i32 %w, i32 %h, i32 %fromskew, i32 %toskew, i8* nocapture readonly %pp) #5 {
entry:
  %BWmap1 = getelementptr inbounds %struct._TIFFRGBAImage, %struct._TIFFRGBAImage* %img, i64 0, i32 16
  %0 = load i32**, i32*** %BWmap1, align 8, !tbaa !19
  %cmp.not91 = icmp eq i32 %h, 0
  br i1 %cmp.not91, label %while.end, label %for.cond.preheader.lr.ph

for.cond.preheader.lr.ph:                         ; preds = %entry
  %div = sdiv i32 %fromskew, 8
  %cmp284 = icmp ugt i32 %w, 7
  %idx.ext = sext i32 %toskew to i64
  %idx.ext43 = sext i32 %div to i64
  br label %for.cond.preheader

for.cond.preheader:                               ; preds = %for.cond.preheader.lr.ph, %if.end
  %dec94.in = phi i32 [ %h, %for.cond.preheader.lr.ph ], [ %dec94, %if.end ]
  %cp.addr.093 = phi i32* [ %cp, %for.cond.preheader.lr.ph ], [ %add.ptr, %if.end ]
  %pp.addr.092 = phi i8* [ %pp, %for.cond.preheader.lr.ph ], [ %add.ptr44, %if.end ]
  %dec94 = add i32 %dec94.in, -1
  br i1 %cmp284, label %for.body.preheader, label %for.end

for.body.preheader:                               ; preds = %for.cond.preheader
  br label %for.body

for.body:                                         ; preds = %for.body.preheader, %rolled.exit
  %_x.087 = phi i32 [ %22, %rolled.exit ], [ %w, %for.body.preheader ]
  %cp.addr.186 = phi i32* [ %incdec.ptr18, %rolled.exit ], [ %cp.addr.093, %for.body.preheader ]
  %pp.addr.185 = phi i8* [ %incdec.ptr, %rolled.exit ], [ %pp.addr.092, %for.body.preheader ]
  %incdec.ptr = getelementptr inbounds i8, i8* %pp.addr.185, i64 1
  %1 = load i8, i8* %pp.addr.185, align 1, !tbaa !36
  %idxprom = zext i8 %1 to i64
  %arrayidx = getelementptr inbounds i32*, i32** %0, i64 %idxprom
  %2 = load i32*, i32** %arrayidx, align 8, !tbaa !31
  %incdec.ptr18 = getelementptr inbounds i32, i32* %cp.addr.186, i64 8
  br label %rolled.pre

for.end.loopexit:                                 ; preds = %rolled.exit
  %incdec.ptr.lcssa = phi i8* [ %incdec.ptr, %rolled.exit ]
  %incdec.ptr18.lcssa = phi i32* [ %incdec.ptr18, %rolled.exit ]
  %sub.lcssa = phi i32 [ %22, %rolled.exit ]
  br label %for.end

for.end:                                          ; preds = %for.end.loopexit, %for.cond.preheader
  %pp.addr.1.lcssa = phi i8* [ %pp.addr.092, %for.cond.preheader ], [ %incdec.ptr.lcssa, %for.end.loopexit ]
  %cp.addr.1.lcssa = phi i32* [ %cp.addr.093, %for.cond.preheader ], [ %incdec.ptr18.lcssa, %for.end.loopexit ]
  %_x.0.lcssa = phi i32 [ %w, %for.cond.preheader ], [ %sub.lcssa, %for.end.loopexit ]
  %cmp19.not = icmp eq i32 %_x.0.lcssa, 0
  br i1 %cmp19.not, label %if.end, label %if.then

if.then:                                          ; preds = %for.end
  %incdec.ptr20 = getelementptr inbounds i8, i8* %pp.addr.1.lcssa, i64 1
  %3 = load i8, i8* %pp.addr.1.lcssa, align 1, !tbaa !36
  %idxprom21 = zext i8 %3 to i64
  %arrayidx22 = getelementptr inbounds i32*, i32** %0, i64 %idxprom21
  %4 = load i32*, i32** %arrayidx22, align 8, !tbaa !31
  switch i32 %_x.0.lcssa, label %if.end [
    i32 7, label %sw.bb
    i32 6, label %sw.bb25
    i32 5, label %sw.bb28
    i32 4, label %sw.bb31
    i32 3, label %sw.bb34
    i32 2, label %sw.bb37
    i32 1, label %sw.bb40
  ]

sw.bb:                                            ; preds = %if.then
  %incdec.ptr23 = getelementptr inbounds i32, i32* %4, i64 1
  %5 = load i32, i32* %4, align 4, !tbaa !38
  %incdec.ptr24 = getelementptr inbounds i32, i32* %cp.addr.1.lcssa, i64 1
  store i32 %5, i32* %cp.addr.1.lcssa, align 4, !tbaa !38
  br label %sw.bb25

sw.bb25:                                          ; preds = %if.then, %sw.bb
  %cp.addr.2 = phi i32* [ %cp.addr.1.lcssa, %if.then ], [ %incdec.ptr24, %sw.bb ]
  %bw.0 = phi i32* [ %4, %if.then ], [ %incdec.ptr23, %sw.bb ]
  %incdec.ptr26 = getelementptr inbounds i32, i32* %bw.0, i64 1
  %6 = load i32, i32* %bw.0, align 4, !tbaa !38
  %incdec.ptr27 = getelementptr inbounds i32, i32* %cp.addr.2, i64 1
  store i32 %6, i32* %cp.addr.2, align 4, !tbaa !38
  br label %sw.bb28

sw.bb28:                                          ; preds = %if.then, %sw.bb25
  %cp.addr.3 = phi i32* [ %cp.addr.1.lcssa, %if.then ], [ %incdec.ptr27, %sw.bb25 ]
  %bw.1 = phi i32* [ %4, %if.then ], [ %incdec.ptr26, %sw.bb25 ]
  %incdec.ptr29 = getelementptr inbounds i32, i32* %bw.1, i64 1
  %7 = load i32, i32* %bw.1, align 4, !tbaa !38
  %incdec.ptr30 = getelementptr inbounds i32, i32* %cp.addr.3, i64 1
  store i32 %7, i32* %cp.addr.3, align 4, !tbaa !38
  br label %sw.bb31

sw.bb31:                                          ; preds = %if.then, %sw.bb28
  %cp.addr.4 = phi i32* [ %cp.addr.1.lcssa, %if.then ], [ %incdec.ptr30, %sw.bb28 ]
  %bw.2 = phi i32* [ %4, %if.then ], [ %incdec.ptr29, %sw.bb28 ]
  %incdec.ptr32 = getelementptr inbounds i32, i32* %bw.2, i64 1
  %8 = load i32, i32* %bw.2, align 4, !tbaa !38
  %incdec.ptr33 = getelementptr inbounds i32, i32* %cp.addr.4, i64 1
  store i32 %8, i32* %cp.addr.4, align 4, !tbaa !38
  br label %sw.bb34

sw.bb34:                                          ; preds = %if.then, %sw.bb31
  %cp.addr.5 = phi i32* [ %cp.addr.1.lcssa, %if.then ], [ %incdec.ptr33, %sw.bb31 ]
  %bw.3 = phi i32* [ %4, %if.then ], [ %incdec.ptr32, %sw.bb31 ]
  %incdec.ptr35 = getelementptr inbounds i32, i32* %bw.3, i64 1
  %9 = load i32, i32* %bw.3, align 4, !tbaa !38
  %incdec.ptr36 = getelementptr inbounds i32, i32* %cp.addr.5, i64 1
  store i32 %9, i32* %cp.addr.5, align 4, !tbaa !38
  br label %sw.bb37

sw.bb37:                                          ; preds = %if.then, %sw.bb34
  %cp.addr.6 = phi i32* [ %cp.addr.1.lcssa, %if.then ], [ %incdec.ptr36, %sw.bb34 ]
  %bw.4 = phi i32* [ %4, %if.then ], [ %incdec.ptr35, %sw.bb34 ]
  %incdec.ptr38 = getelementptr inbounds i32, i32* %bw.4, i64 1
  %10 = load i32, i32* %bw.4, align 4, !tbaa !38
  %incdec.ptr39 = getelementptr inbounds i32, i32* %cp.addr.6, i64 1
  store i32 %10, i32* %cp.addr.6, align 4, !tbaa !38
  br label %sw.bb40

sw.bb40:                                          ; preds = %if.then, %sw.bb37
  %cp.addr.7 = phi i32* [ %cp.addr.1.lcssa, %if.then ], [ %incdec.ptr39, %sw.bb37 ]
  %bw.5 = phi i32* [ %4, %if.then ], [ %incdec.ptr38, %sw.bb37 ]
  %11 = load i32, i32* %bw.5, align 4, !tbaa !38
  %incdec.ptr42 = getelementptr inbounds i32, i32* %cp.addr.7, i64 1
  store i32 %11, i32* %cp.addr.7, align 4, !tbaa !38
  br label %if.end

if.end:                                           ; preds = %if.then, %sw.bb40, %for.end
  %pp.addr.2 = phi i8* [ %incdec.ptr20, %if.then ], [ %incdec.ptr20, %sw.bb40 ], [ %pp.addr.1.lcssa, %for.end ]
  %cp.addr.8 = phi i32* [ %cp.addr.1.lcssa, %if.then ], [ %incdec.ptr42, %sw.bb40 ], [ %cp.addr.1.lcssa, %for.end ]
  %add.ptr = getelementptr inbounds i32, i32* %cp.addr.8, i64 %idx.ext
  %add.ptr44 = getelementptr inbounds i8, i8* %pp.addr.2, i64 %idx.ext43
  %cmp.not = icmp eq i32 %dec94, 0
  br i1 %cmp.not, label %while.end.loopexit, label %for.cond.preheader, !llvm.loop !86

while.end.loopexit:                               ; preds = %if.end
  br label %while.end

while.end:                                        ; preds = %while.end.loopexit, %entry
  ret void

rolled.pre:                                       ; preds = %for.body
  br label %rolled.loop

rolled.loop:                                      ; preds = %rolled.pre, %rolled.loop
  %12 = phi i8 [ 0, %rolled.pre ], [ %20, %rolled.loop ]
  %13 = zext i8 %12 to i64
  %14 = add i64 %13, 1
  %15 = getelementptr i32, i32* %2, i64 %14
  %16 = load i32, i32* %15, align 4
  %17 = zext i8 %12 to i64
  %18 = add i64 %17, 1
  %19 = getelementptr i32, i32* %cp.addr.186, i64 %18
  store i32 %16, i32* %19, align 4
  %20 = add i8 %12, 1
  %21 = icmp ne i8 %20, 8
  br i1 %21, label %rolled.loop, label %rolled.exit

rolled.exit:                                      ; preds = %rolled.loop
  %22 = add i32 %_x.087, -8
  %23 = icmp ugt i32 %22, 7
  br i1 %23, label %for.body, label %for.end.loopexit, !llvm.loop !87
}

code gen 1
destroying tree
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   %arrayidx = getelementptr inbounds i8, i8* %pp.addr.1, i64 16
Skipping:   %8 = load i8, i8* %pp.addr.1, align 1, !tbaa !15
destroying tree
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   %arrayidx = getelementptr inbounds i8, i8* %pp.addr.1, i64 16
Skipping:   %8 = load i8, i8* %pp.addr.1, align 1, !tbaa !15
destroying tree
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   %arrayidx = getelementptr inbounds i8, i8* %pp.addr.1, i64 16
Skipping:   %8 = load i8, i8* %pp.addr.1, align 1, !tbaa !15
destroying tree
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   %arrayidx = getelementptr inbounds i8, i8* %pp.addr.1, i64 16
Here ..
Skipping:   %arrayidx44 = getelementptr inbounds i8, i8* %pp.addr.1, i64 1
Here ..
Skipping:   %arrayidx73 = getelementptr inbounds i32, i32* %cp.addr.1, i64 1
Skipping:   %arrayidx75 = getelementptr inbounds i8, i8* %pp.addr.1, i64 2
Here ..
Skipping:   %arrayidx104 = getelementptr inbounds i32, i32* %cp.addr.1, i64 2
Skipping:   %arrayidx106 = getelementptr inbounds i8, i8* %pp.addr.1, i64 3
Here ..
Skipping:   %arrayidx135 = getelementptr inbounds i32, i32* %cp.addr.1, i64 3
Here ..
I:   %arrayidx137 = getelementptr inbounds i8, i8* %pp.addr.1, i64 4
Last:   %arrayidx137 = getelementptr inbounds i8, i8* %pp.addr.1, i64 4
Schedulable: 1
code gen 0
Gains: 102 - 76 = 26
Profitable: finishing code generation
; Function Attrs: nofree norecurse nounwind optsize uwtable
define internal void @putcontig8bitYCbCr44tile(%struct._TIFFRGBAImage* nocapture readonly %img, i32* nocapture %cp, i32 %x, i32 %y, i32 %w, i32 %h, i32 %fromskew, i32 %toskew, i8* nocapture readonly %pp) #5 {
entry:
  %0 = alloca i32*, i8 4, align 8
  %1 = alloca i32*, i8 4, align 8
  %2 = alloca i32*, i8 4, align 8
  %3 = alloca i32*, i8 4, align 8
  %ycbcr1 = getelementptr inbounds %struct._TIFFRGBAImage, %struct._TIFFRGBAImage* %img, i64 0, i32 18
  %4 = load %struct.TIFFYCbCrToRGB*, %struct.TIFFYCbCrToRGB** %ycbcr1, align 8, !tbaa !21
  %Cr_r_tab = getelementptr inbounds %struct.TIFFYCbCrToRGB, %struct.TIFFYCbCrToRGB* %4, i64 0, i32 1
  %5 = load i32*, i32** %Cr_r_tab, align 8, !tbaa !94
  %Cb_b_tab = getelementptr inbounds %struct.TIFFYCbCrToRGB, %struct.TIFFYCbCrToRGB* %4, i64 0, i32 2
  %6 = load i32*, i32** %Cb_b_tab, align 8, !tbaa !95
  %Cr_g_tab = getelementptr inbounds %struct.TIFFYCbCrToRGB, %struct.TIFFYCbCrToRGB* %4, i64 0, i32 3
  %7 = load i32*, i32** %Cr_g_tab, align 8, !tbaa !96
  %Cb_g_tab = getelementptr inbounds %struct.TIFFYCbCrToRGB, %struct.TIFFYCbCrToRGB* %4, i64 0, i32 4
  %8 = load i32*, i32** %Cb_g_tab, align 8, !tbaa !97
  %clamptab2 = getelementptr inbounds %struct.TIFFYCbCrToRGB, %struct.TIFFYCbCrToRGB* %4, i64 0, i32 0
  %9 = load i8*, i8** %clamptab2, align 8, !tbaa !90
  %idx.ext = zext i32 %w to i64
  %add.ptr = getelementptr inbounds i32, i32* %cp, i64 %idx.ext
  %idx.ext3 = sext i32 %toskew to i64
  %add.ptr4 = getelementptr inbounds i32, i32* %add.ptr, i64 %idx.ext3
  %add.ptr6 = getelementptr inbounds i32, i32* %add.ptr4, i64 %idx.ext
  %add.ptr8 = getelementptr inbounds i32, i32* %add.ptr6, i64 %idx.ext3
  %cmp809 = icmp ugt i32 %h, 3
  br i1 %cmp809, label %for.body.lr.ph, label %for.end

for.body.lr.ph:                                   ; preds = %entry
  %mul13 = shl nsw i32 %toskew, 2
  %mul = mul i32 %w, 3
  %add = add i32 %mul13, %mul
  %add.ptr10 = getelementptr inbounds i32, i32* %add.ptr8, i64 %idx.ext
  %add.ptr12 = getelementptr inbounds i32, i32* %add.ptr10, i64 %idx.ext3
  %shr = lshr i32 %w, 2
  %idx.ext513 = sext i32 %add to i64
  %idx.ext521 = sext i32 %fromskew to i64
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %do.end
  %cp.addr.0815 = phi i32* [ %cp, %for.body.lr.ph ], [ %add.ptr514, %do.end ]
  %h.addr.0814 = phi i32 [ %h, %for.body.lr.ph ], [ %sub, %do.end ]
  %pp.addr.0813 = phi i8* [ %pp, %for.body.lr.ph ], [ %add.ptr522, %do.end ]
  %cp1.0812 = phi i32* [ %add.ptr4, %for.body.lr.ph ], [ %add.ptr516, %do.end ]
  %cp2.0811 = phi i32* [ %add.ptr8, %for.body.lr.ph ], [ %add.ptr518, %do.end ]
  %cp3.0810 = phi i32* [ %add.ptr12, %for.body.lr.ph ], [ %add.ptr520, %do.end ]
  br label %do.body

do.body:                                          ; preds = %do.body, %for.body
  %cp3.1 = phi i32* [ %cp3.0810, %for.body ], [ %add.ptr511, %do.body ]
  %cp2.1 = phi i32* [ %cp2.0811, %for.body ], [ %add.ptr510, %do.body ]
  %cp1.1 = phi i32* [ %cp1.0812, %for.body ], [ %add.ptr509, %do.body ]
  %pp.addr.1 = phi i8* [ %pp.addr.0813, %for.body ], [ %add.ptr512, %do.body ]
  %x.addr.0 = phi i32 [ %shr, %for.body ], [ %dec, %do.body ]
  %cp.addr.1 = phi i32* [ %cp.addr.0815, %for.body ], [ %add.ptr508, %do.body ]
  %arrayidx = getelementptr inbounds i8, i8* %pp.addr.1, i64 16
  %10 = load i8, i8* %arrayidx, align 1, !tbaa !36
  %arrayidx14 = getelementptr inbounds i8, i8* %pp.addr.1, i64 17
  %11 = load i8, i8* %arrayidx14, align 1, !tbaa !36
  %12 = load i8, i8* %pp.addr.1, align 1, !tbaa !36
  %conv17 = zext i8 %12 to i32
  %idxprom = zext i8 %11 to i64
  %arrayidx18 = getelementptr inbounds i32, i32* %5, i64 %idxprom
  %13 = load i32, i32* %arrayidx18, align 4, !tbaa !38
  %add19 = add nsw i32 %13, %conv17
  %idxprom20 = sext i32 %add19 to i64
  %arrayidx21 = getelementptr inbounds i8, i8* %9, i64 %idxprom20
  %14 = load i8, i8* %arrayidx21, align 1, !tbaa !36
  %conv22 = zext i8 %14 to i32
  %idxprom23 = zext i8 %10 to i64
  %arrayidx24 = getelementptr inbounds i32, i32* %8, i64 %idxprom23
  %15 = load i32, i32* %arrayidx24, align 4, !tbaa !38
  %arrayidx26 = getelementptr inbounds i32, i32* %7, i64 %idxprom
  %16 = load i32, i32* %arrayidx26, align 4, !tbaa !38
  %add27 = add nsw i32 %16, %15
  %shr28 = ashr i32 %add27, 16
  %add29 = add nsw i32 %shr28, %conv17
  %idxprom30 = sext i32 %add29 to i64
  %arrayidx31 = getelementptr inbounds i8, i8* %9, i64 %idxprom30
  %17 = load i8, i8* %arrayidx31, align 1, !tbaa !36
  %conv32 = zext i8 %17 to i32
  %shl = shl nuw nsw i32 %conv32, 8
  %arrayidx34 = getelementptr inbounds i32, i32* %6, i64 %idxprom23
  %18 = load i32, i32* %arrayidx34, align 4, !tbaa !38
  %add35 = add nsw i32 %18, %conv17
  %idxprom36 = sext i32 %add35 to i64
  %arrayidx37 = getelementptr inbounds i8, i8* %9, i64 %idxprom36
  %19 = load i8, i8* %arrayidx37, align 1, !tbaa !36
  %conv38 = zext i8 %19 to i32
  %shl39 = shl nuw nsw i32 %conv38, 16
  %or = or i32 %shl, %conv22
  %or40 = or i32 %or, %shl39
  %or41 = or i32 %or40, -16777216
  store i32 %or41, i32* %cp.addr.1, align 4, !tbaa !38
  %arrayidx44 = getelementptr inbounds i8, i8* %pp.addr.1, i64 1
  %20 = load i8, i8* %arrayidx44, align 1, !tbaa !36
  %conv45 = zext i8 %20 to i32
  %21 = load i32, i32* %arrayidx18, align 4, !tbaa !38
  %add48 = add nsw i32 %21, %conv45
  %idxprom49 = sext i32 %add48 to i64
  %arrayidx50 = getelementptr inbounds i8, i8* %9, i64 %idxprom49
  %22 = load i8, i8* %arrayidx50, align 1, !tbaa !36
  %conv51 = zext i8 %22 to i32
  %23 = load i32, i32* %arrayidx24, align 4, !tbaa !38
  %24 = load i32, i32* %arrayidx26, align 4, !tbaa !38
  %add56 = add nsw i32 %24, %23
  %shr57 = ashr i32 %add56, 16
  %add58 = add nsw i32 %shr57, %conv45
  %idxprom59 = sext i32 %add58 to i64
  %arrayidx60 = getelementptr inbounds i8, i8* %9, i64 %idxprom59
  %25 = load i8, i8* %arrayidx60, align 1, !tbaa !36
  %conv61 = zext i8 %25 to i32
  %shl62 = shl nuw nsw i32 %conv61, 8
  %26 = load i32, i32* %arrayidx34, align 4, !tbaa !38
  %add66 = add nsw i32 %26, %conv45
  %idxprom67 = sext i32 %add66 to i64
  %arrayidx68 = getelementptr inbounds i8, i8* %9, i64 %idxprom67
  %27 = load i8, i8* %arrayidx68, align 1, !tbaa !36
  %conv69 = zext i8 %27 to i32
  %shl70 = shl nuw nsw i32 %conv69, 16
  %or63 = or i32 %shl62, %conv51
  %or71 = or i32 %or63, %shl70
  %or72 = or i32 %or71, -16777216
  %arrayidx73 = getelementptr inbounds i32, i32* %cp.addr.1, i64 1
  store i32 %or72, i32* %arrayidx73, align 4, !tbaa !38
  %arrayidx75 = getelementptr inbounds i8, i8* %pp.addr.1, i64 2
  %28 = load i8, i8* %arrayidx75, align 1, !tbaa !36
  %conv76 = zext i8 %28 to i32
  %29 = load i32, i32* %arrayidx18, align 4, !tbaa !38
  %add79 = add nsw i32 %29, %conv76
  %idxprom80 = sext i32 %add79 to i64
  %arrayidx81 = getelementptr inbounds i8, i8* %9, i64 %idxprom80
  %30 = load i8, i8* %arrayidx81, align 1, !tbaa !36
  %conv82 = zext i8 %30 to i32
  %31 = load i32, i32* %arrayidx24, align 4, !tbaa !38
  %32 = load i32, i32* %arrayidx26, align 4, !tbaa !38
  %add87 = add nsw i32 %32, %31
  %shr88 = ashr i32 %add87, 16
  %add89 = add nsw i32 %shr88, %conv76
  %idxprom90 = sext i32 %add89 to i64
  %arrayidx91 = getelementptr inbounds i8, i8* %9, i64 %idxprom90
  %33 = load i8, i8* %arrayidx91, align 1, !tbaa !36
  %conv92 = zext i8 %33 to i32
  %shl93 = shl nuw nsw i32 %conv92, 8
  %34 = load i32, i32* %arrayidx34, align 4, !tbaa !38
  %add97 = add nsw i32 %34, %conv76
  %idxprom98 = sext i32 %add97 to i64
  %arrayidx99 = getelementptr inbounds i8, i8* %9, i64 %idxprom98
  %35 = load i8, i8* %arrayidx99, align 1, !tbaa !36
  %conv100 = zext i8 %35 to i32
  %shl101 = shl nuw nsw i32 %conv100, 16
  %or94 = or i32 %shl93, %conv82
  %or102 = or i32 %or94, %shl101
  %or103 = or i32 %or102, -16777216
  %arrayidx104 = getelementptr inbounds i32, i32* %cp.addr.1, i64 2
  store i32 %or103, i32* %arrayidx104, align 4, !tbaa !38
  %arrayidx106 = getelementptr inbounds i8, i8* %pp.addr.1, i64 3
  %36 = load i8, i8* %arrayidx106, align 1, !tbaa !36
  %conv107 = zext i8 %36 to i32
  %37 = load i32, i32* %arrayidx18, align 4, !tbaa !38
  %add110 = add nsw i32 %37, %conv107
  %idxprom111 = sext i32 %add110 to i64
  %arrayidx112 = getelementptr inbounds i8, i8* %9, i64 %idxprom111
  %38 = load i8, i8* %arrayidx112, align 1, !tbaa !36
  %conv113 = zext i8 %38 to i32
  %39 = load i32, i32* %arrayidx24, align 4, !tbaa !38
  %40 = load i32, i32* %arrayidx26, align 4, !tbaa !38
  %add118 = add nsw i32 %40, %39
  %shr119 = ashr i32 %add118, 16
  %add120 = add nsw i32 %shr119, %conv107
  %idxprom121 = sext i32 %add120 to i64
  %arrayidx122 = getelementptr inbounds i8, i8* %9, i64 %idxprom121
  %41 = load i8, i8* %arrayidx122, align 1, !tbaa !36
  %conv123 = zext i8 %41 to i32
  %shl124 = shl nuw nsw i32 %conv123, 8
  %42 = load i32, i32* %arrayidx34, align 4, !tbaa !38
  %add128 = add nsw i32 %42, %conv107
  %idxprom129 = sext i32 %add128 to i64
  %arrayidx130 = getelementptr inbounds i8, i8* %9, i64 %idxprom129
  %43 = load i8, i8* %arrayidx130, align 1, !tbaa !36
  %conv131 = zext i8 %43 to i32
  %shl132 = shl nuw nsw i32 %conv131, 16
  %or125 = or i32 %shl124, %conv113
  %or133 = or i32 %or125, %shl132
  %or134 = or i32 %or133, -16777216
  %arrayidx135 = getelementptr inbounds i32, i32* %cp.addr.1, i64 3
  store i32 %or134, i32* %arrayidx135, align 4, !tbaa !38
  %arrayidx137 = getelementptr inbounds i8, i8* %pp.addr.1, i64 4
  %44 = load i8, i8* %arrayidx137, align 1, !tbaa !36
  %conv138 = zext i8 %44 to i32
  %45 = load i32, i32* %arrayidx18, align 4, !tbaa !38
  %add141 = add nsw i32 %45, %conv138
  %idxprom142 = sext i32 %add141 to i64
  %arrayidx143 = getelementptr inbounds i8, i8* %9, i64 %idxprom142
  %46 = load i8, i8* %arrayidx143, align 1, !tbaa !36
  %conv144 = zext i8 %46 to i32
  %47 = load i32, i32* %arrayidx24, align 4, !tbaa !38
  %48 = load i32, i32* %arrayidx26, align 4, !tbaa !38
  %add149 = add nsw i32 %48, %47
  %shr150 = ashr i32 %add149, 16
  %add151 = add nsw i32 %shr150, %conv138
  %idxprom152 = sext i32 %add151 to i64
  %arrayidx153 = getelementptr inbounds i8, i8* %9, i64 %idxprom152
  %49 = load i8, i8* %arrayidx153, align 1, !tbaa !36
  %conv154 = zext i8 %49 to i32
  %shl155 = shl nuw nsw i32 %conv154, 8
  %50 = load i32, i32* %arrayidx34, align 4, !tbaa !38
  %add159 = add nsw i32 %50, %conv138
  %idxprom160 = sext i32 %add159 to i64
  %arrayidx161 = getelementptr inbounds i8, i8* %9, i64 %idxprom160
  %51 = load i8, i8* %arrayidx161, align 1, !tbaa !36
  %conv162 = zext i8 %51 to i32
  %shl163 = shl nuw nsw i32 %conv162, 16
  %or156 = or i32 %shl155, %conv144
  %or164 = or i32 %or156, %shl163
  %or165 = or i32 %or164, -16777216
  store i32 %or165, i32* %cp1.1, align 4, !tbaa !38
  %arrayidx168 = getelementptr inbounds i8, i8* %pp.addr.1, i64 5
  %52 = load i8, i8* %arrayidx168, align 1, !tbaa !36
  %conv169 = zext i8 %52 to i32
  %53 = load i32, i32* %arrayidx18, align 4, !tbaa !38
  %add172 = add nsw i32 %53, %conv169
  %idxprom173 = sext i32 %add172 to i64
  %arrayidx174 = getelementptr inbounds i8, i8* %9, i64 %idxprom173
  %54 = load i8, i8* %arrayidx174, align 1, !tbaa !36
  %conv175 = zext i8 %54 to i32
  %55 = load i32, i32* %arrayidx24, align 4, !tbaa !38
  %56 = load i32, i32* %arrayidx26, align 4, !tbaa !38
  %add180 = add nsw i32 %56, %55
  %shr181 = ashr i32 %add180, 16
  %add182 = add nsw i32 %shr181, %conv169
  %idxprom183 = sext i32 %add182 to i64
  %arrayidx184 = getelementptr inbounds i8, i8* %9, i64 %idxprom183
  %57 = load i8, i8* %arrayidx184, align 1, !tbaa !36
  %conv185 = zext i8 %57 to i32
  %shl186 = shl nuw nsw i32 %conv185, 8
  %58 = load i32, i32* %arrayidx34, align 4, !tbaa !38
  %add190 = add nsw i32 %58, %conv169
  %idxprom191 = sext i32 %add190 to i64
  %arrayidx192 = getelementptr inbounds i8, i8* %9, i64 %idxprom191
  %59 = load i8, i8* %arrayidx192, align 1, !tbaa !36
  %conv193 = zext i8 %59 to i32
  %shl194 = shl nuw nsw i32 %conv193, 16
  %or187 = or i32 %shl186, %conv175
  %or195 = or i32 %or187, %shl194
  %or196 = or i32 %or195, -16777216
  %arrayidx197 = getelementptr inbounds i32, i32* %cp1.1, i64 1
  store i32 %or196, i32* %arrayidx197, align 4, !tbaa !38
  %arrayidx199 = getelementptr inbounds i8, i8* %pp.addr.1, i64 6
  %60 = load i8, i8* %arrayidx199, align 1, !tbaa !36
  %conv200 = zext i8 %60 to i32
  %61 = load i32, i32* %arrayidx18, align 4, !tbaa !38
  %add203 = add nsw i32 %61, %conv200
  %idxprom204 = sext i32 %add203 to i64
  %arrayidx205 = getelementptr inbounds i8, i8* %9, i64 %idxprom204
  %62 = load i8, i8* %arrayidx205, align 1, !tbaa !36
  %conv206 = zext i8 %62 to i32
  %63 = load i32, i32* %arrayidx24, align 4, !tbaa !38
  %64 = load i32, i32* %arrayidx26, align 4, !tbaa !38
  %add211 = add nsw i32 %64, %63
  %shr212 = ashr i32 %add211, 16
  %add213 = add nsw i32 %shr212, %conv200
  %idxprom214 = sext i32 %add213 to i64
  %arrayidx215 = getelementptr inbounds i8, i8* %9, i64 %idxprom214
  %65 = load i8, i8* %arrayidx215, align 1, !tbaa !36
  %conv216 = zext i8 %65 to i32
  %shl217 = shl nuw nsw i32 %conv216, 8
  %66 = load i32, i32* %arrayidx34, align 4, !tbaa !38
  %add221 = add nsw i32 %66, %conv200
  %idxprom222 = sext i32 %add221 to i64
  %arrayidx223 = getelementptr inbounds i8, i8* %9, i64 %idxprom222
  %67 = load i8, i8* %arrayidx223, align 1, !tbaa !36
  %conv224 = zext i8 %67 to i32
  %shl225 = shl nuw nsw i32 %conv224, 16
  %or218 = or i32 %shl217, %conv206
  %or226 = or i32 %or218, %shl225
  %or227 = or i32 %or226, -16777216
  %arrayidx228 = getelementptr inbounds i32, i32* %cp1.1, i64 2
  store i32 %or227, i32* %arrayidx228, align 4, !tbaa !38
  %arrayidx230 = getelementptr inbounds i8, i8* %pp.addr.1, i64 7
  %68 = load i8, i8* %arrayidx230, align 1, !tbaa !36
  %conv231 = zext i8 %68 to i32
  %69 = load i32, i32* %arrayidx18, align 4, !tbaa !38
  %add234 = add nsw i32 %69, %conv231
  %idxprom235 = sext i32 %add234 to i64
  %arrayidx236 = getelementptr inbounds i8, i8* %9, i64 %idxprom235
  %70 = load i8, i8* %arrayidx236, align 1, !tbaa !36
  %conv237 = zext i8 %70 to i32
  %71 = load i32, i32* %arrayidx24, align 4, !tbaa !38
  %72 = load i32, i32* %arrayidx26, align 4, !tbaa !38
  %add242 = add nsw i32 %72, %71
  %shr243 = ashr i32 %add242, 16
  %add244 = add nsw i32 %shr243, %conv231
  %idxprom245 = sext i32 %add244 to i64
  %arrayidx246 = getelementptr inbounds i8, i8* %9, i64 %idxprom245
  %73 = load i8, i8* %arrayidx246, align 1, !tbaa !36
  %conv247 = zext i8 %73 to i32
  %shl248 = shl nuw nsw i32 %conv247, 8
  %74 = load i32, i32* %arrayidx34, align 4, !tbaa !38
  %add252 = add nsw i32 %74, %conv231
  %idxprom253 = sext i32 %add252 to i64
  %arrayidx254 = getelementptr inbounds i8, i8* %9, i64 %idxprom253
  %75 = load i8, i8* %arrayidx254, align 1, !tbaa !36
  %conv255 = zext i8 %75 to i32
  %shl256 = shl nuw nsw i32 %conv255, 16
  %or249 = or i32 %shl248, %conv237
  %or257 = or i32 %or249, %shl256
  %or258 = or i32 %or257, -16777216
  %arrayidx259 = getelementptr inbounds i32, i32* %cp1.1, i64 3
  store i32 %or258, i32* %arrayidx259, align 4, !tbaa !38
  %arrayidx261 = getelementptr inbounds i8, i8* %pp.addr.1, i64 8
  %76 = load i8, i8* %arrayidx261, align 1, !tbaa !36
  %conv262 = zext i8 %76 to i32
  %77 = load i32, i32* %arrayidx18, align 4, !tbaa !38
  %add265 = add nsw i32 %77, %conv262
  %idxprom266 = sext i32 %add265 to i64
  %arrayidx267 = getelementptr inbounds i8, i8* %9, i64 %idxprom266
  %78 = load i8, i8* %arrayidx267, align 1, !tbaa !36
  %conv268 = zext i8 %78 to i32
  %79 = load i32, i32* %arrayidx24, align 4, !tbaa !38
  %80 = load i32, i32* %arrayidx26, align 4, !tbaa !38
  %add273 = add nsw i32 %80, %79
  %shr274 = ashr i32 %add273, 16
  %add275 = add nsw i32 %shr274, %conv262
  %idxprom276 = sext i32 %add275 to i64
  %arrayidx277 = getelementptr inbounds i8, i8* %9, i64 %idxprom276
  %81 = load i8, i8* %arrayidx277, align 1, !tbaa !36
  %conv278 = zext i8 %81 to i32
  %shl279 = shl nuw nsw i32 %conv278, 8
  %82 = load i32, i32* %arrayidx34, align 4, !tbaa !38
  %add283 = add nsw i32 %82, %conv262
  %idxprom284 = sext i32 %add283 to i64
  %arrayidx285 = getelementptr inbounds i8, i8* %9, i64 %idxprom284
  %83 = load i8, i8* %arrayidx285, align 1, !tbaa !36
  %conv286 = zext i8 %83 to i32
  %shl287 = shl nuw nsw i32 %conv286, 16
  %or280 = or i32 %shl279, %conv268
  %or288 = or i32 %or280, %shl287
  %or289 = or i32 %or288, -16777216
  store i32 %or289, i32* %cp2.1, align 4, !tbaa !38
  %arrayidx292 = getelementptr inbounds i8, i8* %pp.addr.1, i64 9
  %84 = load i8, i8* %arrayidx292, align 1, !tbaa !36
  %conv293 = zext i8 %84 to i32
  %85 = load i32, i32* %arrayidx18, align 4, !tbaa !38
  %add296 = add nsw i32 %85, %conv293
  %idxprom297 = sext i32 %add296 to i64
  %arrayidx298 = getelementptr inbounds i8, i8* %9, i64 %idxprom297
  %86 = load i8, i8* %arrayidx298, align 1, !tbaa !36
  %conv299 = zext i8 %86 to i32
  %87 = load i32, i32* %arrayidx24, align 4, !tbaa !38
  %88 = load i32, i32* %arrayidx26, align 4, !tbaa !38
  %add304 = add nsw i32 %88, %87
  %shr305 = ashr i32 %add304, 16
  %add306 = add nsw i32 %shr305, %conv293
  %idxprom307 = sext i32 %add306 to i64
  %arrayidx308 = getelementptr inbounds i8, i8* %9, i64 %idxprom307
  %89 = load i8, i8* %arrayidx308, align 1, !tbaa !36
  %conv309 = zext i8 %89 to i32
  %shl310 = shl nuw nsw i32 %conv309, 8
  %90 = load i32, i32* %arrayidx34, align 4, !tbaa !38
  %add314 = add nsw i32 %90, %conv293
  %idxprom315 = sext i32 %add314 to i64
  %arrayidx316 = getelementptr inbounds i8, i8* %9, i64 %idxprom315
  %91 = load i8, i8* %arrayidx316, align 1, !tbaa !36
  %conv317 = zext i8 %91 to i32
  %shl318 = shl nuw nsw i32 %conv317, 16
  %or311 = or i32 %shl310, %conv299
  %or319 = or i32 %or311, %shl318
  %or320 = or i32 %or319, -16777216
  %arrayidx321 = getelementptr inbounds i32, i32* %cp2.1, i64 1
  store i32 %or320, i32* %arrayidx321, align 4, !tbaa !38
  %arrayidx323 = getelementptr inbounds i8, i8* %pp.addr.1, i64 10
  %92 = load i8, i8* %arrayidx323, align 1, !tbaa !36
  %conv324 = zext i8 %92 to i32
  %93 = load i32, i32* %arrayidx18, align 4, !tbaa !38
  %add327 = add nsw i32 %93, %conv324
  %idxprom328 = sext i32 %add327 to i64
  %arrayidx329 = getelementptr inbounds i8, i8* %9, i64 %idxprom328
  %94 = load i8, i8* %arrayidx329, align 1, !tbaa !36
  %conv330 = zext i8 %94 to i32
  %95 = load i32, i32* %arrayidx24, align 4, !tbaa !38
  %96 = load i32, i32* %arrayidx26, align 4, !tbaa !38
  %add335 = add nsw i32 %96, %95
  %shr336 = ashr i32 %add335, 16
  %add337 = add nsw i32 %shr336, %conv324
  %idxprom338 = sext i32 %add337 to i64
  %arrayidx339 = getelementptr inbounds i8, i8* %9, i64 %idxprom338
  %97 = load i8, i8* %arrayidx339, align 1, !tbaa !36
  %conv340 = zext i8 %97 to i32
  %shl341 = shl nuw nsw i32 %conv340, 8
  %98 = load i32, i32* %arrayidx34, align 4, !tbaa !38
  %add345 = add nsw i32 %98, %conv324
  %idxprom346 = sext i32 %add345 to i64
  %arrayidx347 = getelementptr inbounds i8, i8* %9, i64 %idxprom346
  %99 = load i8, i8* %arrayidx347, align 1, !tbaa !36
  %conv348 = zext i8 %99 to i32
  %shl349 = shl nuw nsw i32 %conv348, 16
  %or342 = or i32 %shl341, %conv330
  %or350 = or i32 %or342, %shl349
  %or351 = or i32 %or350, -16777216
  %arrayidx352 = getelementptr inbounds i32, i32* %cp2.1, i64 2
  store i32 %or351, i32* %arrayidx352, align 4, !tbaa !38
  %arrayidx354 = getelementptr inbounds i8, i8* %pp.addr.1, i64 11
  %100 = load i8, i8* %arrayidx354, align 1, !tbaa !36
  %conv355 = zext i8 %100 to i32
  %101 = load i32, i32* %arrayidx18, align 4, !tbaa !38
  %add358 = add nsw i32 %101, %conv355
  %idxprom359 = sext i32 %add358 to i64
  %arrayidx360 = getelementptr inbounds i8, i8* %9, i64 %idxprom359
  %102 = load i8, i8* %arrayidx360, align 1, !tbaa !36
  %conv361 = zext i8 %102 to i32
  %103 = load i32, i32* %arrayidx24, align 4, !tbaa !38
  %104 = load i32, i32* %arrayidx26, align 4, !tbaa !38
  %add366 = add nsw i32 %104, %103
  %shr367 = ashr i32 %add366, 16
  %add368 = add nsw i32 %shr367, %conv355
  %idxprom369 = sext i32 %add368 to i64
  %arrayidx370 = getelementptr inbounds i8, i8* %9, i64 %idxprom369
  %105 = load i8, i8* %arrayidx370, align 1, !tbaa !36
  %conv371 = zext i8 %105 to i32
  %shl372 = shl nuw nsw i32 %conv371, 8
  %106 = load i32, i32* %arrayidx34, align 4, !tbaa !38
  %add376 = add nsw i32 %106, %conv355
  %idxprom377 = sext i32 %add376 to i64
  %arrayidx378 = getelementptr inbounds i8, i8* %9, i64 %idxprom377
  %107 = load i8, i8* %arrayidx378, align 1, !tbaa !36
  %conv379 = zext i8 %107 to i32
  %shl380 = shl nuw nsw i32 %conv379, 16
  %or373 = or i32 %shl372, %conv361
  %or381 = or i32 %or373, %shl380
  %or382 = or i32 %or381, -16777216
  %arrayidx383 = getelementptr inbounds i32, i32* %cp2.1, i64 3
  store i32 %or382, i32* %arrayidx383, align 4, !tbaa !38
  %arrayidx385 = getelementptr inbounds i8, i8* %pp.addr.1, i64 12
  %108 = load i8, i8* %arrayidx385, align 1, !tbaa !36
  %conv386 = zext i8 %108 to i32
  %109 = load i32, i32* %arrayidx18, align 4, !tbaa !38
  %add389 = add nsw i32 %109, %conv386
  %idxprom390 = sext i32 %add389 to i64
  %arrayidx391 = getelementptr inbounds i8, i8* %9, i64 %idxprom390
  %110 = load i8, i8* %arrayidx391, align 1, !tbaa !36
  %conv392 = zext i8 %110 to i32
  %111 = load i32, i32* %arrayidx24, align 4, !tbaa !38
  %112 = load i32, i32* %arrayidx26, align 4, !tbaa !38
  %add397 = add nsw i32 %112, %111
  %shr398 = ashr i32 %add397, 16
  %add399 = add nsw i32 %shr398, %conv386
  %idxprom400 = sext i32 %add399 to i64
  %arrayidx401 = getelementptr inbounds i8, i8* %9, i64 %idxprom400
  %113 = load i8, i8* %arrayidx401, align 1, !tbaa !36
  %conv402 = zext i8 %113 to i32
  %shl403 = shl nuw nsw i32 %conv402, 8
  %114 = load i32, i32* %arrayidx34, align 4, !tbaa !38
  %add407 = add nsw i32 %114, %conv386
  %idxprom408 = sext i32 %add407 to i64
  %arrayidx409 = getelementptr inbounds i8, i8* %9, i64 %idxprom408
  %115 = load i8, i8* %arrayidx409, align 1, !tbaa !36
  %conv410 = zext i8 %115 to i32
  %shl411 = shl nuw nsw i32 %conv410, 16
  %or404 = or i32 %shl403, %conv392
  %or412 = or i32 %or404, %shl411
  %or413 = or i32 %or412, -16777216
  store i32 %or413, i32* %cp3.1, align 4, !tbaa !38
  %arrayidx416 = getelementptr inbounds i8, i8* %pp.addr.1, i64 13
  %116 = load i8, i8* %arrayidx416, align 1, !tbaa !36
  %conv417 = zext i8 %116 to i32
  %117 = load i32, i32* %arrayidx18, align 4, !tbaa !38
  %add420 = add nsw i32 %117, %conv417
  %idxprom421 = sext i32 %add420 to i64
  %arrayidx422 = getelementptr inbounds i8, i8* %9, i64 %idxprom421
  %118 = load i8, i8* %arrayidx422, align 1, !tbaa !36
  %conv423 = zext i8 %118 to i32
  %119 = load i32, i32* %arrayidx24, align 4, !tbaa !38
  %120 = load i32, i32* %arrayidx26, align 4, !tbaa !38
  %add428 = add nsw i32 %120, %119
  %shr429 = ashr i32 %add428, 16
  %add430 = add nsw i32 %shr429, %conv417
  %idxprom431 = sext i32 %add430 to i64
  %arrayidx432 = getelementptr inbounds i8, i8* %9, i64 %idxprom431
  %121 = load i8, i8* %arrayidx432, align 1, !tbaa !36
  %conv433 = zext i8 %121 to i32
  %shl434 = shl nuw nsw i32 %conv433, 8
  %122 = load i32, i32* %arrayidx34, align 4, !tbaa !38
  %add438 = add nsw i32 %122, %conv417
  %idxprom439 = sext i32 %add438 to i64
  %arrayidx440 = getelementptr inbounds i8, i8* %9, i64 %idxprom439
  %123 = load i8, i8* %arrayidx440, align 1, !tbaa !36
  %conv441 = zext i8 %123 to i32
  %shl442 = shl nuw nsw i32 %conv441, 16
  %or435 = or i32 %shl434, %conv423
  %or443 = or i32 %or435, %shl442
  %or444 = or i32 %or443, -16777216
  %arrayidx445 = getelementptr inbounds i32, i32* %cp3.1, i64 1
  store i32 %or444, i32* %arrayidx445, align 4, !tbaa !38
  %arrayidx447 = getelementptr inbounds i8, i8* %pp.addr.1, i64 14
  %124 = load i8, i8* %arrayidx447, align 1, !tbaa !36
  %conv448 = zext i8 %124 to i32
  %125 = load i32, i32* %arrayidx18, align 4, !tbaa !38
  %add451 = add nsw i32 %125, %conv448
  %idxprom452 = sext i32 %add451 to i64
  %arrayidx453 = getelementptr inbounds i8, i8* %9, i64 %idxprom452
  %126 = load i8, i8* %arrayidx453, align 1, !tbaa !36
  %conv454 = zext i8 %126 to i32
  %127 = load i32, i32* %arrayidx24, align 4, !tbaa !38
  %128 = load i32, i32* %arrayidx26, align 4, !tbaa !38
  %add459 = add nsw i32 %128, %127
  %shr460 = ashr i32 %add459, 16
  %add461 = add nsw i32 %shr460, %conv448
  %idxprom462 = sext i32 %add461 to i64
  %arrayidx463 = getelementptr inbounds i8, i8* %9, i64 %idxprom462
  %129 = load i8, i8* %arrayidx463, align 1, !tbaa !36
  %conv464 = zext i8 %129 to i32
  %shl465 = shl nuw nsw i32 %conv464, 8
  %130 = load i32, i32* %arrayidx34, align 4, !tbaa !38
  %add469 = add nsw i32 %130, %conv448
  %idxprom470 = sext i32 %add469 to i64
  %arrayidx471 = getelementptr inbounds i8, i8* %9, i64 %idxprom470
  %131 = load i8, i8* %arrayidx471, align 1, !tbaa !36
  %conv472 = zext i8 %131 to i32
  %shl473 = shl nuw nsw i32 %conv472, 16
  %or466 = or i32 %shl465, %conv454
  %or474 = or i32 %or466, %shl473
  %or475 = or i32 %or474, -16777216
  %arrayidx476 = getelementptr inbounds i32, i32* %cp3.1, i64 2
  store i32 %or475, i32* %arrayidx476, align 4, !tbaa !38
  %arrayidx478 = getelementptr inbounds i8, i8* %pp.addr.1, i64 15
  %132 = load i8, i8* %arrayidx478, align 1, !tbaa !36
  %conv479 = zext i8 %132 to i32
  %133 = load i32, i32* %arrayidx18, align 4, !tbaa !38
  %add482 = add nsw i32 %133, %conv479
  %idxprom483 = sext i32 %add482 to i64
  %arrayidx484 = getelementptr inbounds i8, i8* %9, i64 %idxprom483
  %134 = load i8, i8* %arrayidx484, align 1, !tbaa !36
  %conv485 = zext i8 %134 to i32
  %135 = load i32, i32* %arrayidx24, align 4, !tbaa !38
  %136 = load i32, i32* %arrayidx26, align 4, !tbaa !38
  %add490 = add nsw i32 %136, %135
  %shr491 = ashr i32 %add490, 16
  %add492 = add nsw i32 %shr491, %conv479
  %idxprom493 = sext i32 %add492 to i64
  %arrayidx494 = getelementptr inbounds i8, i8* %9, i64 %idxprom493
  %137 = load i8, i8* %arrayidx494, align 1, !tbaa !36
  %conv495 = zext i8 %137 to i32
  %shl496 = shl nuw nsw i32 %conv495, 8
  %138 = load i32, i32* %arrayidx34, align 4, !tbaa !38
  %add500 = add nsw i32 %138, %conv479
  %idxprom501 = sext i32 %add500 to i64
  %arrayidx502 = getelementptr inbounds i8, i8* %9, i64 %idxprom501
  %139 = load i8, i8* %arrayidx502, align 1, !tbaa !36
  %conv503 = zext i8 %139 to i32
  %shl504 = shl nuw nsw i32 %conv503, 16
  %or497 = or i32 %shl496, %conv485
  %or505 = or i32 %or497, %shl504
  %or506 = or i32 %or505, -16777216
  %arrayidx507 = getelementptr inbounds i32, i32* %cp3.1, i64 3
  store i32 %or506, i32* %arrayidx507, align 4, !tbaa !38
  %add.ptr508 = getelementptr inbounds i32, i32* %cp.addr.1, i64 4
  %add.ptr509 = getelementptr inbounds i32, i32* %cp1.1, i64 4
  %add.ptr510 = getelementptr inbounds i32, i32* %cp2.1, i64 4
  %add.ptr511 = getelementptr inbounds i32, i32* %cp3.1, i64 4
  %add.ptr512 = getelementptr inbounds i8, i8* %pp.addr.1, i64 18
  %dec = add i32 %x.addr.0, -1
  %tobool.not = icmp eq i32 %dec, 0
  br i1 %tobool.not, label %do.end, label %do.body, !llvm.loop !99

do.end:                                           ; preds = %do.body
  %add.ptr508.lcssa = phi i32* [ %add.ptr508, %do.body ]
  %add.ptr509.lcssa = phi i32* [ %add.ptr509, %do.body ]
  %add.ptr510.lcssa = phi i32* [ %add.ptr510, %do.body ]
  %add.ptr511.lcssa = phi i32* [ %add.ptr511, %do.body ]
  %add.ptr512.lcssa = phi i8* [ %add.ptr512, %do.body ]
  %add.ptr514 = getelementptr inbounds i32, i32* %add.ptr508.lcssa, i64 %idx.ext513
  %add.ptr516 = getelementptr inbounds i32, i32* %add.ptr509.lcssa, i64 %idx.ext513
  %add.ptr518 = getelementptr inbounds i32, i32* %add.ptr510.lcssa, i64 %idx.ext513
  %add.ptr520 = getelementptr inbounds i32, i32* %add.ptr511.lcssa, i64 %idx.ext513
  %add.ptr522 = getelementptr inbounds i8, i8* %add.ptr512.lcssa, i64 %idx.ext521
  %sub = add i32 %h.addr.0814, -4
  %cmp = icmp ugt i32 %sub, 3
  br i1 %cmp, label %for.body, label %for.end.loopexit, !llvm.loop !100

for.end.loopexit:                                 ; preds = %do.end
  br label %for.end

for.end:                                          ; preds = %for.end.loopexit, %entry
  ret void

rolled.pre:                                       ; No predecessors!

rolled.loop:                                      ; No predecessors!
  %140 = phi i8 
  %141 = zext i8 %140 to i64
  %142 = add i64 %141, 1
  %143 = getelementptr i8, i8* %pp.addr.1, i64 %142
  %144 = getelementptr inbounds i8, i8* %pp.addr.1, i64 17
  %145 = load i8, i8* %144, align 1
  %146 = zext i8 %145 to i64
  %147 = getelementptr inbounds i32, i32* %7, i64 %146
  %148 = getelementptr i32*, i32** %3, i8 %140
  store i32* %147, i32** %148, align 8
  %149 = load i32, i32* %147, align 4
  %150 = getelementptr inbounds i8, i8* %pp.addr.1, i64 16
  %151 = load i8, i8* %150, align 1
  %152 = zext i8 %151 to i64
  %153 = getelementptr inbounds i32, i32* %8, i64 %152
  %154 = getelementptr i32*, i32** %2, i8 %140
  store i32* %153, i32** %154, align 8
  %155 = load i32, i32* %153, align 4
  %156 = add nsw i32 %149, %155
  %157 = ashr i32 %156, 16
  %158 = load i8, i8* %143, align 1
  %159 = zext i8 %158 to i32
  %160 = add nsw i32 %157, %159
  %161 = sext i32 %160 to i64
  %162 = getelementptr inbounds i8, i8* %9, i64 %161
  %163 = load i8, i8* %162, align 1
  %164 = zext i8 %163 to i32
  %165 = shl nuw nsw i32 %164, 8
  %166 = getelementptr inbounds i32, i32* %5, i64 %146
  %167 = getelementptr i32*, i32** %1, i8 %140
  store i32* %166, i32** %167, align 8
  %168 = load i32, i32* %166, align 4
  %169 = add nsw i32 %168, %159
  %170 = sext i32 %169 to i64
  %171 = getelementptr inbounds i8, i8* %9, i64 %170
  %172 = load i8, i8* %171, align 1
  %173 = zext i8 %172 to i32
  %174 = or i32 %165, %173
  %175 = getelementptr inbounds i32, i32* %6, i64 %152
  %176 = getelementptr i32*, i32** %0, i8 %140
  store i32* %175, i32** %176, align 8
  %177 = load i32, i32* %175, align 4
  %178 = add nsw i32 %177, %159
  %179 = sext i32 %178 to i64
  %180 = getelementptr inbounds i8, i8* %9, i64 %179
  %181 = load i8, i8* %180, align 1
  %182 = zext i8 %181 to i32
  %183 = shl nuw nsw i32 %182, 16
  %184 = or i32 %174, %183
  %185 = or i32 %184, -16777216
  %186 = zext i8 %140 to i64
  %187 = add i64 %186, 1
  %188 = getelementptr i32, i32* %cp.addr.1, i64 %187
  store i32 %185, i32* %188, align 4
  %189 = add i8 %140, 1
  %190 = icmp ne i8 %189, 4

rolled.exit:                                      ; No predecessors!
  %191 = getelementptr i32*, i32** %3, i8 0
  %192 = load i32*, i32** %191, align 8
  %193 = getelementptr i32*, i32** %3, i8 1
  %194 = load i32*, i32** %193, align 8
  %195 = getelementptr i32*, i32** %3, i8 2
  %196 = load i32*, i32** %195, align 8
  %197 = getelementptr i32*, i32** %3, i8 3
  %198 = load i32*, i32** %197, align 8
  %199 = getelementptr i32*, i32** %2, i8 0
  %200 = load i32*, i32** %199, align 8
  %201 = getelementptr i32*, i32** %2, i8 1
  %202 = load i32*, i32** %201, align 8
  %203 = getelementptr i32*, i32** %2, i8 2
  %204 = load i32*, i32** %203, align 8
  %205 = getelementptr i32*, i32** %2, i8 3
  %206 = load i32*, i32** %205, align 8
  %207 = getelementptr i32*, i32** %1, i8 0
  %208 = load i32*, i32** %207, align 8
  %209 = getelementptr i32*, i32** %1, i8 1
  %210 = load i32*, i32** %209, align 8
  %211 = getelementptr i32*, i32** %1, i8 2
  %212 = load i32*, i32** %211, align 8
  %213 = getelementptr i32*, i32** %1, i8 3
  %214 = load i32*, i32** %213, align 8
  %215 = getelementptr i32*, i32** %0, i8 0
  %216 = load i32*, i32** %215, align 8
  %217 = getelementptr i32*, i32** %0, i8 1
  %218 = load i32*, i32** %217, align 8
  %219 = getelementptr i32*, i32** %0, i8 2
  %220 = load i32*, i32** %219, align 8
  %221 = getelementptr i32*, i32** %0, i8 3
  %222 = load i32*, i32** %221, align 8
}

Done!
; Function Attrs: nofree norecurse nounwind optsize uwtable
define internal void @putcontig8bitYCbCr44tile(%struct._TIFFRGBAImage* nocapture readonly %img, i32* nocapture %cp, i32 %x, i32 %y, i32 %w, i32 %h, i32 %fromskew, i32 %toskew, i8* nocapture readonly %pp) #5 {
entry:
  %0 = alloca i32*, i8 4, align 8
  %1 = alloca i32*, i8 4, align 8
  %2 = alloca i32*, i8 4, align 8
  %3 = alloca i32*, i8 4, align 8
  %ycbcr1 = getelementptr inbounds %struct._TIFFRGBAImage, %struct._TIFFRGBAImage* %img, i64 0, i32 18
  %4 = load %struct.TIFFYCbCrToRGB*, %struct.TIFFYCbCrToRGB** %ycbcr1, align 8, !tbaa !21
  %Cr_r_tab = getelementptr inbounds %struct.TIFFYCbCrToRGB, %struct.TIFFYCbCrToRGB* %4, i64 0, i32 1
  %5 = load i32*, i32** %Cr_r_tab, align 8, !tbaa !94
  %Cb_b_tab = getelementptr inbounds %struct.TIFFYCbCrToRGB, %struct.TIFFYCbCrToRGB* %4, i64 0, i32 2
  %6 = load i32*, i32** %Cb_b_tab, align 8, !tbaa !95
  %Cr_g_tab = getelementptr inbounds %struct.TIFFYCbCrToRGB, %struct.TIFFYCbCrToRGB* %4, i64 0, i32 3
  %7 = load i32*, i32** %Cr_g_tab, align 8, !tbaa !96
  %Cb_g_tab = getelementptr inbounds %struct.TIFFYCbCrToRGB, %struct.TIFFYCbCrToRGB* %4, i64 0, i32 4
  %8 = load i32*, i32** %Cb_g_tab, align 8, !tbaa !97
  %clamptab2 = getelementptr inbounds %struct.TIFFYCbCrToRGB, %struct.TIFFYCbCrToRGB* %4, i64 0, i32 0
  %9 = load i8*, i8** %clamptab2, align 8, !tbaa !90
  %idx.ext = zext i32 %w to i64
  %add.ptr = getelementptr inbounds i32, i32* %cp, i64 %idx.ext
  %idx.ext3 = sext i32 %toskew to i64
  %add.ptr4 = getelementptr inbounds i32, i32* %add.ptr, i64 %idx.ext3
  %add.ptr6 = getelementptr inbounds i32, i32* %add.ptr4, i64 %idx.ext
  %add.ptr8 = getelementptr inbounds i32, i32* %add.ptr6, i64 %idx.ext3
  %cmp809 = icmp ugt i32 %h, 3
  br i1 %cmp809, label %for.body.lr.ph, label %for.end

for.body.lr.ph:                                   ; preds = %entry
  %mul13 = shl nsw i32 %toskew, 2
  %mul = mul i32 %w, 3
  %add = add i32 %mul13, %mul
  %add.ptr10 = getelementptr inbounds i32, i32* %add.ptr8, i64 %idx.ext
  %add.ptr12 = getelementptr inbounds i32, i32* %add.ptr10, i64 %idx.ext3
  %shr = lshr i32 %w, 2
  %idx.ext513 = sext i32 %add to i64
  %idx.ext521 = sext i32 %fromskew to i64
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %do.end
  %cp.addr.0815 = phi i32* [ %cp, %for.body.lr.ph ], [ %add.ptr514, %do.end ]
  %h.addr.0814 = phi i32 [ %h, %for.body.lr.ph ], [ %sub, %do.end ]
  %pp.addr.0813 = phi i8* [ %pp, %for.body.lr.ph ], [ %add.ptr522, %do.end ]
  %cp1.0812 = phi i32* [ %add.ptr4, %for.body.lr.ph ], [ %add.ptr516, %do.end ]
  %cp2.0811 = phi i32* [ %add.ptr8, %for.body.lr.ph ], [ %add.ptr518, %do.end ]
  %cp3.0810 = phi i32* [ %add.ptr12, %for.body.lr.ph ], [ %add.ptr520, %do.end ]
  br label %do.body

do.body:                                          ; preds = %rolled.exit, %for.body
  %cp3.1 = phi i32* [ %cp3.0810, %for.body ], [ %453, %rolled.exit ]
  %cp2.1 = phi i32* [ %cp2.0811, %for.body ], [ %452, %rolled.exit ]
  %cp1.1 = phi i32* [ %cp1.0812, %for.body ], [ %451, %rolled.exit ]
  %pp.addr.1 = phi i8* [ %pp.addr.0813, %for.body ], [ %454, %rolled.exit ]
  %x.addr.0 = phi i32 [ %shr, %for.body ], [ %455, %rolled.exit ]
  %cp.addr.1 = phi i32* [ %cp.addr.0815, %for.body ], [ %450, %rolled.exit ]
  br label %rolled.pre

do.end:                                           ; preds = %rolled.exit
  %add.ptr508.lcssa = phi i32* [ %450, %rolled.exit ]
  %add.ptr509.lcssa = phi i32* [ %451, %rolled.exit ]
  %add.ptr510.lcssa = phi i32* [ %452, %rolled.exit ]
  %add.ptr511.lcssa = phi i32* [ %453, %rolled.exit ]
  %add.ptr512.lcssa = phi i8* [ %454, %rolled.exit ]
  %add.ptr514 = getelementptr inbounds i32, i32* %add.ptr508.lcssa, i64 %idx.ext513
  %add.ptr516 = getelementptr inbounds i32, i32* %add.ptr509.lcssa, i64 %idx.ext513
  %add.ptr518 = getelementptr inbounds i32, i32* %add.ptr510.lcssa, i64 %idx.ext513
  %add.ptr520 = getelementptr inbounds i32, i32* %add.ptr511.lcssa, i64 %idx.ext513
  %add.ptr522 = getelementptr inbounds i8, i8* %add.ptr512.lcssa, i64 %idx.ext521
  %sub = add i32 %h.addr.0814, -4
  %cmp = icmp ugt i32 %sub, 3
  br i1 %cmp, label %for.body, label %for.end.loopexit, !llvm.loop !99

for.end.loopexit:                                 ; preds = %do.end
  br label %for.end

for.end:                                          ; preds = %for.end.loopexit, %entry
  ret void

rolled.pre:                                       ; preds = %do.body
  br label %rolled.loop

rolled.loop:                                      ; preds = %rolled.pre, %rolled.loop
  %10 = phi i8 [ 0, %rolled.pre ], [ %59, %rolled.loop ]
  %11 = zext i8 %10 to i64
  %12 = add i64 %11, 1
  %13 = getelementptr i8, i8* %pp.addr.1, i64 %12
  %14 = getelementptr inbounds i8, i8* %pp.addr.1, i64 17
  %15 = load i8, i8* %14, align 1
  %16 = zext i8 %15 to i64
  %17 = getelementptr inbounds i32, i32* %7, i64 %16
  %18 = getelementptr i32*, i32** %3, i8 %10
  store i32* %17, i32** %18, align 8
  %19 = load i32, i32* %17, align 4
  %20 = getelementptr inbounds i8, i8* %pp.addr.1, i64 16
  %21 = load i8, i8* %20, align 1
  %22 = zext i8 %21 to i64
  %23 = getelementptr inbounds i32, i32* %8, i64 %22
  %24 = getelementptr i32*, i32** %2, i8 %10
  store i32* %23, i32** %24, align 8
  %25 = load i32, i32* %23, align 4
  %26 = add nsw i32 %19, %25
  %27 = ashr i32 %26, 16
  %28 = load i8, i8* %13, align 1
  %29 = zext i8 %28 to i32
  %30 = add nsw i32 %27, %29
  %31 = sext i32 %30 to i64
  %32 = getelementptr inbounds i8, i8* %9, i64 %31
  %33 = load i8, i8* %32, align 1
  %34 = zext i8 %33 to i32
  %35 = shl nuw nsw i32 %34, 8
  %36 = getelementptr inbounds i32, i32* %5, i64 %16
  %37 = getelementptr i32*, i32** %1, i8 %10
  store i32* %36, i32** %37, align 8
  %38 = load i32, i32* %36, align 4
  %39 = add nsw i32 %38, %29
  %40 = sext i32 %39 to i64
  %41 = getelementptr inbounds i8, i8* %9, i64 %40
  %42 = load i8, i8* %41, align 1
  %43 = zext i8 %42 to i32
  %44 = or i32 %35, %43
  %45 = getelementptr inbounds i32, i32* %6, i64 %22
  %46 = getelementptr i32*, i32** %0, i8 %10
  store i32* %45, i32** %46, align 8
  %47 = load i32, i32* %45, align 4
  %48 = add nsw i32 %47, %29
  %49 = sext i32 %48 to i64
  %50 = getelementptr inbounds i8, i8* %9, i64 %49
  %51 = load i8, i8* %50, align 1
  %52 = zext i8 %51 to i32
  %53 = shl nuw nsw i32 %52, 16
  %54 = or i32 %44, %53
  %55 = or i32 %54, -16777216
  %56 = zext i8 %10 to i64
  %57 = add i64 %56, 1
  %58 = getelementptr i32, i32* %cp.addr.1, i64 %57
  store i32 %55, i32* %58, align 4
  %59 = add i8 %10, 1
  %60 = icmp ne i8 %59, 4
  br i1 %60, label %rolled.loop, label %rolled.exit

rolled.exit:                                      ; preds = %rolled.loop
  %61 = getelementptr i32*, i32** %3, i8 0
  %62 = load i32*, i32** %61, align 8
  %63 = getelementptr i32*, i32** %3, i8 1
  %64 = load i32*, i32** %63, align 8
  %65 = getelementptr i32*, i32** %3, i8 2
  %66 = load i32*, i32** %65, align 8
  %67 = getelementptr i32*, i32** %3, i8 3
  %68 = load i32*, i32** %67, align 8
  %69 = getelementptr i32*, i32** %2, i8 0
  %70 = load i32*, i32** %69, align 8
  %71 = getelementptr i32*, i32** %2, i8 1
  %72 = load i32*, i32** %71, align 8
  %73 = getelementptr i32*, i32** %2, i8 2
  %74 = load i32*, i32** %73, align 8
  %75 = getelementptr i32*, i32** %2, i8 3
  %76 = load i32*, i32** %75, align 8
  %77 = getelementptr i32*, i32** %1, i8 0
  %78 = load i32*, i32** %77, align 8
  %79 = getelementptr i32*, i32** %1, i8 1
  %80 = load i32*, i32** %79, align 8
  %81 = getelementptr i32*, i32** %1, i8 2
  %82 = load i32*, i32** %81, align 8
  %83 = getelementptr i32*, i32** %1, i8 3
  %84 = load i32*, i32** %83, align 8
  %85 = getelementptr i32*, i32** %0, i8 0
  %86 = load i32*, i32** %85, align 8
  %87 = getelementptr i32*, i32** %0, i8 1
  %88 = load i32*, i32** %87, align 8
  %89 = getelementptr i32*, i32** %0, i8 2
  %90 = load i32*, i32** %89, align 8
  %91 = getelementptr i32*, i32** %0, i8 3
  %92 = load i32*, i32** %91, align 8
  %93 = getelementptr inbounds i8, i8* %pp.addr.1, i64 4
  %94 = load i8, i8* %93, align 1, !tbaa !36
  %95 = zext i8 %94 to i32
  %96 = load i32, i32* %84, align 4, !tbaa !38
  %97 = add nsw i32 %96, %95
  %98 = sext i32 %97 to i64
  %99 = getelementptr inbounds i8, i8* %9, i64 %98
  %100 = load i8, i8* %99, align 1, !tbaa !36
  %101 = zext i8 %100 to i32
  %102 = load i32, i32* %76, align 4, !tbaa !38
  %103 = load i32, i32* %68, align 4, !tbaa !38
  %104 = add nsw i32 %103, %102
  %105 = ashr i32 %104, 16
  %106 = add nsw i32 %105, %95
  %107 = sext i32 %106 to i64
  %108 = getelementptr inbounds i8, i8* %9, i64 %107
  %109 = load i8, i8* %108, align 1, !tbaa !36
  %110 = zext i8 %109 to i32
  %111 = shl nuw nsw i32 %110, 8
  %112 = load i32, i32* %92, align 4, !tbaa !38
  %113 = add nsw i32 %112, %95
  %114 = sext i32 %113 to i64
  %115 = getelementptr inbounds i8, i8* %9, i64 %114
  %116 = load i8, i8* %115, align 1, !tbaa !36
  %117 = zext i8 %116 to i32
  %118 = shl nuw nsw i32 %117, 16
  %119 = or i32 %111, %101
  %120 = or i32 %119, %118
  %121 = or i32 %120, -16777216
  store i32 %121, i32* %cp1.1, align 4, !tbaa !38
  %122 = getelementptr inbounds i8, i8* %pp.addr.1, i64 5
  %123 = load i8, i8* %122, align 1, !tbaa !36
  %124 = zext i8 %123 to i32
  %125 = load i32, i32* %84, align 4, !tbaa !38
  %126 = add nsw i32 %125, %124
  %127 = sext i32 %126 to i64
  %128 = getelementptr inbounds i8, i8* %9, i64 %127
  %129 = load i8, i8* %128, align 1, !tbaa !36
  %130 = zext i8 %129 to i32
  %131 = load i32, i32* %76, align 4, !tbaa !38
  %132 = load i32, i32* %68, align 4, !tbaa !38
  %133 = add nsw i32 %132, %131
  %134 = ashr i32 %133, 16
  %135 = add nsw i32 %134, %124
  %136 = sext i32 %135 to i64
  %137 = getelementptr inbounds i8, i8* %9, i64 %136
  %138 = load i8, i8* %137, align 1, !tbaa !36
  %139 = zext i8 %138 to i32
  %140 = shl nuw nsw i32 %139, 8
  %141 = load i32, i32* %92, align 4, !tbaa !38
  %142 = add nsw i32 %141, %124
  %143 = sext i32 %142 to i64
  %144 = getelementptr inbounds i8, i8* %9, i64 %143
  %145 = load i8, i8* %144, align 1, !tbaa !36
  %146 = zext i8 %145 to i32
  %147 = shl nuw nsw i32 %146, 16
  %148 = or i32 %140, %130
  %149 = or i32 %148, %147
  %150 = or i32 %149, -16777216
  %151 = getelementptr inbounds i32, i32* %cp1.1, i64 1
  store i32 %150, i32* %151, align 4, !tbaa !38
  %152 = getelementptr inbounds i8, i8* %pp.addr.1, i64 6
  %153 = load i8, i8* %152, align 1, !tbaa !36
  %154 = zext i8 %153 to i32
  %155 = load i32, i32* %84, align 4, !tbaa !38
  %156 = add nsw i32 %155, %154
  %157 = sext i32 %156 to i64
  %158 = getelementptr inbounds i8, i8* %9, i64 %157
  %159 = load i8, i8* %158, align 1, !tbaa !36
  %160 = zext i8 %159 to i32
  %161 = load i32, i32* %76, align 4, !tbaa !38
  %162 = load i32, i32* %68, align 4, !tbaa !38
  %163 = add nsw i32 %162, %161
  %164 = ashr i32 %163, 16
  %165 = add nsw i32 %164, %154
  %166 = sext i32 %165 to i64
  %167 = getelementptr inbounds i8, i8* %9, i64 %166
  %168 = load i8, i8* %167, align 1, !tbaa !36
  %169 = zext i8 %168 to i32
  %170 = shl nuw nsw i32 %169, 8
  %171 = load i32, i32* %92, align 4, !tbaa !38
  %172 = add nsw i32 %171, %154
  %173 = sext i32 %172 to i64
  %174 = getelementptr inbounds i8, i8* %9, i64 %173
  %175 = load i8, i8* %174, align 1, !tbaa !36
  %176 = zext i8 %175 to i32
  %177 = shl nuw nsw i32 %176, 16
  %178 = or i32 %170, %160
  %179 = or i32 %178, %177
  %180 = or i32 %179, -16777216
  %181 = getelementptr inbounds i32, i32* %cp1.1, i64 2
  store i32 %180, i32* %181, align 4, !tbaa !38
  %182 = getelementptr inbounds i8, i8* %pp.addr.1, i64 7
  %183 = load i8, i8* %182, align 1, !tbaa !36
  %184 = zext i8 %183 to i32
  %185 = load i32, i32* %84, align 4, !tbaa !38
  %186 = add nsw i32 %185, %184
  %187 = sext i32 %186 to i64
  %188 = getelementptr inbounds i8, i8* %9, i64 %187
  %189 = load i8, i8* %188, align 1, !tbaa !36
  %190 = zext i8 %189 to i32
  %191 = load i32, i32* %76, align 4, !tbaa !38
  %192 = load i32, i32* %68, align 4, !tbaa !38
  %193 = add nsw i32 %192, %191
  %194 = ashr i32 %193, 16
  %195 = add nsw i32 %194, %184
  %196 = sext i32 %195 to i64
  %197 = getelementptr inbounds i8, i8* %9, i64 %196
  %198 = load i8, i8* %197, align 1, !tbaa !36
  %199 = zext i8 %198 to i32
  %200 = shl nuw nsw i32 %199, 8
  %201 = load i32, i32* %92, align 4, !tbaa !38
  %202 = add nsw i32 %201, %184
  %203 = sext i32 %202 to i64
  %204 = getelementptr inbounds i8, i8* %9, i64 %203
  %205 = load i8, i8* %204, align 1, !tbaa !36
  %206 = zext i8 %205 to i32
  %207 = shl nuw nsw i32 %206, 16
  %208 = or i32 %200, %190
  %209 = or i32 %208, %207
  %210 = or i32 %209, -16777216
  %211 = getelementptr inbounds i32, i32* %cp1.1, i64 3
  store i32 %210, i32* %211, align 4, !tbaa !38
  %212 = getelementptr inbounds i8, i8* %pp.addr.1, i64 8
  %213 = load i8, i8* %212, align 1, !tbaa !36
  %214 = zext i8 %213 to i32
  %215 = load i32, i32* %84, align 4, !tbaa !38
  %216 = add nsw i32 %215, %214
  %217 = sext i32 %216 to i64
  %218 = getelementptr inbounds i8, i8* %9, i64 %217
  %219 = load i8, i8* %218, align 1, !tbaa !36
  %220 = zext i8 %219 to i32
  %221 = load i32, i32* %76, align 4, !tbaa !38
  %222 = load i32, i32* %68, align 4, !tbaa !38
  %223 = add nsw i32 %222, %221
  %224 = ashr i32 %223, 16
  %225 = add nsw i32 %224, %214
  %226 = sext i32 %225 to i64
  %227 = getelementptr inbounds i8, i8* %9, i64 %226
  %228 = load i8, i8* %227, align 1, !tbaa !36
  %229 = zext i8 %228 to i32
  %230 = shl nuw nsw i32 %229, 8
  %231 = load i32, i32* %92, align 4, !tbaa !38
  %232 = add nsw i32 %231, %214
  %233 = sext i32 %232 to i64
  %234 = getelementptr inbounds i8, i8* %9, i64 %233
  %235 = load i8, i8* %234, align 1, !tbaa !36
  %236 = zext i8 %235 to i32
  %237 = shl nuw nsw i32 %236, 16
  %238 = or i32 %230, %220
  %239 = or i32 %238, %237
  %240 = or i32 %239, -16777216
  store i32 %240, i32* %cp2.1, align 4, !tbaa !38
  %241 = getelementptr inbounds i8, i8* %pp.addr.1, i64 9
  %242 = load i8, i8* %241, align 1, !tbaa !36
  %243 = zext i8 %242 to i32
  %244 = load i32, i32* %84, align 4, !tbaa !38
  %245 = add nsw i32 %244, %243
  %246 = sext i32 %245 to i64
  %247 = getelementptr inbounds i8, i8* %9, i64 %246
  %248 = load i8, i8* %247, align 1, !tbaa !36
  %249 = zext i8 %248 to i32
  %250 = load i32, i32* %76, align 4, !tbaa !38
  %251 = load i32, i32* %68, align 4, !tbaa !38
  %252 = add nsw i32 %251, %250
  %253 = ashr i32 %252, 16
  %254 = add nsw i32 %253, %243
  %255 = sext i32 %254 to i64
  %256 = getelementptr inbounds i8, i8* %9, i64 %255
  %257 = load i8, i8* %256, align 1, !tbaa !36
  %258 = zext i8 %257 to i32
  %259 = shl nuw nsw i32 %258, 8
  %260 = load i32, i32* %92, align 4, !tbaa !38
  %261 = add nsw i32 %260, %243
  %262 = sext i32 %261 to i64
  %263 = getelementptr inbounds i8, i8* %9, i64 %262
  %264 = load i8, i8* %263, align 1, !tbaa !36
  %265 = zext i8 %264 to i32
  %266 = shl nuw nsw i32 %265, 16
  %267 = or i32 %259, %249
  %268 = or i32 %267, %266
  %269 = or i32 %268, -16777216
  %270 = getelementptr inbounds i32, i32* %cp2.1, i64 1
  store i32 %269, i32* %270, align 4, !tbaa !38
  %271 = getelementptr inbounds i8, i8* %pp.addr.1, i64 10
  %272 = load i8, i8* %271, align 1, !tbaa !36
  %273 = zext i8 %272 to i32
  %274 = load i32, i32* %84, align 4, !tbaa !38
  %275 = add nsw i32 %274, %273
  %276 = sext i32 %275 to i64
  %277 = getelementptr inbounds i8, i8* %9, i64 %276
  %278 = load i8, i8* %277, align 1, !tbaa !36
  %279 = zext i8 %278 to i32
  %280 = load i32, i32* %76, align 4, !tbaa !38
  %281 = load i32, i32* %68, align 4, !tbaa !38
  %282 = add nsw i32 %281, %280
  %283 = ashr i32 %282, 16
  %284 = add nsw i32 %283, %273
  %285 = sext i32 %284 to i64
  %286 = getelementptr inbounds i8, i8* %9, i64 %285
  %287 = load i8, i8* %286, align 1, !tbaa !36
  %288 = zext i8 %287 to i32
  %289 = shl nuw nsw i32 %288, 8
  %290 = load i32, i32* %92, align 4, !tbaa !38
  %291 = add nsw i32 %290, %273
  %292 = sext i32 %291 to i64
  %293 = getelementptr inbounds i8, i8* %9, i64 %292
  %294 = load i8, i8* %293, align 1, !tbaa !36
  %295 = zext i8 %294 to i32
  %296 = shl nuw nsw i32 %295, 16
  %297 = or i32 %289, %279
  %298 = or i32 %297, %296
  %299 = or i32 %298, -16777216
  %300 = getelementptr inbounds i32, i32* %cp2.1, i64 2
  store i32 %299, i32* %300, align 4, !tbaa !38
  %301 = getelementptr inbounds i8, i8* %pp.addr.1, i64 11
  %302 = load i8, i8* %301, align 1, !tbaa !36
  %303 = zext i8 %302 to i32
  %304 = load i32, i32* %84, align 4, !tbaa !38
  %305 = add nsw i32 %304, %303
  %306 = sext i32 %305 to i64
  %307 = getelementptr inbounds i8, i8* %9, i64 %306
  %308 = load i8, i8* %307, align 1, !tbaa !36
  %309 = zext i8 %308 to i32
  %310 = load i32, i32* %76, align 4, !tbaa !38
  %311 = load i32, i32* %68, align 4, !tbaa !38
  %312 = add nsw i32 %311, %310
  %313 = ashr i32 %312, 16
  %314 = add nsw i32 %313, %303
  %315 = sext i32 %314 to i64
  %316 = getelementptr inbounds i8, i8* %9, i64 %315
  %317 = load i8, i8* %316, align 1, !tbaa !36
  %318 = zext i8 %317 to i32
  %319 = shl nuw nsw i32 %318, 8
  %320 = load i32, i32* %92, align 4, !tbaa !38
  %321 = add nsw i32 %320, %303
  %322 = sext i32 %321 to i64
  %323 = getelementptr inbounds i8, i8* %9, i64 %322
  %324 = load i8, i8* %323, align 1, !tbaa !36
  %325 = zext i8 %324 to i32
  %326 = shl nuw nsw i32 %325, 16
  %327 = or i32 %319, %309
  %328 = or i32 %327, %326
  %329 = or i32 %328, -16777216
  %330 = getelementptr inbounds i32, i32* %cp2.1, i64 3
  store i32 %329, i32* %330, align 4, !tbaa !38
  %331 = getelementptr inbounds i8, i8* %pp.addr.1, i64 12
  %332 = load i8, i8* %331, align 1, !tbaa !36
  %333 = zext i8 %332 to i32
  %334 = load i32, i32* %84, align 4, !tbaa !38
  %335 = add nsw i32 %334, %333
  %336 = sext i32 %335 to i64
  %337 = getelementptr inbounds i8, i8* %9, i64 %336
  %338 = load i8, i8* %337, align 1, !tbaa !36
  %339 = zext i8 %338 to i32
  %340 = load i32, i32* %76, align 4, !tbaa !38
  %341 = load i32, i32* %68, align 4, !tbaa !38
  %342 = add nsw i32 %341, %340
  %343 = ashr i32 %342, 16
  %344 = add nsw i32 %343, %333
  %345 = sext i32 %344 to i64
  %346 = getelementptr inbounds i8, i8* %9, i64 %345
  %347 = load i8, i8* %346, align 1, !tbaa !36
  %348 = zext i8 %347 to i32
  %349 = shl nuw nsw i32 %348, 8
  %350 = load i32, i32* %92, align 4, !tbaa !38
  %351 = add nsw i32 %350, %333
  %352 = sext i32 %351 to i64
  %353 = getelementptr inbounds i8, i8* %9, i64 %352
  %354 = load i8, i8* %353, align 1, !tbaa !36
  %355 = zext i8 %354 to i32
  %356 = shl nuw nsw i32 %355, 16
  %357 = or i32 %349, %339
  %358 = or i32 %357, %356
  %359 = or i32 %358, -16777216
  store i32 %359, i32* %cp3.1, align 4, !tbaa !38
  %360 = getelementptr inbounds i8, i8* %pp.addr.1, i64 13
  %361 = load i8, i8* %360, align 1, !tbaa !36
  %362 = zext i8 %361 to i32
  %363 = load i32, i32* %84, align 4, !tbaa !38
  %364 = add nsw i32 %363, %362
  %365 = sext i32 %364 to i64
  %366 = getelementptr inbounds i8, i8* %9, i64 %365
  %367 = load i8, i8* %366, align 1, !tbaa !36
  %368 = zext i8 %367 to i32
  %369 = load i32, i32* %76, align 4, !tbaa !38
  %370 = load i32, i32* %68, align 4, !tbaa !38
  %371 = add nsw i32 %370, %369
  %372 = ashr i32 %371, 16
  %373 = add nsw i32 %372, %362
  %374 = sext i32 %373 to i64
  %375 = getelementptr inbounds i8, i8* %9, i64 %374
  %376 = load i8, i8* %375, align 1, !tbaa !36
  %377 = zext i8 %376 to i32
  %378 = shl nuw nsw i32 %377, 8
  %379 = load i32, i32* %92, align 4, !tbaa !38
  %380 = add nsw i32 %379, %362
  %381 = sext i32 %380 to i64
  %382 = getelementptr inbounds i8, i8* %9, i64 %381
  %383 = load i8, i8* %382, align 1, !tbaa !36
  %384 = zext i8 %383 to i32
  %385 = shl nuw nsw i32 %384, 16
  %386 = or i32 %378, %368
  %387 = or i32 %386, %385
  %388 = or i32 %387, -16777216
  %389 = getelementptr inbounds i32, i32* %cp3.1, i64 1
  store i32 %388, i32* %389, align 4, !tbaa !38
  %390 = getelementptr inbounds i8, i8* %pp.addr.1, i64 14
  %391 = load i8, i8* %390, align 1, !tbaa !36
  %392 = zext i8 %391 to i32
  %393 = load i32, i32* %84, align 4, !tbaa !38
  %394 = add nsw i32 %393, %392
  %395 = sext i32 %394 to i64
  %396 = getelementptr inbounds i8, i8* %9, i64 %395
  %397 = load i8, i8* %396, align 1, !tbaa !36
  %398 = zext i8 %397 to i32
  %399 = load i32, i32* %76, align 4, !tbaa !38
  %400 = load i32, i32* %68, align 4, !tbaa !38
  %401 = add nsw i32 %400, %399
  %402 = ashr i32 %401, 16
  %403 = add nsw i32 %402, %392
  %404 = sext i32 %403 to i64
  %405 = getelementptr inbounds i8, i8* %9, i64 %404
  %406 = load i8, i8* %405, align 1, !tbaa !36
  %407 = zext i8 %406 to i32
  %408 = shl nuw nsw i32 %407, 8
  %409 = load i32, i32* %92, align 4, !tbaa !38
  %410 = add nsw i32 %409, %392
  %411 = sext i32 %410 to i64
  %412 = getelementptr inbounds i8, i8* %9, i64 %411
  %413 = load i8, i8* %412, align 1, !tbaa !36
  %414 = zext i8 %413 to i32
  %415 = shl nuw nsw i32 %414, 16
  %416 = or i32 %408, %398
  %417 = or i32 %416, %415
  %418 = or i32 %417, -16777216
  %419 = getelementptr inbounds i32, i32* %cp3.1, i64 2
  store i32 %418, i32* %419, align 4, !tbaa !38
  %420 = getelementptr inbounds i8, i8* %pp.addr.1, i64 15
  %421 = load i8, i8* %420, align 1, !tbaa !36
  %422 = zext i8 %421 to i32
  %423 = load i32, i32* %84, align 4, !tbaa !38
  %424 = add nsw i32 %423, %422
  %425 = sext i32 %424 to i64
  %426 = getelementptr inbounds i8, i8* %9, i64 %425
  %427 = load i8, i8* %426, align 1, !tbaa !36
  %428 = zext i8 %427 to i32
  %429 = load i32, i32* %76, align 4, !tbaa !38
  %430 = load i32, i32* %68, align 4, !tbaa !38
  %431 = add nsw i32 %430, %429
  %432 = ashr i32 %431, 16
  %433 = add nsw i32 %432, %422
  %434 = sext i32 %433 to i64
  %435 = getelementptr inbounds i8, i8* %9, i64 %434
  %436 = load i8, i8* %435, align 1, !tbaa !36
  %437 = zext i8 %436 to i32
  %438 = shl nuw nsw i32 %437, 8
  %439 = load i32, i32* %92, align 4, !tbaa !38
  %440 = add nsw i32 %439, %422
  %441 = sext i32 %440 to i64
  %442 = getelementptr inbounds i8, i8* %9, i64 %441
  %443 = load i8, i8* %442, align 1, !tbaa !36
  %444 = zext i8 %443 to i32
  %445 = shl nuw nsw i32 %444, 16
  %446 = or i32 %438, %428
  %447 = or i32 %446, %445
  %448 = or i32 %447, -16777216
  %449 = getelementptr inbounds i32, i32* %cp3.1, i64 3
  store i32 %448, i32* %449, align 4, !tbaa !38
  %450 = getelementptr inbounds i32, i32* %cp.addr.1, i64 4
  %451 = getelementptr inbounds i32, i32* %cp1.1, i64 4
  %452 = getelementptr inbounds i32, i32* %cp2.1, i64 4
  %453 = getelementptr inbounds i32, i32* %cp3.1, i64 4
  %454 = getelementptr inbounds i8, i8* %pp.addr.1, i64 18
  %455 = add i32 %x.addr.0, -1
  %456 = icmp eq i32 %455, 0
  br i1 %456, label %do.end, label %do.body, !llvm.loop !100
}

code gen 1
destroying tree
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   %arrayidx = getelementptr inbounds i8, i8* %pp.addr.1, i64 8
Skipping:   %8 = load i8, i8* %pp.addr.1, align 1, !tbaa !15
destroying tree
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   %arrayidx = getelementptr inbounds i8, i8* %pp.addr.1, i64 8
Here ..
Skipping:   %arrayidx35 = getelementptr inbounds i8, i8* %pp.addr.1, i64 1
Here ..
Skipping:   %arrayidx64 = getelementptr inbounds i32, i32* %cp.addr.1, i64 1
Skipping:   %arrayidx66 = getelementptr inbounds i8, i8* %pp.addr.1, i64 2
Here ..
Skipping:   %arrayidx95 = getelementptr inbounds i32, i32* %cp.addr.1, i64 2
Skipping:   %arrayidx97 = getelementptr inbounds i8, i8* %pp.addr.1, i64 3
Here ..
Skipping:   %arrayidx126 = getelementptr inbounds i32, i32* %cp.addr.1, i64 3
Here ..
I:   %arrayidx128 = getelementptr inbounds i8, i8* %pp.addr.1, i64 4
Last:   %arrayidx128 = getelementptr inbounds i8, i8* %pp.addr.1, i64 4
Schedulable: 1
code gen 0
Gains: 102 - 76 = 26
Profitable: finishing code generation
; Function Attrs: nofree norecurse nounwind optsize uwtable
define internal void @putcontig8bitYCbCr42tile(%struct._TIFFRGBAImage* nocapture readonly %img, i32* nocapture %cp, i32 %x, i32 %y, i32 %w, i32 %h, i32 %fromskew, i32 %toskew, i8* nocapture readonly %pp) #5 {
entry:
  %0 = alloca i32*, i8 4, align 8
  %1 = alloca i32*, i8 4, align 8
  %2 = alloca i32*, i8 4, align 8
  %3 = alloca i32*, i8 4, align 8
  %ycbcr1 = getelementptr inbounds %struct._TIFFRGBAImage, %struct._TIFFRGBAImage* %img, i64 0, i32 18
  %4 = load %struct.TIFFYCbCrToRGB*, %struct.TIFFYCbCrToRGB** %ycbcr1, align 8, !tbaa !21
  %Cr_r_tab = getelementptr inbounds %struct.TIFFYCbCrToRGB, %struct.TIFFYCbCrToRGB* %4, i64 0, i32 1
  %5 = load i32*, i32** %Cr_r_tab, align 8, !tbaa !94
  %Cb_b_tab = getelementptr inbounds %struct.TIFFYCbCrToRGB, %struct.TIFFYCbCrToRGB* %4, i64 0, i32 2
  %6 = load i32*, i32** %Cb_b_tab, align 8, !tbaa !95
  %Cr_g_tab = getelementptr inbounds %struct.TIFFYCbCrToRGB, %struct.TIFFYCbCrToRGB* %4, i64 0, i32 3
  %7 = load i32*, i32** %Cr_g_tab, align 8, !tbaa !96
  %Cb_g_tab = getelementptr inbounds %struct.TIFFYCbCrToRGB, %struct.TIFFYCbCrToRGB* %4, i64 0, i32 4
  %8 = load i32*, i32** %Cb_g_tab, align 8, !tbaa !97
  %clamptab2 = getelementptr inbounds %struct.TIFFYCbCrToRGB, %struct.TIFFYCbCrToRGB* %4, i64 0, i32 0
  %9 = load i8*, i8** %clamptab2, align 8, !tbaa !90
  %cmp406 = icmp ugt i32 %h, 1
  br i1 %cmp406, label %for.body.lr.ph, label %for.end

for.body.lr.ph:                                   ; preds = %entry
  %mul = shl nsw i32 %toskew, 1
  %add = add i32 %mul, %w
  %idx.ext = zext i32 %w to i64
  %add.ptr = getelementptr inbounds i32, i32* %cp, i64 %idx.ext
  %idx.ext3 = sext i32 %toskew to i64
  %add.ptr4 = getelementptr inbounds i32, i32* %add.ptr, i64 %idx.ext3
  %shr = lshr i32 %w, 2
  %idx.ext254 = sext i32 %add to i64
  %idx.ext258 = sext i32 %fromskew to i64
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %do.end
  %cp.addr.0410 = phi i32* [ %cp, %for.body.lr.ph ], [ %add.ptr255, %do.end ]
  %h.addr.0409 = phi i32 [ %h, %for.body.lr.ph ], [ %sub, %do.end ]
  %pp.addr.0408 = phi i8* [ %pp, %for.body.lr.ph ], [ %add.ptr259, %do.end ]
  %cp1.0407 = phi i32* [ %add.ptr4, %for.body.lr.ph ], [ %add.ptr257, %do.end ]
  br label %do.body

do.body:                                          ; preds = %do.body, %for.body
  %cp1.1 = phi i32* [ %cp1.0407, %for.body ], [ %add.ptr252, %do.body ]
  %pp.addr.1 = phi i8* [ %pp.addr.0408, %for.body ], [ %add.ptr253, %do.body ]
  %x.addr.0 = phi i32 [ %shr, %for.body ], [ %dec, %do.body ]
  %cp.addr.1 = phi i32* [ %cp.addr.0410, %for.body ], [ %add.ptr251, %do.body ]
  %arrayidx = getelementptr inbounds i8, i8* %pp.addr.1, i64 8
  %10 = load i8, i8* %arrayidx, align 1, !tbaa !36
  %arrayidx5 = getelementptr inbounds i8, i8* %pp.addr.1, i64 9
  %11 = load i8, i8* %arrayidx5, align 1, !tbaa !36
  %12 = load i8, i8* %pp.addr.1, align 1, !tbaa !36
  %conv8 = zext i8 %12 to i32
  %idxprom = zext i8 %11 to i64
  %arrayidx9 = getelementptr inbounds i32, i32* %5, i64 %idxprom
  %13 = load i32, i32* %arrayidx9, align 4, !tbaa !38
  %add10 = add nsw i32 %13, %conv8
  %idxprom11 = sext i32 %add10 to i64
  %arrayidx12 = getelementptr inbounds i8, i8* %9, i64 %idxprom11
  %14 = load i8, i8* %arrayidx12, align 1, !tbaa !36
  %conv13 = zext i8 %14 to i32
  %idxprom14 = zext i8 %10 to i64
  %arrayidx15 = getelementptr inbounds i32, i32* %8, i64 %idxprom14
  %15 = load i32, i32* %arrayidx15, align 4, !tbaa !38
  %arrayidx17 = getelementptr inbounds i32, i32* %7, i64 %idxprom
  %16 = load i32, i32* %arrayidx17, align 4, !tbaa !38
  %add18 = add nsw i32 %16, %15
  %shr19 = ashr i32 %add18, 16
  %add20 = add nsw i32 %shr19, %conv8
  %idxprom21 = sext i32 %add20 to i64
  %arrayidx22 = getelementptr inbounds i8, i8* %9, i64 %idxprom21
  %17 = load i8, i8* %arrayidx22, align 1, !tbaa !36
  %conv23 = zext i8 %17 to i32
  %shl = shl nuw nsw i32 %conv23, 8
  %arrayidx25 = getelementptr inbounds i32, i32* %6, i64 %idxprom14
  %18 = load i32, i32* %arrayidx25, align 4, !tbaa !38
  %add26 = add nsw i32 %18, %conv8
  %idxprom27 = sext i32 %add26 to i64
  %arrayidx28 = getelementptr inbounds i8, i8* %9, i64 %idxprom27
  %19 = load i8, i8* %arrayidx28, align 1, !tbaa !36
  %conv29 = zext i8 %19 to i32
  %shl30 = shl nuw nsw i32 %conv29, 16
  %or = or i32 %shl, %conv13
  %or31 = or i32 %or, %shl30
  %or32 = or i32 %or31, -16777216
  store i32 %or32, i32* %cp.addr.1, align 4, !tbaa !38
  %arrayidx35 = getelementptr inbounds i8, i8* %pp.addr.1, i64 1
  %20 = load i8, i8* %arrayidx35, align 1, !tbaa !36
  %conv36 = zext i8 %20 to i32
  %21 = load i32, i32* %arrayidx9, align 4, !tbaa !38
  %add39 = add nsw i32 %21, %conv36
  %idxprom40 = sext i32 %add39 to i64
  %arrayidx41 = getelementptr inbounds i8, i8* %9, i64 %idxprom40
  %22 = load i8, i8* %arrayidx41, align 1, !tbaa !36
  %conv42 = zext i8 %22 to i32
  %23 = load i32, i32* %arrayidx15, align 4, !tbaa !38
  %24 = load i32, i32* %arrayidx17, align 4, !tbaa !38
  %add47 = add nsw i32 %24, %23
  %shr48 = ashr i32 %add47, 16
  %add49 = add nsw i32 %shr48, %conv36
  %idxprom50 = sext i32 %add49 to i64
  %arrayidx51 = getelementptr inbounds i8, i8* %9, i64 %idxprom50
  %25 = load i8, i8* %arrayidx51, align 1, !tbaa !36
  %conv52 = zext i8 %25 to i32
  %shl53 = shl nuw nsw i32 %conv52, 8
  %26 = load i32, i32* %arrayidx25, align 4, !tbaa !38
  %add57 = add nsw i32 %26, %conv36
  %idxprom58 = sext i32 %add57 to i64
  %arrayidx59 = getelementptr inbounds i8, i8* %9, i64 %idxprom58
  %27 = load i8, i8* %arrayidx59, align 1, !tbaa !36
  %conv60 = zext i8 %27 to i32
  %shl61 = shl nuw nsw i32 %conv60, 16
  %or54 = or i32 %shl53, %conv42
  %or62 = or i32 %or54, %shl61
  %or63 = or i32 %or62, -16777216
  %arrayidx64 = getelementptr inbounds i32, i32* %cp.addr.1, i64 1
  store i32 %or63, i32* %arrayidx64, align 4, !tbaa !38
  %arrayidx66 = getelementptr inbounds i8, i8* %pp.addr.1, i64 2
  %28 = load i8, i8* %arrayidx66, align 1, !tbaa !36
  %conv67 = zext i8 %28 to i32
  %29 = load i32, i32* %arrayidx9, align 4, !tbaa !38
  %add70 = add nsw i32 %29, %conv67
  %idxprom71 = sext i32 %add70 to i64
  %arrayidx72 = getelementptr inbounds i8, i8* %9, i64 %idxprom71
  %30 = load i8, i8* %arrayidx72, align 1, !tbaa !36
  %conv73 = zext i8 %30 to i32
  %31 = load i32, i32* %arrayidx15, align 4, !tbaa !38
  %32 = load i32, i32* %arrayidx17, align 4, !tbaa !38
  %add78 = add nsw i32 %32, %31
  %shr79 = ashr i32 %add78, 16
  %add80 = add nsw i32 %shr79, %conv67
  %idxprom81 = sext i32 %add80 to i64
  %arrayidx82 = getelementptr inbounds i8, i8* %9, i64 %idxprom81
  %33 = load i8, i8* %arrayidx82, align 1, !tbaa !36
  %conv83 = zext i8 %33 to i32
  %shl84 = shl nuw nsw i32 %conv83, 8
  %34 = load i32, i32* %arrayidx25, align 4, !tbaa !38
  %add88 = add nsw i32 %34, %conv67
  %idxprom89 = sext i32 %add88 to i64
  %arrayidx90 = getelementptr inbounds i8, i8* %9, i64 %idxprom89
  %35 = load i8, i8* %arrayidx90, align 1, !tbaa !36
  %conv91 = zext i8 %35 to i32
  %shl92 = shl nuw nsw i32 %conv91, 16
  %or85 = or i32 %shl84, %conv73
  %or93 = or i32 %or85, %shl92
  %or94 = or i32 %or93, -16777216
  %arrayidx95 = getelementptr inbounds i32, i32* %cp.addr.1, i64 2
  store i32 %or94, i32* %arrayidx95, align 4, !tbaa !38
  %arrayidx97 = getelementptr inbounds i8, i8* %pp.addr.1, i64 3
  %36 = load i8, i8* %arrayidx97, align 1, !tbaa !36
  %conv98 = zext i8 %36 to i32
  %37 = load i32, i32* %arrayidx9, align 4, !tbaa !38
  %add101 = add nsw i32 %37, %conv98
  %idxprom102 = sext i32 %add101 to i64
  %arrayidx103 = getelementptr inbounds i8, i8* %9, i64 %idxprom102
  %38 = load i8, i8* %arrayidx103, align 1, !tbaa !36
  %conv104 = zext i8 %38 to i32
  %39 = load i32, i32* %arrayidx15, align 4, !tbaa !38
  %40 = load i32, i32* %arrayidx17, align 4, !tbaa !38
  %add109 = add nsw i32 %40, %39
  %shr110 = ashr i32 %add109, 16
  %add111 = add nsw i32 %shr110, %conv98
  %idxprom112 = sext i32 %add111 to i64
  %arrayidx113 = getelementptr inbounds i8, i8* %9, i64 %idxprom112
  %41 = load i8, i8* %arrayidx113, align 1, !tbaa !36
  %conv114 = zext i8 %41 to i32
  %shl115 = shl nuw nsw i32 %conv114, 8
  %42 = load i32, i32* %arrayidx25, align 4, !tbaa !38
  %add119 = add nsw i32 %42, %conv98
  %idxprom120 = sext i32 %add119 to i64
  %arrayidx121 = getelementptr inbounds i8, i8* %9, i64 %idxprom120
  %43 = load i8, i8* %arrayidx121, align 1, !tbaa !36
  %conv122 = zext i8 %43 to i32
  %shl123 = shl nuw nsw i32 %conv122, 16
  %or116 = or i32 %shl115, %conv104
  %or124 = or i32 %or116, %shl123
  %or125 = or i32 %or124, -16777216
  %arrayidx126 = getelementptr inbounds i32, i32* %cp.addr.1, i64 3
  store i32 %or125, i32* %arrayidx126, align 4, !tbaa !38
  %arrayidx128 = getelementptr inbounds i8, i8* %pp.addr.1, i64 4
  %44 = load i8, i8* %arrayidx128, align 1, !tbaa !36
  %conv129 = zext i8 %44 to i32
  %45 = load i32, i32* %arrayidx9, align 4, !tbaa !38
  %add132 = add nsw i32 %45, %conv129
  %idxprom133 = sext i32 %add132 to i64
  %arrayidx134 = getelementptr inbounds i8, i8* %9, i64 %idxprom133
  %46 = load i8, i8* %arrayidx134, align 1, !tbaa !36
  %conv135 = zext i8 %46 to i32
  %47 = load i32, i32* %arrayidx15, align 4, !tbaa !38
  %48 = load i32, i32* %arrayidx17, align 4, !tbaa !38
  %add140 = add nsw i32 %48, %47
  %shr141 = ashr i32 %add140, 16
  %add142 = add nsw i32 %shr141, %conv129
  %idxprom143 = sext i32 %add142 to i64
  %arrayidx144 = getelementptr inbounds i8, i8* %9, i64 %idxprom143
  %49 = load i8, i8* %arrayidx144, align 1, !tbaa !36
  %conv145 = zext i8 %49 to i32
  %shl146 = shl nuw nsw i32 %conv145, 8
  %50 = load i32, i32* %arrayidx25, align 4, !tbaa !38
  %add150 = add nsw i32 %50, %conv129
  %idxprom151 = sext i32 %add150 to i64
  %arrayidx152 = getelementptr inbounds i8, i8* %9, i64 %idxprom151
  %51 = load i8, i8* %arrayidx152, align 1, !tbaa !36
  %conv153 = zext i8 %51 to i32
  %shl154 = shl nuw nsw i32 %conv153, 16
  %or147 = or i32 %shl146, %conv135
  %or155 = or i32 %or147, %shl154
  %or156 = or i32 %or155, -16777216
  store i32 %or156, i32* %cp1.1, align 4, !tbaa !38
  %arrayidx159 = getelementptr inbounds i8, i8* %pp.addr.1, i64 5
  %52 = load i8, i8* %arrayidx159, align 1, !tbaa !36
  %conv160 = zext i8 %52 to i32
  %53 = load i32, i32* %arrayidx9, align 4, !tbaa !38
  %add163 = add nsw i32 %53, %conv160
  %idxprom164 = sext i32 %add163 to i64
  %arrayidx165 = getelementptr inbounds i8, i8* %9, i64 %idxprom164
  %54 = load i8, i8* %arrayidx165, align 1, !tbaa !36
  %conv166 = zext i8 %54 to i32
  %55 = load i32, i32* %arrayidx15, align 4, !tbaa !38
  %56 = load i32, i32* %arrayidx17, align 4, !tbaa !38
  %add171 = add nsw i32 %56, %55
  %shr172 = ashr i32 %add171, 16
  %add173 = add nsw i32 %shr172, %conv160
  %idxprom174 = sext i32 %add173 to i64
  %arrayidx175 = getelementptr inbounds i8, i8* %9, i64 %idxprom174
  %57 = load i8, i8* %arrayidx175, align 1, !tbaa !36
  %conv176 = zext i8 %57 to i32
  %shl177 = shl nuw nsw i32 %conv176, 8
  %58 = load i32, i32* %arrayidx25, align 4, !tbaa !38
  %add181 = add nsw i32 %58, %conv160
  %idxprom182 = sext i32 %add181 to i64
  %arrayidx183 = getelementptr inbounds i8, i8* %9, i64 %idxprom182
  %59 = load i8, i8* %arrayidx183, align 1, !tbaa !36
  %conv184 = zext i8 %59 to i32
  %shl185 = shl nuw nsw i32 %conv184, 16
  %or178 = or i32 %shl177, %conv166
  %or186 = or i32 %or178, %shl185
  %or187 = or i32 %or186, -16777216
  %arrayidx188 = getelementptr inbounds i32, i32* %cp1.1, i64 1
  store i32 %or187, i32* %arrayidx188, align 4, !tbaa !38
  %arrayidx190 = getelementptr inbounds i8, i8* %pp.addr.1, i64 6
  %60 = load i8, i8* %arrayidx190, align 1, !tbaa !36
  %conv191 = zext i8 %60 to i32
  %61 = load i32, i32* %arrayidx9, align 4, !tbaa !38
  %add194 = add nsw i32 %61, %conv191
  %idxprom195 = sext i32 %add194 to i64
  %arrayidx196 = getelementptr inbounds i8, i8* %9, i64 %idxprom195
  %62 = load i8, i8* %arrayidx196, align 1, !tbaa !36
  %conv197 = zext i8 %62 to i32
  %63 = load i32, i32* %arrayidx15, align 4, !tbaa !38
  %64 = load i32, i32* %arrayidx17, align 4, !tbaa !38
  %add202 = add nsw i32 %64, %63
  %shr203 = ashr i32 %add202, 16
  %add204 = add nsw i32 %shr203, %conv191
  %idxprom205 = sext i32 %add204 to i64
  %arrayidx206 = getelementptr inbounds i8, i8* %9, i64 %idxprom205
  %65 = load i8, i8* %arrayidx206, align 1, !tbaa !36
  %conv207 = zext i8 %65 to i32
  %shl208 = shl nuw nsw i32 %conv207, 8
  %66 = load i32, i32* %arrayidx25, align 4, !tbaa !38
  %add212 = add nsw i32 %66, %conv191
  %idxprom213 = sext i32 %add212 to i64
  %arrayidx214 = getelementptr inbounds i8, i8* %9, i64 %idxprom213
  %67 = load i8, i8* %arrayidx214, align 1, !tbaa !36
  %conv215 = zext i8 %67 to i32
  %shl216 = shl nuw nsw i32 %conv215, 16
  %or209 = or i32 %shl208, %conv197
  %or217 = or i32 %or209, %shl216
  %or218 = or i32 %or217, -16777216
  %arrayidx219 = getelementptr inbounds i32, i32* %cp1.1, i64 2
  store i32 %or218, i32* %arrayidx219, align 4, !tbaa !38
  %arrayidx221 = getelementptr inbounds i8, i8* %pp.addr.1, i64 7
  %68 = load i8, i8* %arrayidx221, align 1, !tbaa !36
  %conv222 = zext i8 %68 to i32
  %69 = load i32, i32* %arrayidx9, align 4, !tbaa !38
  %add225 = add nsw i32 %69, %conv222
  %idxprom226 = sext i32 %add225 to i64
  %arrayidx227 = getelementptr inbounds i8, i8* %9, i64 %idxprom226
  %70 = load i8, i8* %arrayidx227, align 1, !tbaa !36
  %conv228 = zext i8 %70 to i32
  %71 = load i32, i32* %arrayidx15, align 4, !tbaa !38
  %72 = load i32, i32* %arrayidx17, align 4, !tbaa !38
  %add233 = add nsw i32 %72, %71
  %shr234 = ashr i32 %add233, 16
  %add235 = add nsw i32 %shr234, %conv222
  %idxprom236 = sext i32 %add235 to i64
  %arrayidx237 = getelementptr inbounds i8, i8* %9, i64 %idxprom236
  %73 = load i8, i8* %arrayidx237, align 1, !tbaa !36
  %conv238 = zext i8 %73 to i32
  %shl239 = shl nuw nsw i32 %conv238, 8
  %74 = load i32, i32* %arrayidx25, align 4, !tbaa !38
  %add243 = add nsw i32 %74, %conv222
  %idxprom244 = sext i32 %add243 to i64
  %arrayidx245 = getelementptr inbounds i8, i8* %9, i64 %idxprom244
  %75 = load i8, i8* %arrayidx245, align 1, !tbaa !36
  %conv246 = zext i8 %75 to i32
  %shl247 = shl nuw nsw i32 %conv246, 16
  %or240 = or i32 %shl239, %conv228
  %or248 = or i32 %or240, %shl247
  %or249 = or i32 %or248, -16777216
  %arrayidx250 = getelementptr inbounds i32, i32* %cp1.1, i64 3
  store i32 %or249, i32* %arrayidx250, align 4, !tbaa !38
  %add.ptr251 = getelementptr inbounds i32, i32* %cp.addr.1, i64 4
  %add.ptr252 = getelementptr inbounds i32, i32* %cp1.1, i64 4
  %add.ptr253 = getelementptr inbounds i8, i8* %pp.addr.1, i64 10
  %dec = add i32 %x.addr.0, -1
  %tobool.not = icmp eq i32 %dec, 0
  br i1 %tobool.not, label %do.end, label %do.body, !llvm.loop !101

do.end:                                           ; preds = %do.body
  %add.ptr251.lcssa = phi i32* [ %add.ptr251, %do.body ]
  %add.ptr252.lcssa = phi i32* [ %add.ptr252, %do.body ]
  %add.ptr253.lcssa = phi i8* [ %add.ptr253, %do.body ]
  %add.ptr255 = getelementptr inbounds i32, i32* %add.ptr251.lcssa, i64 %idx.ext254
  %add.ptr257 = getelementptr inbounds i32, i32* %add.ptr252.lcssa, i64 %idx.ext254
  %add.ptr259 = getelementptr inbounds i8, i8* %add.ptr253.lcssa, i64 %idx.ext258
  %sub = add i32 %h.addr.0409, -2
  %cmp = icmp ugt i32 %sub, 1
  br i1 %cmp, label %for.body, label %for.end.loopexit, !llvm.loop !102

for.end.loopexit:                                 ; preds = %do.end
  br label %for.end

for.end:                                          ; preds = %for.end.loopexit, %entry
  ret void

rolled.pre:                                       ; No predecessors!

rolled.loop:                                      ; No predecessors!
  %76 = phi i8 
  %77 = zext i8 %76 to i64
  %78 = add i64 %77, 1
  %79 = getelementptr i8, i8* %pp.addr.1, i64 %78
  %80 = getelementptr inbounds i8, i8* %pp.addr.1, i64 9
  %81 = load i8, i8* %80, align 1
  %82 = zext i8 %81 to i64
  %83 = getelementptr inbounds i32, i32* %7, i64 %82
  %84 = getelementptr i32*, i32** %3, i8 %76
  store i32* %83, i32** %84, align 8
  %85 = load i32, i32* %83, align 4
  %86 = getelementptr inbounds i8, i8* %pp.addr.1, i64 8
  %87 = load i8, i8* %86, align 1
  %88 = zext i8 %87 to i64
  %89 = getelementptr inbounds i32, i32* %8, i64 %88
  %90 = getelementptr i32*, i32** %2, i8 %76
  store i32* %89, i32** %90, align 8
  %91 = load i32, i32* %89, align 4
  %92 = add nsw i32 %85, %91
  %93 = ashr i32 %92, 16
  %94 = load i8, i8* %79, align 1
  %95 = zext i8 %94 to i32
  %96 = add nsw i32 %93, %95
  %97 = sext i32 %96 to i64
  %98 = getelementptr inbounds i8, i8* %9, i64 %97
  %99 = load i8, i8* %98, align 1
  %100 = zext i8 %99 to i32
  %101 = shl nuw nsw i32 %100, 8
  %102 = getelementptr inbounds i32, i32* %5, i64 %82
  %103 = getelementptr i32*, i32** %1, i8 %76
  store i32* %102, i32** %103, align 8
  %104 = load i32, i32* %102, align 4
  %105 = add nsw i32 %104, %95
  %106 = sext i32 %105 to i64
  %107 = getelementptr inbounds i8, i8* %9, i64 %106
  %108 = load i8, i8* %107, align 1
  %109 = zext i8 %108 to i32
  %110 = or i32 %101, %109
  %111 = getelementptr inbounds i32, i32* %6, i64 %88
  %112 = getelementptr i32*, i32** %0, i8 %76
  store i32* %111, i32** %112, align 8
  %113 = load i32, i32* %111, align 4
  %114 = add nsw i32 %113, %95
  %115 = sext i32 %114 to i64
  %116 = getelementptr inbounds i8, i8* %9, i64 %115
  %117 = load i8, i8* %116, align 1
  %118 = zext i8 %117 to i32
  %119 = shl nuw nsw i32 %118, 16
  %120 = or i32 %110, %119
  %121 = or i32 %120, -16777216
  %122 = zext i8 %76 to i64
  %123 = add i64 %122, 1
  %124 = getelementptr i32, i32* %cp.addr.1, i64 %123
  store i32 %121, i32* %124, align 4
  %125 = add i8 %76, 1
  %126 = icmp ne i8 %125, 4

rolled.exit:                                      ; No predecessors!
  %127 = getelementptr i32*, i32** %3, i8 0
  %128 = load i32*, i32** %127, align 8
  %129 = getelementptr i32*, i32** %3, i8 1
  %130 = load i32*, i32** %129, align 8
  %131 = getelementptr i32*, i32** %3, i8 2
  %132 = load i32*, i32** %131, align 8
  %133 = getelementptr i32*, i32** %3, i8 3
  %134 = load i32*, i32** %133, align 8
  %135 = getelementptr i32*, i32** %2, i8 0
  %136 = load i32*, i32** %135, align 8
  %137 = getelementptr i32*, i32** %2, i8 1
  %138 = load i32*, i32** %137, align 8
  %139 = getelementptr i32*, i32** %2, i8 2
  %140 = load i32*, i32** %139, align 8
  %141 = getelementptr i32*, i32** %2, i8 3
  %142 = load i32*, i32** %141, align 8
  %143 = getelementptr i32*, i32** %1, i8 0
  %144 = load i32*, i32** %143, align 8
  %145 = getelementptr i32*, i32** %1, i8 1
  %146 = load i32*, i32** %145, align 8
  %147 = getelementptr i32*, i32** %1, i8 2
  %148 = load i32*, i32** %147, align 8
  %149 = getelementptr i32*, i32** %1, i8 3
  %150 = load i32*, i32** %149, align 8
  %151 = getelementptr i32*, i32** %0, i8 0
  %152 = load i32*, i32** %151, align 8
  %153 = getelementptr i32*, i32** %0, i8 1
  %154 = load i32*, i32** %153, align 8
  %155 = getelementptr i32*, i32** %0, i8 2
  %156 = load i32*, i32** %155, align 8
  %157 = getelementptr i32*, i32** %0, i8 3
  %158 = load i32*, i32** %157, align 8
}

Done!
; Function Attrs: nofree norecurse nounwind optsize uwtable
define internal void @putcontig8bitYCbCr42tile(%struct._TIFFRGBAImage* nocapture readonly %img, i32* nocapture %cp, i32 %x, i32 %y, i32 %w, i32 %h, i32 %fromskew, i32 %toskew, i8* nocapture readonly %pp) #5 {
entry:
  %0 = alloca i32*, i8 4, align 8
  %1 = alloca i32*, i8 4, align 8
  %2 = alloca i32*, i8 4, align 8
  %3 = alloca i32*, i8 4, align 8
  %ycbcr1 = getelementptr inbounds %struct._TIFFRGBAImage, %struct._TIFFRGBAImage* %img, i64 0, i32 18
  %4 = load %struct.TIFFYCbCrToRGB*, %struct.TIFFYCbCrToRGB** %ycbcr1, align 8, !tbaa !21
  %Cr_r_tab = getelementptr inbounds %struct.TIFFYCbCrToRGB, %struct.TIFFYCbCrToRGB* %4, i64 0, i32 1
  %5 = load i32*, i32** %Cr_r_tab, align 8, !tbaa !94
  %Cb_b_tab = getelementptr inbounds %struct.TIFFYCbCrToRGB, %struct.TIFFYCbCrToRGB* %4, i64 0, i32 2
  %6 = load i32*, i32** %Cb_b_tab, align 8, !tbaa !95
  %Cr_g_tab = getelementptr inbounds %struct.TIFFYCbCrToRGB, %struct.TIFFYCbCrToRGB* %4, i64 0, i32 3
  %7 = load i32*, i32** %Cr_g_tab, align 8, !tbaa !96
  %Cb_g_tab = getelementptr inbounds %struct.TIFFYCbCrToRGB, %struct.TIFFYCbCrToRGB* %4, i64 0, i32 4
  %8 = load i32*, i32** %Cb_g_tab, align 8, !tbaa !97
  %clamptab2 = getelementptr inbounds %struct.TIFFYCbCrToRGB, %struct.TIFFYCbCrToRGB* %4, i64 0, i32 0
  %9 = load i8*, i8** %clamptab2, align 8, !tbaa !90
  %cmp406 = icmp ugt i32 %h, 1
  br i1 %cmp406, label %for.body.lr.ph, label %for.end

for.body.lr.ph:                                   ; preds = %entry
  %mul = shl nsw i32 %toskew, 1
  %add = add i32 %mul, %w
  %idx.ext = zext i32 %w to i64
  %add.ptr = getelementptr inbounds i32, i32* %cp, i64 %idx.ext
  %idx.ext3 = sext i32 %toskew to i64
  %add.ptr4 = getelementptr inbounds i32, i32* %add.ptr, i64 %idx.ext3
  %shr = lshr i32 %w, 2
  %idx.ext254 = sext i32 %add to i64
  %idx.ext258 = sext i32 %fromskew to i64
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %do.end
  %cp.addr.0410 = phi i32* [ %cp, %for.body.lr.ph ], [ %add.ptr255, %do.end ]
  %h.addr.0409 = phi i32 [ %h, %for.body.lr.ph ], [ %sub, %do.end ]
  %pp.addr.0408 = phi i8* [ %pp, %for.body.lr.ph ], [ %add.ptr259, %do.end ]
  %cp1.0407 = phi i32* [ %add.ptr4, %for.body.lr.ph ], [ %add.ptr257, %do.end ]
  br label %do.body

do.body:                                          ; preds = %rolled.exit, %for.body
  %cp1.1 = phi i32* [ %cp1.0407, %for.body ], [ %213, %rolled.exit ]
  %pp.addr.1 = phi i8* [ %pp.addr.0408, %for.body ], [ %214, %rolled.exit ]
  %x.addr.0 = phi i32 [ %shr, %for.body ], [ %215, %rolled.exit ]
  %cp.addr.1 = phi i32* [ %cp.addr.0410, %for.body ], [ %212, %rolled.exit ]
  br label %rolled.pre

do.end:                                           ; preds = %rolled.exit
  %add.ptr251.lcssa = phi i32* [ %212, %rolled.exit ]
  %add.ptr252.lcssa = phi i32* [ %213, %rolled.exit ]
  %add.ptr253.lcssa = phi i8* [ %214, %rolled.exit ]
  %add.ptr255 = getelementptr inbounds i32, i32* %add.ptr251.lcssa, i64 %idx.ext254
  %add.ptr257 = getelementptr inbounds i32, i32* %add.ptr252.lcssa, i64 %idx.ext254
  %add.ptr259 = getelementptr inbounds i8, i8* %add.ptr253.lcssa, i64 %idx.ext258
  %sub = add i32 %h.addr.0409, -2
  %cmp = icmp ugt i32 %sub, 1
  br i1 %cmp, label %for.body, label %for.end.loopexit, !llvm.loop !101

for.end.loopexit:                                 ; preds = %do.end
  br label %for.end

for.end:                                          ; preds = %for.end.loopexit, %entry
  ret void

rolled.pre:                                       ; preds = %do.body
  br label %rolled.loop

rolled.loop:                                      ; preds = %rolled.pre, %rolled.loop
  %10 = phi i8 [ 0, %rolled.pre ], [ %59, %rolled.loop ]
  %11 = zext i8 %10 to i64
  %12 = add i64 %11, 1
  %13 = getelementptr i8, i8* %pp.addr.1, i64 %12
  %14 = getelementptr inbounds i8, i8* %pp.addr.1, i64 9
  %15 = load i8, i8* %14, align 1
  %16 = zext i8 %15 to i64
  %17 = getelementptr inbounds i32, i32* %7, i64 %16
  %18 = getelementptr i32*, i32** %3, i8 %10
  store i32* %17, i32** %18, align 8
  %19 = load i32, i32* %17, align 4
  %20 = getelementptr inbounds i8, i8* %pp.addr.1, i64 8
  %21 = load i8, i8* %20, align 1
  %22 = zext i8 %21 to i64
  %23 = getelementptr inbounds i32, i32* %8, i64 %22
  %24 = getelementptr i32*, i32** %2, i8 %10
  store i32* %23, i32** %24, align 8
  %25 = load i32, i32* %23, align 4
  %26 = add nsw i32 %19, %25
  %27 = ashr i32 %26, 16
  %28 = load i8, i8* %13, align 1
  %29 = zext i8 %28 to i32
  %30 = add nsw i32 %27, %29
  %31 = sext i32 %30 to i64
  %32 = getelementptr inbounds i8, i8* %9, i64 %31
  %33 = load i8, i8* %32, align 1
  %34 = zext i8 %33 to i32
  %35 = shl nuw nsw i32 %34, 8
  %36 = getelementptr inbounds i32, i32* %5, i64 %16
  %37 = getelementptr i32*, i32** %1, i8 %10
  store i32* %36, i32** %37, align 8
  %38 = load i32, i32* %36, align 4
  %39 = add nsw i32 %38, %29
  %40 = sext i32 %39 to i64
  %41 = getelementptr inbounds i8, i8* %9, i64 %40
  %42 = load i8, i8* %41, align 1
  %43 = zext i8 %42 to i32
  %44 = or i32 %35, %43
  %45 = getelementptr inbounds i32, i32* %6, i64 %22
  %46 = getelementptr i32*, i32** %0, i8 %10
  store i32* %45, i32** %46, align 8
  %47 = load i32, i32* %45, align 4
  %48 = add nsw i32 %47, %29
  %49 = sext i32 %48 to i64
  %50 = getelementptr inbounds i8, i8* %9, i64 %49
  %51 = load i8, i8* %50, align 1
  %52 = zext i8 %51 to i32
  %53 = shl nuw nsw i32 %52, 16
  %54 = or i32 %44, %53
  %55 = or i32 %54, -16777216
  %56 = zext i8 %10 to i64
  %57 = add i64 %56, 1
  %58 = getelementptr i32, i32* %cp.addr.1, i64 %57
  store i32 %55, i32* %58, align 4
  %59 = add i8 %10, 1
  %60 = icmp ne i8 %59, 4
  br i1 %60, label %rolled.loop, label %rolled.exit

rolled.exit:                                      ; preds = %rolled.loop
  %61 = getelementptr i32*, i32** %3, i8 0
  %62 = load i32*, i32** %61, align 8
  %63 = getelementptr i32*, i32** %3, i8 1
  %64 = load i32*, i32** %63, align 8
  %65 = getelementptr i32*, i32** %3, i8 2
  %66 = load i32*, i32** %65, align 8
  %67 = getelementptr i32*, i32** %3, i8 3
  %68 = load i32*, i32** %67, align 8
  %69 = getelementptr i32*, i32** %2, i8 0
  %70 = load i32*, i32** %69, align 8
  %71 = getelementptr i32*, i32** %2, i8 1
  %72 = load i32*, i32** %71, align 8
  %73 = getelementptr i32*, i32** %2, i8 2
  %74 = load i32*, i32** %73, align 8
  %75 = getelementptr i32*, i32** %2, i8 3
  %76 = load i32*, i32** %75, align 8
  %77 = getelementptr i32*, i32** %1, i8 0
  %78 = load i32*, i32** %77, align 8
  %79 = getelementptr i32*, i32** %1, i8 1
  %80 = load i32*, i32** %79, align 8
  %81 = getelementptr i32*, i32** %1, i8 2
  %82 = load i32*, i32** %81, align 8
  %83 = getelementptr i32*, i32** %1, i8 3
  %84 = load i32*, i32** %83, align 8
  %85 = getelementptr i32*, i32** %0, i8 0
  %86 = load i32*, i32** %85, align 8
  %87 = getelementptr i32*, i32** %0, i8 1
  %88 = load i32*, i32** %87, align 8
  %89 = getelementptr i32*, i32** %0, i8 2
  %90 = load i32*, i32** %89, align 8
  %91 = getelementptr i32*, i32** %0, i8 3
  %92 = load i32*, i32** %91, align 8
  %93 = getelementptr inbounds i8, i8* %pp.addr.1, i64 4
  %94 = load i8, i8* %93, align 1, !tbaa !36
  %95 = zext i8 %94 to i32
  %96 = load i32, i32* %84, align 4, !tbaa !38
  %97 = add nsw i32 %96, %95
  %98 = sext i32 %97 to i64
  %99 = getelementptr inbounds i8, i8* %9, i64 %98
  %100 = load i8, i8* %99, align 1, !tbaa !36
  %101 = zext i8 %100 to i32
  %102 = load i32, i32* %76, align 4, !tbaa !38
  %103 = load i32, i32* %68, align 4, !tbaa !38
  %104 = add nsw i32 %103, %102
  %105 = ashr i32 %104, 16
  %106 = add nsw i32 %105, %95
  %107 = sext i32 %106 to i64
  %108 = getelementptr inbounds i8, i8* %9, i64 %107
  %109 = load i8, i8* %108, align 1, !tbaa !36
  %110 = zext i8 %109 to i32
  %111 = shl nuw nsw i32 %110, 8
  %112 = load i32, i32* %92, align 4, !tbaa !38
  %113 = add nsw i32 %112, %95
  %114 = sext i32 %113 to i64
  %115 = getelementptr inbounds i8, i8* %9, i64 %114
  %116 = load i8, i8* %115, align 1, !tbaa !36
  %117 = zext i8 %116 to i32
  %118 = shl nuw nsw i32 %117, 16
  %119 = or i32 %111, %101
  %120 = or i32 %119, %118
  %121 = or i32 %120, -16777216
  store i32 %121, i32* %cp1.1, align 4, !tbaa !38
  %122 = getelementptr inbounds i8, i8* %pp.addr.1, i64 5
  %123 = load i8, i8* %122, align 1, !tbaa !36
  %124 = zext i8 %123 to i32
  %125 = load i32, i32* %84, align 4, !tbaa !38
  %126 = add nsw i32 %125, %124
  %127 = sext i32 %126 to i64
  %128 = getelementptr inbounds i8, i8* %9, i64 %127
  %129 = load i8, i8* %128, align 1, !tbaa !36
  %130 = zext i8 %129 to i32
  %131 = load i32, i32* %76, align 4, !tbaa !38
  %132 = load i32, i32* %68, align 4, !tbaa !38
  %133 = add nsw i32 %132, %131
  %134 = ashr i32 %133, 16
  %135 = add nsw i32 %134, %124
  %136 = sext i32 %135 to i64
  %137 = getelementptr inbounds i8, i8* %9, i64 %136
  %138 = load i8, i8* %137, align 1, !tbaa !36
  %139 = zext i8 %138 to i32
  %140 = shl nuw nsw i32 %139, 8
  %141 = load i32, i32* %92, align 4, !tbaa !38
  %142 = add nsw i32 %141, %124
  %143 = sext i32 %142 to i64
  %144 = getelementptr inbounds i8, i8* %9, i64 %143
  %145 = load i8, i8* %144, align 1, !tbaa !36
  %146 = zext i8 %145 to i32
  %147 = shl nuw nsw i32 %146, 16
  %148 = or i32 %140, %130
  %149 = or i32 %148, %147
  %150 = or i32 %149, -16777216
  %151 = getelementptr inbounds i32, i32* %cp1.1, i64 1
  store i32 %150, i32* %151, align 4, !tbaa !38
  %152 = getelementptr inbounds i8, i8* %pp.addr.1, i64 6
  %153 = load i8, i8* %152, align 1, !tbaa !36
  %154 = zext i8 %153 to i32
  %155 = load i32, i32* %84, align 4, !tbaa !38
  %156 = add nsw i32 %155, %154
  %157 = sext i32 %156 to i64
  %158 = getelementptr inbounds i8, i8* %9, i64 %157
  %159 = load i8, i8* %158, align 1, !tbaa !36
  %160 = zext i8 %159 to i32
  %161 = load i32, i32* %76, align 4, !tbaa !38
  %162 = load i32, i32* %68, align 4, !tbaa !38
  %163 = add nsw i32 %162, %161
  %164 = ashr i32 %163, 16
  %165 = add nsw i32 %164, %154
  %166 = sext i32 %165 to i64
  %167 = getelementptr inbounds i8, i8* %9, i64 %166
  %168 = load i8, i8* %167, align 1, !tbaa !36
  %169 = zext i8 %168 to i32
  %170 = shl nuw nsw i32 %169, 8
  %171 = load i32, i32* %92, align 4, !tbaa !38
  %172 = add nsw i32 %171, %154
  %173 = sext i32 %172 to i64
  %174 = getelementptr inbounds i8, i8* %9, i64 %173
  %175 = load i8, i8* %174, align 1, !tbaa !36
  %176 = zext i8 %175 to i32
  %177 = shl nuw nsw i32 %176, 16
  %178 = or i32 %170, %160
  %179 = or i32 %178, %177
  %180 = or i32 %179, -16777216
  %181 = getelementptr inbounds i32, i32* %cp1.1, i64 2
  store i32 %180, i32* %181, align 4, !tbaa !38
  %182 = getelementptr inbounds i8, i8* %pp.addr.1, i64 7
  %183 = load i8, i8* %182, align 1, !tbaa !36
  %184 = zext i8 %183 to i32
  %185 = load i32, i32* %84, align 4, !tbaa !38
  %186 = add nsw i32 %185, %184
  %187 = sext i32 %186 to i64
  %188 = getelementptr inbounds i8, i8* %9, i64 %187
  %189 = load i8, i8* %188, align 1, !tbaa !36
  %190 = zext i8 %189 to i32
  %191 = load i32, i32* %76, align 4, !tbaa !38
  %192 = load i32, i32* %68, align 4, !tbaa !38
  %193 = add nsw i32 %192, %191
  %194 = ashr i32 %193, 16
  %195 = add nsw i32 %194, %184
  %196 = sext i32 %195 to i64
  %197 = getelementptr inbounds i8, i8* %9, i64 %196
  %198 = load i8, i8* %197, align 1, !tbaa !36
  %199 = zext i8 %198 to i32
  %200 = shl nuw nsw i32 %199, 8
  %201 = load i32, i32* %92, align 4, !tbaa !38
  %202 = add nsw i32 %201, %184
  %203 = sext i32 %202 to i64
  %204 = getelementptr inbounds i8, i8* %9, i64 %203
  %205 = load i8, i8* %204, align 1, !tbaa !36
  %206 = zext i8 %205 to i32
  %207 = shl nuw nsw i32 %206, 16
  %208 = or i32 %200, %190
  %209 = or i32 %208, %207
  %210 = or i32 %209, -16777216
  %211 = getelementptr inbounds i32, i32* %cp1.1, i64 3
  store i32 %210, i32* %211, align 4, !tbaa !38
  %212 = getelementptr inbounds i32, i32* %cp.addr.1, i64 4
  %213 = getelementptr inbounds i32, i32* %cp1.1, i64 4
  %214 = getelementptr inbounds i8, i8* %pp.addr.1, i64 10
  %215 = add i32 %x.addr.0, -1
  %216 = icmp eq i32 %215, 0
  br i1 %216, label %do.end, label %do.body, !llvm.loop !102
}

code gen 1
destroying tree
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   %arrayidx = getelementptr inbounds i8, i8* %pp.addr.1, i64 4
Here ..
Skipping:   %arrayidx33 = getelementptr inbounds i8, i8* %pp.addr.1, i64 1
Here ..
Skipping:   %arrayidx62 = getelementptr inbounds i32, i32* %cp.addr.1, i64 1
Skipping:   %arrayidx64 = getelementptr inbounds i8, i8* %pp.addr.1, i64 2
Here ..
Skipping:   %arrayidx93 = getelementptr inbounds i32, i32* %cp.addr.1, i64 2
Skipping:   %arrayidx95 = getelementptr inbounds i8, i8* %pp.addr.1, i64 3
Here ..
Skipping:   %arrayidx124 = getelementptr inbounds i32, i32* %cp.addr.1, i64 3
Here ..
I:   %add.ptr = getelementptr inbounds i32, i32* %cp.addr.1, i64 4
Last:   %add.ptr = getelementptr inbounds i32, i32* %cp.addr.1, i64 4
Schedulable: 1
code gen 0
Gains: 102 - 36 = 66
Profitable: finishing code generation
; Function Attrs: nofree norecurse nounwind optsize uwtable
define internal void @putcontig8bitYCbCr41tile(%struct._TIFFRGBAImage* nocapture readonly %img, i32* nocapture %cp, i32 %x, i32 %y, i32 %w, i32 %h, i32 %fromskew, i32 %toskew, i8* nocapture readonly %pp) #5 {
entry:
  %ycbcr1 = getelementptr inbounds %struct._TIFFRGBAImage, %struct._TIFFRGBAImage* %img, i64 0, i32 18
  %0 = load %struct.TIFFYCbCrToRGB*, %struct.TIFFYCbCrToRGB** %ycbcr1, align 8, !tbaa !21
  %Cr_r_tab = getelementptr inbounds %struct.TIFFYCbCrToRGB, %struct.TIFFYCbCrToRGB* %0, i64 0, i32 1
  %1 = load i32*, i32** %Cr_r_tab, align 8, !tbaa !94
  %Cb_b_tab = getelementptr inbounds %struct.TIFFYCbCrToRGB, %struct.TIFFYCbCrToRGB* %0, i64 0, i32 2
  %2 = load i32*, i32** %Cb_b_tab, align 8, !tbaa !95
  %Cr_g_tab = getelementptr inbounds %struct.TIFFYCbCrToRGB, %struct.TIFFYCbCrToRGB* %0, i64 0, i32 3
  %3 = load i32*, i32** %Cr_g_tab, align 8, !tbaa !96
  %Cb_g_tab = getelementptr inbounds %struct.TIFFYCbCrToRGB, %struct.TIFFYCbCrToRGB* %0, i64 0, i32 4
  %4 = load i32*, i32** %Cb_g_tab, align 8, !tbaa !97
  %clamptab2 = getelementptr inbounds %struct.TIFFYCbCrToRGB, %struct.TIFFYCbCrToRGB* %0, i64 0, i32 0
  %5 = load i8*, i8** %clamptab2, align 8, !tbaa !90
  %idx.ext = sext i32 %toskew to i64
  %shr = lshr i32 %w, 2
  %idx.ext127 = sext i32 %fromskew to i64
  br label %do.body

do.body:                                          ; preds = %do.end, %entry
  %pp.addr.0 = phi i8* [ %pp, %entry ], [ %add.ptr128, %do.end ]
  %h.addr.0 = phi i32 [ %h, %entry ], [ %dec130, %do.end ]
  %cp.addr.0 = phi i32* [ %cp, %entry ], [ %add.ptr126, %do.end ]
  br label %do.body3

do.body3:                                         ; preds = %do.body3, %do.body
  %pp.addr.1 = phi i8* [ %pp.addr.0, %do.body ], [ %add.ptr125, %do.body3 ]
  %x.addr.0 = phi i32 [ %shr, %do.body ], [ %dec, %do.body3 ]
  %cp.addr.1 = phi i32* [ %cp.addr.0, %do.body ], [ %add.ptr, %do.body3 ]
  %arrayidx = getelementptr inbounds i8, i8* %pp.addr.1, i64 4
  %6 = load i8, i8* %arrayidx, align 1, !tbaa !36
  %arrayidx4 = getelementptr inbounds i8, i8* %pp.addr.1, i64 5
  %7 = load i8, i8* %arrayidx4, align 1, !tbaa !36
  %8 = load i8, i8* %pp.addr.1, align 1, !tbaa !36
  %conv7 = zext i8 %8 to i32
  %idxprom = zext i8 %7 to i64
  %arrayidx8 = getelementptr inbounds i32, i32* %1, i64 %idxprom
  %9 = load i32, i32* %arrayidx8, align 4, !tbaa !38
  %add = add nsw i32 %9, %conv7
  %idxprom9 = sext i32 %add to i64
  %arrayidx10 = getelementptr inbounds i8, i8* %5, i64 %idxprom9
  %10 = load i8, i8* %arrayidx10, align 1, !tbaa !36
  %conv11 = zext i8 %10 to i32
  %idxprom12 = zext i8 %6 to i64
  %arrayidx13 = getelementptr inbounds i32, i32* %4, i64 %idxprom12
  %11 = load i32, i32* %arrayidx13, align 4, !tbaa !38
  %arrayidx15 = getelementptr inbounds i32, i32* %3, i64 %idxprom
  %12 = load i32, i32* %arrayidx15, align 4, !tbaa !38
  %add16 = add nsw i32 %12, %11
  %shr17 = ashr i32 %add16, 16
  %add18 = add nsw i32 %shr17, %conv7
  %idxprom19 = sext i32 %add18 to i64
  %arrayidx20 = getelementptr inbounds i8, i8* %5, i64 %idxprom19
  %13 = load i8, i8* %arrayidx20, align 1, !tbaa !36
  %conv21 = zext i8 %13 to i32
  %shl = shl nuw nsw i32 %conv21, 8
  %arrayidx23 = getelementptr inbounds i32, i32* %2, i64 %idxprom12
  %14 = load i32, i32* %arrayidx23, align 4, !tbaa !38
  %add24 = add nsw i32 %14, %conv7
  %idxprom25 = sext i32 %add24 to i64
  %arrayidx26 = getelementptr inbounds i8, i8* %5, i64 %idxprom25
  %15 = load i8, i8* %arrayidx26, align 1, !tbaa !36
  %conv27 = zext i8 %15 to i32
  %shl28 = shl nuw nsw i32 %conv27, 16
  %or = or i32 %shl, %conv11
  %or29 = or i32 %or, %shl28
  %or30 = or i32 %or29, -16777216
  store i32 %or30, i32* %cp.addr.1, align 4, !tbaa !38
  %arrayidx33 = getelementptr inbounds i8, i8* %pp.addr.1, i64 1
  %16 = load i8, i8* %arrayidx33, align 1, !tbaa !36
  %conv34 = zext i8 %16 to i32
  %17 = load i32, i32* %arrayidx8, align 4, !tbaa !38
  %add37 = add nsw i32 %17, %conv34
  %idxprom38 = sext i32 %add37 to i64
  %arrayidx39 = getelementptr inbounds i8, i8* %5, i64 %idxprom38
  %18 = load i8, i8* %arrayidx39, align 1, !tbaa !36
  %conv40 = zext i8 %18 to i32
  %19 = load i32, i32* %arrayidx13, align 4, !tbaa !38
  %20 = load i32, i32* %arrayidx15, align 4, !tbaa !38
  %add45 = add nsw i32 %20, %19
  %shr46 = ashr i32 %add45, 16
  %add47 = add nsw i32 %shr46, %conv34
  %idxprom48 = sext i32 %add47 to i64
  %arrayidx49 = getelementptr inbounds i8, i8* %5, i64 %idxprom48
  %21 = load i8, i8* %arrayidx49, align 1, !tbaa !36
  %conv50 = zext i8 %21 to i32
  %shl51 = shl nuw nsw i32 %conv50, 8
  %22 = load i32, i32* %arrayidx23, align 4, !tbaa !38
  %add55 = add nsw i32 %22, %conv34
  %idxprom56 = sext i32 %add55 to i64
  %arrayidx57 = getelementptr inbounds i8, i8* %5, i64 %idxprom56
  %23 = load i8, i8* %arrayidx57, align 1, !tbaa !36
  %conv58 = zext i8 %23 to i32
  %shl59 = shl nuw nsw i32 %conv58, 16
  %or52 = or i32 %shl51, %conv40
  %or60 = or i32 %or52, %shl59
  %or61 = or i32 %or60, -16777216
  %arrayidx62 = getelementptr inbounds i32, i32* %cp.addr.1, i64 1
  store i32 %or61, i32* %arrayidx62, align 4, !tbaa !38
  %arrayidx64 = getelementptr inbounds i8, i8* %pp.addr.1, i64 2
  %24 = load i8, i8* %arrayidx64, align 1, !tbaa !36
  %conv65 = zext i8 %24 to i32
  %25 = load i32, i32* %arrayidx8, align 4, !tbaa !38
  %add68 = add nsw i32 %25, %conv65
  %idxprom69 = sext i32 %add68 to i64
  %arrayidx70 = getelementptr inbounds i8, i8* %5, i64 %idxprom69
  %26 = load i8, i8* %arrayidx70, align 1, !tbaa !36
  %conv71 = zext i8 %26 to i32
  %27 = load i32, i32* %arrayidx13, align 4, !tbaa !38
  %28 = load i32, i32* %arrayidx15, align 4, !tbaa !38
  %add76 = add nsw i32 %28, %27
  %shr77 = ashr i32 %add76, 16
  %add78 = add nsw i32 %shr77, %conv65
  %idxprom79 = sext i32 %add78 to i64
  %arrayidx80 = getelementptr inbounds i8, i8* %5, i64 %idxprom79
  %29 = load i8, i8* %arrayidx80, align 1, !tbaa !36
  %conv81 = zext i8 %29 to i32
  %shl82 = shl nuw nsw i32 %conv81, 8
  %30 = load i32, i32* %arrayidx23, align 4, !tbaa !38
  %add86 = add nsw i32 %30, %conv65
  %idxprom87 = sext i32 %add86 to i64
  %arrayidx88 = getelementptr inbounds i8, i8* %5, i64 %idxprom87
  %31 = load i8, i8* %arrayidx88, align 1, !tbaa !36
  %conv89 = zext i8 %31 to i32
  %shl90 = shl nuw nsw i32 %conv89, 16
  %or83 = or i32 %shl82, %conv71
  %or91 = or i32 %or83, %shl90
  %or92 = or i32 %or91, -16777216
  %arrayidx93 = getelementptr inbounds i32, i32* %cp.addr.1, i64 2
  store i32 %or92, i32* %arrayidx93, align 4, !tbaa !38
  %arrayidx95 = getelementptr inbounds i8, i8* %pp.addr.1, i64 3
  %32 = load i8, i8* %arrayidx95, align 1, !tbaa !36
  %conv96 = zext i8 %32 to i32
  %33 = load i32, i32* %arrayidx8, align 4, !tbaa !38
  %add99 = add nsw i32 %33, %conv96
  %idxprom100 = sext i32 %add99 to i64
  %arrayidx101 = getelementptr inbounds i8, i8* %5, i64 %idxprom100
  %34 = load i8, i8* %arrayidx101, align 1, !tbaa !36
  %conv102 = zext i8 %34 to i32
  %35 = load i32, i32* %arrayidx13, align 4, !tbaa !38
  %36 = load i32, i32* %arrayidx15, align 4, !tbaa !38
  %add107 = add nsw i32 %36, %35
  %shr108 = ashr i32 %add107, 16
  %add109 = add nsw i32 %shr108, %conv96
  %idxprom110 = sext i32 %add109 to i64
  %arrayidx111 = getelementptr inbounds i8, i8* %5, i64 %idxprom110
  %37 = load i8, i8* %arrayidx111, align 1, !tbaa !36
  %conv112 = zext i8 %37 to i32
  %shl113 = shl nuw nsw i32 %conv112, 8
  %38 = load i32, i32* %arrayidx23, align 4, !tbaa !38
  %add117 = add nsw i32 %38, %conv96
  %idxprom118 = sext i32 %add117 to i64
  %arrayidx119 = getelementptr inbounds i8, i8* %5, i64 %idxprom118
  %39 = load i8, i8* %arrayidx119, align 1, !tbaa !36
  %conv120 = zext i8 %39 to i32
  %shl121 = shl nuw nsw i32 %conv120, 16
  %or114 = or i32 %shl113, %conv102
  %or122 = or i32 %or114, %shl121
  %or123 = or i32 %or122, -16777216
  %arrayidx124 = getelementptr inbounds i32, i32* %cp.addr.1, i64 3
  store i32 %or123, i32* %arrayidx124, align 4, !tbaa !38
  %add.ptr = getelementptr inbounds i32, i32* %cp.addr.1, i64 4
  %add.ptr125 = getelementptr inbounds i8, i8* %pp.addr.1, i64 6
  %dec = add i32 %x.addr.0, -1
  %tobool.not = icmp eq i32 %dec, 0
  br i1 %tobool.not, label %do.end, label %do.body3, !llvm.loop !103

do.end:                                           ; preds = %do.body3
  %add.ptr.lcssa = phi i32* [ %add.ptr, %do.body3 ]
  %add.ptr125.lcssa = phi i8* [ %add.ptr125, %do.body3 ]
  %add.ptr126 = getelementptr inbounds i32, i32* %add.ptr.lcssa, i64 %idx.ext
  %add.ptr128 = getelementptr inbounds i8, i8* %add.ptr125.lcssa, i64 %idx.ext127
  %dec130 = add i32 %h.addr.0, -1
  %tobool131.not = icmp eq i32 %dec130, 0
  br i1 %tobool131.not, label %do.end132, label %do.body, !llvm.loop !104

do.end132:                                        ; preds = %do.end
  ret void

rolled.pre:                                       ; No predecessors!

rolled.loop:                                      ; No predecessors!
  %40 = phi i8 
  %41 = zext i8 %40 to i64
  %42 = add i64 %41, 1
  %43 = getelementptr i8, i8* %pp.addr.1, i64 %42
  %44 = getelementptr inbounds i8, i8* %pp.addr.1, i64 5
  %45 = load i8, i8* %44, align 1
  %46 = zext i8 %45 to i64
  %47 = getelementptr inbounds i32, i32* %3, i64 %46
  %48 = load i32, i32* %47, align 4
  %49 = getelementptr inbounds i8, i8* %pp.addr.1, i64 4
  %50 = load i8, i8* %49, align 1
  %51 = zext i8 %50 to i64
  %52 = getelementptr inbounds i32, i32* %4, i64 %51
  %53 = load i32, i32* %52, align 4
  %54 = add nsw i32 %48, %53
  %55 = ashr i32 %54, 16
  %56 = load i8, i8* %43, align 1
  %57 = zext i8 %56 to i32
  %58 = add nsw i32 %55, %57
  %59 = sext i32 %58 to i64
  %60 = getelementptr inbounds i8, i8* %5, i64 %59
  %61 = load i8, i8* %60, align 1
  %62 = zext i8 %61 to i32
  %63 = shl nuw nsw i32 %62, 8
  %64 = getelementptr inbounds i32, i32* %1, i64 %46
  %65 = load i32, i32* %64, align 4
  %66 = add nsw i32 %65, %57
  %67 = sext i32 %66 to i64
  %68 = getelementptr inbounds i8, i8* %5, i64 %67
  %69 = load i8, i8* %68, align 1
  %70 = zext i8 %69 to i32
  %71 = or i32 %63, %70
  %72 = getelementptr inbounds i32, i32* %2, i64 %51
  %73 = load i32, i32* %72, align 4
  %74 = add nsw i32 %73, %57
  %75 = sext i32 %74 to i64
  %76 = getelementptr inbounds i8, i8* %5, i64 %75
  %77 = load i8, i8* %76, align 1
  %78 = zext i8 %77 to i32
  %79 = shl nuw nsw i32 %78, 16
  %80 = or i32 %71, %79
  %81 = or i32 %80, -16777216
  %82 = zext i8 %40 to i64
  %83 = add i64 %82, 1
  %84 = getelementptr i32, i32* %cp.addr.1, i64 %83
  store i32 %81, i32* %84, align 4
  %85 = add i8 %40, 1
  %86 = icmp ne i8 %85, 4

rolled.exit:                                      ; No predecessors!
}

Done!
; Function Attrs: nofree norecurse nounwind optsize uwtable
define internal void @putcontig8bitYCbCr41tile(%struct._TIFFRGBAImage* nocapture readonly %img, i32* nocapture %cp, i32 %x, i32 %y, i32 %w, i32 %h, i32 %fromskew, i32 %toskew, i8* nocapture readonly %pp) #5 {
entry:
  %ycbcr1 = getelementptr inbounds %struct._TIFFRGBAImage, %struct._TIFFRGBAImage* %img, i64 0, i32 18
  %0 = load %struct.TIFFYCbCrToRGB*, %struct.TIFFYCbCrToRGB** %ycbcr1, align 8, !tbaa !21
  %Cr_r_tab = getelementptr inbounds %struct.TIFFYCbCrToRGB, %struct.TIFFYCbCrToRGB* %0, i64 0, i32 1
  %1 = load i32*, i32** %Cr_r_tab, align 8, !tbaa !94
  %Cb_b_tab = getelementptr inbounds %struct.TIFFYCbCrToRGB, %struct.TIFFYCbCrToRGB* %0, i64 0, i32 2
  %2 = load i32*, i32** %Cb_b_tab, align 8, !tbaa !95
  %Cr_g_tab = getelementptr inbounds %struct.TIFFYCbCrToRGB, %struct.TIFFYCbCrToRGB* %0, i64 0, i32 3
  %3 = load i32*, i32** %Cr_g_tab, align 8, !tbaa !96
  %Cb_g_tab = getelementptr inbounds %struct.TIFFYCbCrToRGB, %struct.TIFFYCbCrToRGB* %0, i64 0, i32 4
  %4 = load i32*, i32** %Cb_g_tab, align 8, !tbaa !97
  %clamptab2 = getelementptr inbounds %struct.TIFFYCbCrToRGB, %struct.TIFFYCbCrToRGB* %0, i64 0, i32 0
  %5 = load i8*, i8** %clamptab2, align 8, !tbaa !90
  %idx.ext = sext i32 %toskew to i64
  %shr = lshr i32 %w, 2
  %idx.ext127 = sext i32 %fromskew to i64
  br label %do.body

do.body:                                          ; preds = %do.end, %entry
  %pp.addr.0 = phi i8* [ %pp, %entry ], [ %add.ptr128, %do.end ]
  %h.addr.0 = phi i32 [ %h, %entry ], [ %dec130, %do.end ]
  %cp.addr.0 = phi i32* [ %cp, %entry ], [ %add.ptr126, %do.end ]
  br label %do.body3

do.body3:                                         ; preds = %rolled.exit, %do.body
  %pp.addr.1 = phi i8* [ %pp.addr.0, %do.body ], [ %54, %rolled.exit ]
  %x.addr.0 = phi i32 [ %shr, %do.body ], [ %55, %rolled.exit ]
  %cp.addr.1 = phi i32* [ %cp.addr.0, %do.body ], [ %53, %rolled.exit ]
  br label %rolled.pre

do.end:                                           ; preds = %rolled.exit
  %add.ptr.lcssa = phi i32* [ %53, %rolled.exit ]
  %add.ptr125.lcssa = phi i8* [ %54, %rolled.exit ]
  %add.ptr126 = getelementptr inbounds i32, i32* %add.ptr.lcssa, i64 %idx.ext
  %add.ptr128 = getelementptr inbounds i8, i8* %add.ptr125.lcssa, i64 %idx.ext127
  %dec130 = add i32 %h.addr.0, -1
  %tobool131.not = icmp eq i32 %dec130, 0
  br i1 %tobool131.not, label %do.end132, label %do.body, !llvm.loop !103

do.end132:                                        ; preds = %do.end
  ret void

rolled.pre:                                       ; preds = %do.body3
  br label %rolled.loop

rolled.loop:                                      ; preds = %rolled.pre, %rolled.loop
  %6 = phi i8 [ 0, %rolled.pre ], [ %51, %rolled.loop ]
  %7 = zext i8 %6 to i64
  %8 = add i64 %7, 1
  %9 = getelementptr i8, i8* %pp.addr.1, i64 %8
  %10 = getelementptr inbounds i8, i8* %pp.addr.1, i64 5
  %11 = load i8, i8* %10, align 1
  %12 = zext i8 %11 to i64
  %13 = getelementptr inbounds i32, i32* %3, i64 %12
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr inbounds i8, i8* %pp.addr.1, i64 4
  %16 = load i8, i8* %15, align 1
  %17 = zext i8 %16 to i64
  %18 = getelementptr inbounds i32, i32* %4, i64 %17
  %19 = load i32, i32* %18, align 4
  %20 = add nsw i32 %14, %19
  %21 = ashr i32 %20, 16
  %22 = load i8, i8* %9, align 1
  %23 = zext i8 %22 to i32
  %24 = add nsw i32 %21, %23
  %25 = sext i32 %24 to i64
  %26 = getelementptr inbounds i8, i8* %5, i64 %25
  %27 = load i8, i8* %26, align 1
  %28 = zext i8 %27 to i32
  %29 = shl nuw nsw i32 %28, 8
  %30 = getelementptr inbounds i32, i32* %1, i64 %12
  %31 = load i32, i32* %30, align 4
  %32 = add nsw i32 %31, %23
  %33 = sext i32 %32 to i64
  %34 = getelementptr inbounds i8, i8* %5, i64 %33
  %35 = load i8, i8* %34, align 1
  %36 = zext i8 %35 to i32
  %37 = or i32 %29, %36
  %38 = getelementptr inbounds i32, i32* %2, i64 %17
  %39 = load i32, i32* %38, align 4
  %40 = add nsw i32 %39, %23
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds i8, i8* %5, i64 %41
  %43 = load i8, i8* %42, align 1
  %44 = zext i8 %43 to i32
  %45 = shl nuw nsw i32 %44, 16
  %46 = or i32 %37, %45
  %47 = or i32 %46, -16777216
  %48 = zext i8 %6 to i64
  %49 = add i64 %48, 1
  %50 = getelementptr i32, i32* %cp.addr.1, i64 %49
  store i32 %47, i32* %50, align 4
  %51 = add i8 %6, 1
  %52 = icmp ne i8 %51, 4
  br i1 %52, label %rolled.loop, label %rolled.exit

rolled.exit:                                      ; preds = %rolled.loop
  %53 = getelementptr inbounds i32, i32* %cp.addr.1, i64 4
  %54 = getelementptr inbounds i8, i8* %pp.addr.1, i64 6
  %55 = add i32 %x.addr.0, -1
  %56 = icmp eq i32 %55, 0
  br i1 %56, label %do.end, label %do.body3, !llvm.loop !104
}

code gen 1
destroying tree
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   %arrayidx = getelementptr inbounds i8, i8* %pp.addr.1, i64 4
Skipping:   %8 = load i8, i8* %pp.addr.1, align 1, !tbaa !15
destroying tree
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   %arrayidx = getelementptr inbounds i8, i8* %pp.addr.1, i64 4
Here ..
Skipping:   %arrayidx35 = getelementptr inbounds i8, i8* %pp.addr.1, i64 1
Here ..
Skipping:   %arrayidx64 = getelementptr inbounds i32, i32* %cp.addr.1, i64 1
Here ..
I:   %arrayidx66 = getelementptr inbounds i8, i8* %pp.addr.1, i64 2
Last:   %arrayidx66 = getelementptr inbounds i8, i8* %pp.addr.1, i64 2
Schedulable: 1
code gen 0
Gains: 54 - 58 = -4
Unprofitable: deleting generated code
Done!
code gen 1
destroying tree
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   %arrayidx = getelementptr inbounds i8, i8* %pp.addr.1, i64 2
Here ..
Skipping:   %arrayidx33 = getelementptr inbounds i8, i8* %pp.addr.1, i64 1
Here ..
Skipping:   %arrayidx62 = getelementptr inbounds i32, i32* %cp.addr.1, i64 1
Here ..
I:   %add.ptr = getelementptr inbounds i32, i32* %cp.addr.1, i64 2
Last:   %add.ptr = getelementptr inbounds i32, i32* %cp.addr.1, i64 2
Schedulable: 1
code gen 0
Gains: 54 - 34 = 20
Profitable: finishing code generation
; Function Attrs: nofree norecurse nounwind optsize uwtable
define internal void @putcontig8bitYCbCr21tile(%struct._TIFFRGBAImage* nocapture readonly %img, i32* nocapture %cp, i32 %x, i32 %y, i32 %w, i32 %h, i32 %fromskew, i32 %toskew, i8* nocapture readonly %pp) #5 {
entry:
  %ycbcr1 = getelementptr inbounds %struct._TIFFRGBAImage, %struct._TIFFRGBAImage* %img, i64 0, i32 18
  %0 = load %struct.TIFFYCbCrToRGB*, %struct.TIFFYCbCrToRGB** %ycbcr1, align 8, !tbaa !21
  %Cr_r_tab = getelementptr inbounds %struct.TIFFYCbCrToRGB, %struct.TIFFYCbCrToRGB* %0, i64 0, i32 1
  %1 = load i32*, i32** %Cr_r_tab, align 8, !tbaa !94
  %Cb_b_tab = getelementptr inbounds %struct.TIFFYCbCrToRGB, %struct.TIFFYCbCrToRGB* %0, i64 0, i32 2
  %2 = load i32*, i32** %Cb_b_tab, align 8, !tbaa !95
  %Cr_g_tab = getelementptr inbounds %struct.TIFFYCbCrToRGB, %struct.TIFFYCbCrToRGB* %0, i64 0, i32 3
  %3 = load i32*, i32** %Cr_g_tab, align 8, !tbaa !96
  %Cb_g_tab = getelementptr inbounds %struct.TIFFYCbCrToRGB, %struct.TIFFYCbCrToRGB* %0, i64 0, i32 4
  %4 = load i32*, i32** %Cb_g_tab, align 8, !tbaa !97
  %clamptab2 = getelementptr inbounds %struct.TIFFYCbCrToRGB, %struct.TIFFYCbCrToRGB* %0, i64 0, i32 0
  %5 = load i8*, i8** %clamptab2, align 8, !tbaa !90
  %idx.ext = sext i32 %toskew to i64
  %shr = lshr i32 %w, 1
  %idx.ext65 = sext i32 %fromskew to i64
  br label %do.body

do.body:                                          ; preds = %do.end, %entry
  %pp.addr.0 = phi i8* [ %pp, %entry ], [ %add.ptr66, %do.end ]
  %h.addr.0 = phi i32 [ %h, %entry ], [ %dec68, %do.end ]
  %cp.addr.0 = phi i32* [ %cp, %entry ], [ %add.ptr64, %do.end ]
  br label %do.body3

do.body3:                                         ; preds = %do.body3, %do.body
  %pp.addr.1 = phi i8* [ %pp.addr.0, %do.body ], [ %add.ptr63, %do.body3 ]
  %x.addr.0 = phi i32 [ %shr, %do.body ], [ %dec, %do.body3 ]
  %cp.addr.1 = phi i32* [ %cp.addr.0, %do.body ], [ %add.ptr, %do.body3 ]
  %arrayidx = getelementptr inbounds i8, i8* %pp.addr.1, i64 2
  %6 = load i8, i8* %arrayidx, align 1, !tbaa !36
  %arrayidx4 = getelementptr inbounds i8, i8* %pp.addr.1, i64 3
  %7 = load i8, i8* %arrayidx4, align 1, !tbaa !36
  %8 = load i8, i8* %pp.addr.1, align 1, !tbaa !36
  %conv7 = zext i8 %8 to i32
  %idxprom = zext i8 %7 to i64
  %arrayidx8 = getelementptr inbounds i32, i32* %1, i64 %idxprom
  %9 = load i32, i32* %arrayidx8, align 4, !tbaa !38
  %add = add nsw i32 %9, %conv7
  %idxprom9 = sext i32 %add to i64
  %arrayidx10 = getelementptr inbounds i8, i8* %5, i64 %idxprom9
  %10 = load i8, i8* %arrayidx10, align 1, !tbaa !36
  %conv11 = zext i8 %10 to i32
  %idxprom12 = zext i8 %6 to i64
  %arrayidx13 = getelementptr inbounds i32, i32* %4, i64 %idxprom12
  %11 = load i32, i32* %arrayidx13, align 4, !tbaa !38
  %arrayidx15 = getelementptr inbounds i32, i32* %3, i64 %idxprom
  %12 = load i32, i32* %arrayidx15, align 4, !tbaa !38
  %add16 = add nsw i32 %12, %11
  %shr17 = ashr i32 %add16, 16
  %add18 = add nsw i32 %shr17, %conv7
  %idxprom19 = sext i32 %add18 to i64
  %arrayidx20 = getelementptr inbounds i8, i8* %5, i64 %idxprom19
  %13 = load i8, i8* %arrayidx20, align 1, !tbaa !36
  %conv21 = zext i8 %13 to i32
  %shl = shl nuw nsw i32 %conv21, 8
  %arrayidx23 = getelementptr inbounds i32, i32* %2, i64 %idxprom12
  %14 = load i32, i32* %arrayidx23, align 4, !tbaa !38
  %add24 = add nsw i32 %14, %conv7
  %idxprom25 = sext i32 %add24 to i64
  %arrayidx26 = getelementptr inbounds i8, i8* %5, i64 %idxprom25
  %15 = load i8, i8* %arrayidx26, align 1, !tbaa !36
  %conv27 = zext i8 %15 to i32
  %shl28 = shl nuw nsw i32 %conv27, 16
  %or = or i32 %shl, %conv11
  %or29 = or i32 %or, %shl28
  %or30 = or i32 %or29, -16777216
  store i32 %or30, i32* %cp.addr.1, align 4, !tbaa !38
  %arrayidx33 = getelementptr inbounds i8, i8* %pp.addr.1, i64 1
  %16 = load i8, i8* %arrayidx33, align 1, !tbaa !36
  %conv34 = zext i8 %16 to i32
  %17 = load i32, i32* %arrayidx8, align 4, !tbaa !38
  %add37 = add nsw i32 %17, %conv34
  %idxprom38 = sext i32 %add37 to i64
  %arrayidx39 = getelementptr inbounds i8, i8* %5, i64 %idxprom38
  %18 = load i8, i8* %arrayidx39, align 1, !tbaa !36
  %conv40 = zext i8 %18 to i32
  %19 = load i32, i32* %arrayidx13, align 4, !tbaa !38
  %20 = load i32, i32* %arrayidx15, align 4, !tbaa !38
  %add45 = add nsw i32 %20, %19
  %shr46 = ashr i32 %add45, 16
  %add47 = add nsw i32 %shr46, %conv34
  %idxprom48 = sext i32 %add47 to i64
  %arrayidx49 = getelementptr inbounds i8, i8* %5, i64 %idxprom48
  %21 = load i8, i8* %arrayidx49, align 1, !tbaa !36
  %conv50 = zext i8 %21 to i32
  %shl51 = shl nuw nsw i32 %conv50, 8
  %22 = load i32, i32* %arrayidx23, align 4, !tbaa !38
  %add55 = add nsw i32 %22, %conv34
  %idxprom56 = sext i32 %add55 to i64
  %arrayidx57 = getelementptr inbounds i8, i8* %5, i64 %idxprom56
  %23 = load i8, i8* %arrayidx57, align 1, !tbaa !36
  %conv58 = zext i8 %23 to i32
  %shl59 = shl nuw nsw i32 %conv58, 16
  %or52 = or i32 %shl51, %conv40
  %or60 = or i32 %or52, %shl59
  %or61 = or i32 %or60, -16777216
  %arrayidx62 = getelementptr inbounds i32, i32* %cp.addr.1, i64 1
  store i32 %or61, i32* %arrayidx62, align 4, !tbaa !38
  %add.ptr = getelementptr inbounds i32, i32* %cp.addr.1, i64 2
  %add.ptr63 = getelementptr inbounds i8, i8* %pp.addr.1, i64 4
  %dec = add i32 %x.addr.0, -1
  %tobool.not = icmp eq i32 %dec, 0
  br i1 %tobool.not, label %do.end, label %do.body3, !llvm.loop !107

do.end:                                           ; preds = %do.body3
  %add.ptr.lcssa = phi i32* [ %add.ptr, %do.body3 ]
  %add.ptr63.lcssa = phi i8* [ %add.ptr63, %do.body3 ]
  %add.ptr64 = getelementptr inbounds i32, i32* %add.ptr.lcssa, i64 %idx.ext
  %add.ptr66 = getelementptr inbounds i8, i8* %add.ptr63.lcssa, i64 %idx.ext65
  %dec68 = add i32 %h.addr.0, -1
  %tobool69.not = icmp eq i32 %dec68, 0
  br i1 %tobool69.not, label %do.end70, label %do.body, !llvm.loop !108

do.end70:                                         ; preds = %do.end
  ret void

rolled.pre:                                       ; No predecessors!

rolled.loop:                                      ; No predecessors!
  %24 = phi i8 
  %25 = getelementptr i8, i8* %pp.addr.1, i64 1
  %26 = getelementptr inbounds i8, i8* %pp.addr.1, i64 3
  %27 = load i8, i8* %26, align 1
  %28 = zext i8 %27 to i64
  %29 = getelementptr inbounds i32, i32* %3, i64 %28
  %30 = load i32, i32* %29, align 4
  %31 = getelementptr inbounds i8, i8* %pp.addr.1, i64 2
  %32 = load i8, i8* %31, align 1
  %33 = zext i8 %32 to i64
  %34 = getelementptr inbounds i32, i32* %4, i64 %33
  %35 = load i32, i32* %34, align 4
  %36 = add nsw i32 %30, %35
  %37 = ashr i32 %36, 16
  %38 = load i8, i8* %25, align 1
  %39 = zext i8 %38 to i32
  %40 = add nsw i32 %37, %39
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds i8, i8* %5, i64 %41
  %43 = load i8, i8* %42, align 1
  %44 = zext i8 %43 to i32
  %45 = shl nuw nsw i32 %44, 8
  %46 = getelementptr inbounds i32, i32* %1, i64 %28
  %47 = load i32, i32* %46, align 4
  %48 = add nsw i32 %47, %39
  %49 = sext i32 %48 to i64
  %50 = getelementptr inbounds i8, i8* %5, i64 %49
  %51 = load i8, i8* %50, align 1
  %52 = zext i8 %51 to i32
  %53 = or i32 %45, %52
  %54 = getelementptr inbounds i32, i32* %2, i64 %33
  %55 = load i32, i32* %54, align 4
  %56 = add nsw i32 %55, %39
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds i8, i8* %5, i64 %57
  %59 = load i8, i8* %58, align 1
  %60 = zext i8 %59 to i32
  %61 = shl nuw nsw i32 %60, 16
  %62 = or i32 %53, %61
  %63 = or i32 %62, -16777216
  %64 = getelementptr i32, i32* %cp.addr.1, i64 1
  store i32 %63, i32* %64, align 4
  %65 = add i8 %24, 1
  %66 = icmp ne i8 %65, 2

rolled.exit:                                      ; No predecessors!
}

Done!
; Function Attrs: nofree norecurse nounwind optsize uwtable
define internal void @putcontig8bitYCbCr21tile(%struct._TIFFRGBAImage* nocapture readonly %img, i32* nocapture %cp, i32 %x, i32 %y, i32 %w, i32 %h, i32 %fromskew, i32 %toskew, i8* nocapture readonly %pp) #5 {
entry:
  %ycbcr1 = getelementptr inbounds %struct._TIFFRGBAImage, %struct._TIFFRGBAImage* %img, i64 0, i32 18
  %0 = load %struct.TIFFYCbCrToRGB*, %struct.TIFFYCbCrToRGB** %ycbcr1, align 8, !tbaa !21
  %Cr_r_tab = getelementptr inbounds %struct.TIFFYCbCrToRGB, %struct.TIFFYCbCrToRGB* %0, i64 0, i32 1
  %1 = load i32*, i32** %Cr_r_tab, align 8, !tbaa !94
  %Cb_b_tab = getelementptr inbounds %struct.TIFFYCbCrToRGB, %struct.TIFFYCbCrToRGB* %0, i64 0, i32 2
  %2 = load i32*, i32** %Cb_b_tab, align 8, !tbaa !95
  %Cr_g_tab = getelementptr inbounds %struct.TIFFYCbCrToRGB, %struct.TIFFYCbCrToRGB* %0, i64 0, i32 3
  %3 = load i32*, i32** %Cr_g_tab, align 8, !tbaa !96
  %Cb_g_tab = getelementptr inbounds %struct.TIFFYCbCrToRGB, %struct.TIFFYCbCrToRGB* %0, i64 0, i32 4
  %4 = load i32*, i32** %Cb_g_tab, align 8, !tbaa !97
  %clamptab2 = getelementptr inbounds %struct.TIFFYCbCrToRGB, %struct.TIFFYCbCrToRGB* %0, i64 0, i32 0
  %5 = load i8*, i8** %clamptab2, align 8, !tbaa !90
  %idx.ext = sext i32 %toskew to i64
  %shr = lshr i32 %w, 1
  %idx.ext65 = sext i32 %fromskew to i64
  br label %do.body

do.body:                                          ; preds = %do.end, %entry
  %pp.addr.0 = phi i8* [ %pp, %entry ], [ %add.ptr66, %do.end ]
  %h.addr.0 = phi i32 [ %h, %entry ], [ %dec68, %do.end ]
  %cp.addr.0 = phi i32* [ %cp, %entry ], [ %add.ptr64, %do.end ]
  br label %do.body3

do.body3:                                         ; preds = %rolled.exit, %do.body
  %pp.addr.1 = phi i8* [ %pp.addr.0, %do.body ], [ %50, %rolled.exit ]
  %x.addr.0 = phi i32 [ %shr, %do.body ], [ %51, %rolled.exit ]
  %cp.addr.1 = phi i32* [ %cp.addr.0, %do.body ], [ %49, %rolled.exit ]
  br label %rolled.pre

do.end:                                           ; preds = %rolled.exit
  %add.ptr.lcssa = phi i32* [ %49, %rolled.exit ]
  %add.ptr63.lcssa = phi i8* [ %50, %rolled.exit ]
  %add.ptr64 = getelementptr inbounds i32, i32* %add.ptr.lcssa, i64 %idx.ext
  %add.ptr66 = getelementptr inbounds i8, i8* %add.ptr63.lcssa, i64 %idx.ext65
  %dec68 = add i32 %h.addr.0, -1
  %tobool69.not = icmp eq i32 %dec68, 0
  br i1 %tobool69.not, label %do.end70, label %do.body, !llvm.loop !107

do.end70:                                         ; preds = %do.end
  ret void

rolled.pre:                                       ; preds = %do.body3
  br label %rolled.loop

rolled.loop:                                      ; preds = %rolled.pre, %rolled.loop
  %6 = phi i8 [ 0, %rolled.pre ], [ %47, %rolled.loop ]
  %7 = getelementptr i8, i8* %pp.addr.1, i64 1
  %8 = getelementptr inbounds i8, i8* %pp.addr.1, i64 3
  %9 = load i8, i8* %8, align 1
  %10 = zext i8 %9 to i64
  %11 = getelementptr inbounds i32, i32* %3, i64 %10
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds i8, i8* %pp.addr.1, i64 2
  %14 = load i8, i8* %13, align 1
  %15 = zext i8 %14 to i64
  %16 = getelementptr inbounds i32, i32* %4, i64 %15
  %17 = load i32, i32* %16, align 4
  %18 = add nsw i32 %12, %17
  %19 = ashr i32 %18, 16
  %20 = load i8, i8* %7, align 1
  %21 = zext i8 %20 to i32
  %22 = add nsw i32 %19, %21
  %23 = sext i32 %22 to i64
  %24 = getelementptr inbounds i8, i8* %5, i64 %23
  %25 = load i8, i8* %24, align 1
  %26 = zext i8 %25 to i32
  %27 = shl nuw nsw i32 %26, 8
  %28 = getelementptr inbounds i32, i32* %1, i64 %10
  %29 = load i32, i32* %28, align 4
  %30 = add nsw i32 %29, %21
  %31 = sext i32 %30 to i64
  %32 = getelementptr inbounds i8, i8* %5, i64 %31
  %33 = load i8, i8* %32, align 1
  %34 = zext i8 %33 to i32
  %35 = or i32 %27, %34
  %36 = getelementptr inbounds i32, i32* %2, i64 %15
  %37 = load i32, i32* %36, align 4
  %38 = add nsw i32 %37, %21
  %39 = sext i32 %38 to i64
  %40 = getelementptr inbounds i8, i8* %5, i64 %39
  %41 = load i8, i8* %40, align 1
  %42 = zext i8 %41 to i32
  %43 = shl nuw nsw i32 %42, 16
  %44 = or i32 %35, %43
  %45 = or i32 %44, -16777216
  %46 = getelementptr i32, i32* %cp.addr.1, i64 1
  store i32 %45, i32* %46, align 4
  %47 = add i8 %6, 1
  %48 = icmp ne i8 %47, 2
  br i1 %48, label %rolled.loop, label %rolled.exit

rolled.exit:                                      ; preds = %rolled.loop
  %49 = getelementptr inbounds i32, i32* %cp.addr.1, i64 2
  %50 = getelementptr inbounds i8, i8* %pp.addr.1, i64 4
  %51 = add i32 %x.addr.0, -1
  %52 = icmp eq i32 %51, 0
  br i1 %52, label %do.end, label %do.body3, !llvm.loop !108
}

code gen 1
destroying tree
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   %0 = load i8, i8* %r.addr.1323, align 1, !tbaa !2
Skipping:   %incdec.ptr2 = getelementptr inbounds i8, i8* %g.addr.1324, i64 1
Skipping:   %incdec.ptr4 = getelementptr inbounds i8, i8* %b.addr.1325, i64 1
Skipping:   %incdec.ptr8 = getelementptr inbounds i8, i8* %a.addr.1326, i64 1
Here ..
Skipping:   %incdec.ptr12 = getelementptr inbounds i32, i32* %cp.addr.1322, i64 1
Skipping:   %incdec.ptr13 = getelementptr inbounds i8, i8* %r.addr.1323, i64 2
Skipping:   %incdec.ptr15 = getelementptr inbounds i8, i8* %g.addr.1324, i64 2
Skipping:   %incdec.ptr19 = getelementptr inbounds i8, i8* %b.addr.1325, i64 2
Skipping:   %incdec.ptr23 = getelementptr inbounds i8, i8* %a.addr.1326, i64 2
Here ..
Skipping:   %incdec.ptr27 = getelementptr inbounds i32, i32* %cp.addr.1322, i64 2
Skipping:   %incdec.ptr28 = getelementptr inbounds i8, i8* %r.addr.1323, i64 3
Skipping:   %incdec.ptr30 = getelementptr inbounds i8, i8* %g.addr.1324, i64 3
Skipping:   %incdec.ptr34 = getelementptr inbounds i8, i8* %b.addr.1325, i64 3
Skipping:   %incdec.ptr38 = getelementptr inbounds i8, i8* %a.addr.1326, i64 3
Here ..
Skipping:   %incdec.ptr42 = getelementptr inbounds i32, i32* %cp.addr.1322, i64 3
Skipping:   %incdec.ptr43 = getelementptr inbounds i8, i8* %r.addr.1323, i64 4
Skipping:   %incdec.ptr45 = getelementptr inbounds i8, i8* %g.addr.1324, i64 4
Skipping:   %incdec.ptr49 = getelementptr inbounds i8, i8* %b.addr.1325, i64 4
Skipping:   %incdec.ptr53 = getelementptr inbounds i8, i8* %a.addr.1326, i64 4
Here ..
Skipping:   %incdec.ptr57 = getelementptr inbounds i32, i32* %cp.addr.1322, i64 4
Skipping:   %incdec.ptr58 = getelementptr inbounds i8, i8* %r.addr.1323, i64 5
Skipping:   %incdec.ptr60 = getelementptr inbounds i8, i8* %g.addr.1324, i64 5
Skipping:   %incdec.ptr64 = getelementptr inbounds i8, i8* %b.addr.1325, i64 5
Skipping:   %incdec.ptr68 = getelementptr inbounds i8, i8* %a.addr.1326, i64 5
Here ..
Skipping:   %incdec.ptr72 = getelementptr inbounds i32, i32* %cp.addr.1322, i64 5
Skipping:   %incdec.ptr73 = getelementptr inbounds i8, i8* %r.addr.1323, i64 6
Skipping:   %incdec.ptr75 = getelementptr inbounds i8, i8* %g.addr.1324, i64 6
Skipping:   %incdec.ptr79 = getelementptr inbounds i8, i8* %b.addr.1325, i64 6
Skipping:   %incdec.ptr83 = getelementptr inbounds i8, i8* %a.addr.1326, i64 6
Here ..
Skipping:   %incdec.ptr87 = getelementptr inbounds i32, i32* %cp.addr.1322, i64 6
Skipping:   %incdec.ptr88 = getelementptr inbounds i8, i8* %r.addr.1323, i64 7
Skipping:   %incdec.ptr90 = getelementptr inbounds i8, i8* %g.addr.1324, i64 7
Skipping:   %incdec.ptr94 = getelementptr inbounds i8, i8* %b.addr.1325, i64 7
Skipping:   %incdec.ptr98 = getelementptr inbounds i8, i8* %a.addr.1326, i64 7
Here ..
Skipping:   %incdec.ptr102 = getelementptr inbounds i32, i32* %cp.addr.1322, i64 7
Skipping:   %incdec.ptr103 = getelementptr inbounds i8, i8* %r.addr.1323, i64 8
Skipping:   %incdec.ptr105 = getelementptr inbounds i8, i8* %g.addr.1324, i64 8
Skipping:   %incdec.ptr109 = getelementptr inbounds i8, i8* %b.addr.1325, i64 8
Skipping:   %incdec.ptr113 = getelementptr inbounds i8, i8* %a.addr.1326, i64 8
Here ..
Skipping:   %incdec.ptr117 = getelementptr inbounds i32, i32* %cp.addr.1322, i64 8
Here ..
I:   %sub = add i32 %_x.0327, -8
Last:   %sub = add i32 %_x.0327, -8
Schedulable: 1
code gen 0
Gains: 123 - 23 = 100
Profitable: finishing code generation
; Function Attrs: nofree norecurse nounwind optsize uwtable
define internal void @putRGBAAseparate8bittile(%struct._TIFFRGBAImage* nocapture readnone %img, i32* nocapture %cp, i32 %x, i32 %y, i32 %w, i32 %h, i32 %fromskew, i32 %toskew, i8* nocapture readonly %r, i8* nocapture readonly %g, i8* nocapture readonly %b, i8* nocapture readonly %a) #5 {
entry:
  %cmp.not334 = icmp eq i32 %h, 0
  br i1 %cmp.not334, label %while.end, label %for.cond.preheader.lr.ph

for.cond.preheader.lr.ph:                         ; preds = %entry
  %cmp1321 = icmp ugt i32 %w, 7
  %idx.ext = sext i32 %fromskew to i64
  %idx.ext237 = sext i32 %toskew to i64
  br label %for.cond.preheader

for.cond.preheader:                               ; preds = %for.cond.preheader.lr.ph, %if.end
  %dec340.in = phi i32 [ %h, %for.cond.preheader.lr.ph ], [ %dec340, %if.end ]
  %a.addr.0339 = phi i8* [ %a, %for.cond.preheader.lr.ph ], [ %add.ptr236, %if.end ]
  %b.addr.0338 = phi i8* [ %b, %for.cond.preheader.lr.ph ], [ %add.ptr234, %if.end ]
  %g.addr.0337 = phi i8* [ %g, %for.cond.preheader.lr.ph ], [ %add.ptr232, %if.end ]
  %r.addr.0336 = phi i8* [ %r, %for.cond.preheader.lr.ph ], [ %add.ptr, %if.end ]
  %cp.addr.0335 = phi i32* [ %cp, %for.cond.preheader.lr.ph ], [ %add.ptr238, %if.end ]
  %dec340 = add i32 %dec340.in, -1
  br i1 %cmp1321, label %for.body.preheader, label %for.end

for.body.preheader:                               ; preds = %for.cond.preheader
  br label %for.body

for.body:                                         ; preds = %for.body.preheader, %for.body
  %_x.0327 = phi i32 [ %sub, %for.body ], [ %w, %for.body.preheader ]
  %a.addr.1326 = phi i8* [ %incdec.ptr113, %for.body ], [ %a.addr.0339, %for.body.preheader ]
  %b.addr.1325 = phi i8* [ %incdec.ptr109, %for.body ], [ %b.addr.0338, %for.body.preheader ]
  %g.addr.1324 = phi i8* [ %incdec.ptr105, %for.body ], [ %g.addr.0337, %for.body.preheader ]
  %r.addr.1323 = phi i8* [ %incdec.ptr103, %for.body ], [ %r.addr.0336, %for.body.preheader ]
  %cp.addr.1322 = phi i32* [ %incdec.ptr117, %for.body ], [ %cp.addr.0335, %for.body.preheader ]
  %incdec.ptr = getelementptr inbounds i8, i8* %r.addr.1323, i64 1
  %0 = load i8, i8* %r.addr.1323, align 1, !tbaa !36
  %conv = zext i8 %0 to i32
  %incdec.ptr2 = getelementptr inbounds i8, i8* %g.addr.1324, i64 1
  %1 = load i8, i8* %g.addr.1324, align 1, !tbaa !36
  %conv3 = zext i8 %1 to i32
  %shl = shl nuw nsw i32 %conv3, 8
  %or = or i32 %shl, %conv
  %incdec.ptr4 = getelementptr inbounds i8, i8* %b.addr.1325, i64 1
  %2 = load i8, i8* %b.addr.1325, align 1, !tbaa !36
  %conv5 = zext i8 %2 to i32
  %shl6 = shl nuw nsw i32 %conv5, 16
  %or7 = or i32 %or, %shl6
  %incdec.ptr8 = getelementptr inbounds i8, i8* %a.addr.1326, i64 1
  %3 = load i8, i8* %a.addr.1326, align 1, !tbaa !36
  %conv9 = zext i8 %3 to i32
  %shl10 = shl nuw i32 %conv9, 24
  %or11 = or i32 %or7, %shl10
  %incdec.ptr12 = getelementptr inbounds i32, i32* %cp.addr.1322, i64 1
  store i32 %or11, i32* %cp.addr.1322, align 4, !tbaa !38
  %incdec.ptr13 = getelementptr inbounds i8, i8* %r.addr.1323, i64 2
  %4 = load i8, i8* %incdec.ptr, align 1, !tbaa !36
  %conv14 = zext i8 %4 to i32
  %incdec.ptr15 = getelementptr inbounds i8, i8* %g.addr.1324, i64 2
  %5 = load i8, i8* %incdec.ptr2, align 1, !tbaa !36
  %conv16 = zext i8 %5 to i32
  %shl17 = shl nuw nsw i32 %conv16, 8
  %or18 = or i32 %shl17, %conv14
  %incdec.ptr19 = getelementptr inbounds i8, i8* %b.addr.1325, i64 2
  %6 = load i8, i8* %incdec.ptr4, align 1, !tbaa !36
  %conv20 = zext i8 %6 to i32
  %shl21 = shl nuw nsw i32 %conv20, 16
  %or22 = or i32 %or18, %shl21
  %incdec.ptr23 = getelementptr inbounds i8, i8* %a.addr.1326, i64 2
  %7 = load i8, i8* %incdec.ptr8, align 1, !tbaa !36
  %conv24 = zext i8 %7 to i32
  %shl25 = shl nuw i32 %conv24, 24
  %or26 = or i32 %or22, %shl25
  %incdec.ptr27 = getelementptr inbounds i32, i32* %cp.addr.1322, i64 2
  store i32 %or26, i32* %incdec.ptr12, align 4, !tbaa !38
  %incdec.ptr28 = getelementptr inbounds i8, i8* %r.addr.1323, i64 3
  %8 = load i8, i8* %incdec.ptr13, align 1, !tbaa !36
  %conv29 = zext i8 %8 to i32
  %incdec.ptr30 = getelementptr inbounds i8, i8* %g.addr.1324, i64 3
  %9 = load i8, i8* %incdec.ptr15, align 1, !tbaa !36
  %conv31 = zext i8 %9 to i32
  %shl32 = shl nuw nsw i32 %conv31, 8
  %or33 = or i32 %shl32, %conv29
  %incdec.ptr34 = getelementptr inbounds i8, i8* %b.addr.1325, i64 3
  %10 = load i8, i8* %incdec.ptr19, align 1, !tbaa !36
  %conv35 = zext i8 %10 to i32
  %shl36 = shl nuw nsw i32 %conv35, 16
  %or37 = or i32 %or33, %shl36
  %incdec.ptr38 = getelementptr inbounds i8, i8* %a.addr.1326, i64 3
  %11 = load i8, i8* %incdec.ptr23, align 1, !tbaa !36
  %conv39 = zext i8 %11 to i32
  %shl40 = shl nuw i32 %conv39, 24
  %or41 = or i32 %or37, %shl40
  %incdec.ptr42 = getelementptr inbounds i32, i32* %cp.addr.1322, i64 3
  store i32 %or41, i32* %incdec.ptr27, align 4, !tbaa !38
  %incdec.ptr43 = getelementptr inbounds i8, i8* %r.addr.1323, i64 4
  %12 = load i8, i8* %incdec.ptr28, align 1, !tbaa !36
  %conv44 = zext i8 %12 to i32
  %incdec.ptr45 = getelementptr inbounds i8, i8* %g.addr.1324, i64 4
  %13 = load i8, i8* %incdec.ptr30, align 1, !tbaa !36
  %conv46 = zext i8 %13 to i32
  %shl47 = shl nuw nsw i32 %conv46, 8
  %or48 = or i32 %shl47, %conv44
  %incdec.ptr49 = getelementptr inbounds i8, i8* %b.addr.1325, i64 4
  %14 = load i8, i8* %incdec.ptr34, align 1, !tbaa !36
  %conv50 = zext i8 %14 to i32
  %shl51 = shl nuw nsw i32 %conv50, 16
  %or52 = or i32 %or48, %shl51
  %incdec.ptr53 = getelementptr inbounds i8, i8* %a.addr.1326, i64 4
  %15 = load i8, i8* %incdec.ptr38, align 1, !tbaa !36
  %conv54 = zext i8 %15 to i32
  %shl55 = shl nuw i32 %conv54, 24
  %or56 = or i32 %or52, %shl55
  %incdec.ptr57 = getelementptr inbounds i32, i32* %cp.addr.1322, i64 4
  store i32 %or56, i32* %incdec.ptr42, align 4, !tbaa !38
  %incdec.ptr58 = getelementptr inbounds i8, i8* %r.addr.1323, i64 5
  %16 = load i8, i8* %incdec.ptr43, align 1, !tbaa !36
  %conv59 = zext i8 %16 to i32
  %incdec.ptr60 = getelementptr inbounds i8, i8* %g.addr.1324, i64 5
  %17 = load i8, i8* %incdec.ptr45, align 1, !tbaa !36
  %conv61 = zext i8 %17 to i32
  %shl62 = shl nuw nsw i32 %conv61, 8
  %or63 = or i32 %shl62, %conv59
  %incdec.ptr64 = getelementptr inbounds i8, i8* %b.addr.1325, i64 5
  %18 = load i8, i8* %incdec.ptr49, align 1, !tbaa !36
  %conv65 = zext i8 %18 to i32
  %shl66 = shl nuw nsw i32 %conv65, 16
  %or67 = or i32 %or63, %shl66
  %incdec.ptr68 = getelementptr inbounds i8, i8* %a.addr.1326, i64 5
  %19 = load i8, i8* %incdec.ptr53, align 1, !tbaa !36
  %conv69 = zext i8 %19 to i32
  %shl70 = shl nuw i32 %conv69, 24
  %or71 = or i32 %or67, %shl70
  %incdec.ptr72 = getelementptr inbounds i32, i32* %cp.addr.1322, i64 5
  store i32 %or71, i32* %incdec.ptr57, align 4, !tbaa !38
  %incdec.ptr73 = getelementptr inbounds i8, i8* %r.addr.1323, i64 6
  %20 = load i8, i8* %incdec.ptr58, align 1, !tbaa !36
  %conv74 = zext i8 %20 to i32
  %incdec.ptr75 = getelementptr inbounds i8, i8* %g.addr.1324, i64 6
  %21 = load i8, i8* %incdec.ptr60, align 1, !tbaa !36
  %conv76 = zext i8 %21 to i32
  %shl77 = shl nuw nsw i32 %conv76, 8
  %or78 = or i32 %shl77, %conv74
  %incdec.ptr79 = getelementptr inbounds i8, i8* %b.addr.1325, i64 6
  %22 = load i8, i8* %incdec.ptr64, align 1, !tbaa !36
  %conv80 = zext i8 %22 to i32
  %shl81 = shl nuw nsw i32 %conv80, 16
  %or82 = or i32 %or78, %shl81
  %incdec.ptr83 = getelementptr inbounds i8, i8* %a.addr.1326, i64 6
  %23 = load i8, i8* %incdec.ptr68, align 1, !tbaa !36
  %conv84 = zext i8 %23 to i32
  %shl85 = shl nuw i32 %conv84, 24
  %or86 = or i32 %or82, %shl85
  %incdec.ptr87 = getelementptr inbounds i32, i32* %cp.addr.1322, i64 6
  store i32 %or86, i32* %incdec.ptr72, align 4, !tbaa !38
  %incdec.ptr88 = getelementptr inbounds i8, i8* %r.addr.1323, i64 7
  %24 = load i8, i8* %incdec.ptr73, align 1, !tbaa !36
  %conv89 = zext i8 %24 to i32
  %incdec.ptr90 = getelementptr inbounds i8, i8* %g.addr.1324, i64 7
  %25 = load i8, i8* %incdec.ptr75, align 1, !tbaa !36
  %conv91 = zext i8 %25 to i32
  %shl92 = shl nuw nsw i32 %conv91, 8
  %or93 = or i32 %shl92, %conv89
  %incdec.ptr94 = getelementptr inbounds i8, i8* %b.addr.1325, i64 7
  %26 = load i8, i8* %incdec.ptr79, align 1, !tbaa !36
  %conv95 = zext i8 %26 to i32
  %shl96 = shl nuw nsw i32 %conv95, 16
  %or97 = or i32 %or93, %shl96
  %incdec.ptr98 = getelementptr inbounds i8, i8* %a.addr.1326, i64 7
  %27 = load i8, i8* %incdec.ptr83, align 1, !tbaa !36
  %conv99 = zext i8 %27 to i32
  %shl100 = shl nuw i32 %conv99, 24
  %or101 = or i32 %or97, %shl100
  %incdec.ptr102 = getelementptr inbounds i32, i32* %cp.addr.1322, i64 7
  store i32 %or101, i32* %incdec.ptr87, align 4, !tbaa !38
  %incdec.ptr103 = getelementptr inbounds i8, i8* %r.addr.1323, i64 8
  %28 = load i8, i8* %incdec.ptr88, align 1, !tbaa !36
  %conv104 = zext i8 %28 to i32
  %incdec.ptr105 = getelementptr inbounds i8, i8* %g.addr.1324, i64 8
  %29 = load i8, i8* %incdec.ptr90, align 1, !tbaa !36
  %conv106 = zext i8 %29 to i32
  %shl107 = shl nuw nsw i32 %conv106, 8
  %or108 = or i32 %shl107, %conv104
  %incdec.ptr109 = getelementptr inbounds i8, i8* %b.addr.1325, i64 8
  %30 = load i8, i8* %incdec.ptr94, align 1, !tbaa !36
  %conv110 = zext i8 %30 to i32
  %shl111 = shl nuw nsw i32 %conv110, 16
  %or112 = or i32 %or108, %shl111
  %incdec.ptr113 = getelementptr inbounds i8, i8* %a.addr.1326, i64 8
  %31 = load i8, i8* %incdec.ptr98, align 1, !tbaa !36
  %conv114 = zext i8 %31 to i32
  %shl115 = shl nuw i32 %conv114, 24
  %or116 = or i32 %or112, %shl115
  %incdec.ptr117 = getelementptr inbounds i32, i32* %cp.addr.1322, i64 8
  store i32 %or116, i32* %incdec.ptr102, align 4, !tbaa !38
  %sub = add i32 %_x.0327, -8
  %cmp1 = icmp ugt i32 %sub, 7
  br i1 %cmp1, label %for.body, label %for.end.loopexit, !llvm.loop !111

for.end.loopexit:                                 ; preds = %for.body
  %incdec.ptr103.lcssa = phi i8* [ %incdec.ptr103, %for.body ]
  %incdec.ptr105.lcssa = phi i8* [ %incdec.ptr105, %for.body ]
  %incdec.ptr109.lcssa = phi i8* [ %incdec.ptr109, %for.body ]
  %incdec.ptr113.lcssa = phi i8* [ %incdec.ptr113, %for.body ]
  %incdec.ptr117.lcssa = phi i32* [ %incdec.ptr117, %for.body ]
  %sub.lcssa = phi i32 [ %sub, %for.body ]
  br label %for.end

for.end:                                          ; preds = %for.end.loopexit, %for.cond.preheader
  %cp.addr.1.lcssa = phi i32* [ %cp.addr.0335, %for.cond.preheader ], [ %incdec.ptr117.lcssa, %for.end.loopexit ]
  %r.addr.1.lcssa = phi i8* [ %r.addr.0336, %for.cond.preheader ], [ %incdec.ptr103.lcssa, %for.end.loopexit ]
  %g.addr.1.lcssa = phi i8* [ %g.addr.0337, %for.cond.preheader ], [ %incdec.ptr105.lcssa, %for.end.loopexit ]
  %b.addr.1.lcssa = phi i8* [ %b.addr.0338, %for.cond.preheader ], [ %incdec.ptr109.lcssa, %for.end.loopexit ]
  %a.addr.1.lcssa = phi i8* [ %a.addr.0339, %for.cond.preheader ], [ %incdec.ptr113.lcssa, %for.end.loopexit ]
  %_x.0.lcssa = phi i32 [ %w, %for.cond.preheader ], [ %sub.lcssa, %for.end.loopexit ]
  switch i32 %_x.0.lcssa, label %if.end [
    i32 1, label %sw.bb215
    i32 7, label %sw.bb
    i32 6, label %sw.bb135
    i32 5, label %sw.bb151
    i32 4, label %sw.bb167
    i32 3, label %sw.bb183
    i32 2, label %sw.bb199
  ]

sw.bb:                                            ; preds = %for.end
  %incdec.ptr120 = getelementptr inbounds i8, i8* %r.addr.1.lcssa, i64 1
  %32 = load i8, i8* %r.addr.1.lcssa, align 1, !tbaa !36
  %conv121 = zext i8 %32 to i32
  %incdec.ptr122 = getelementptr inbounds i8, i8* %g.addr.1.lcssa, i64 1
  %33 = load i8, i8* %g.addr.1.lcssa, align 1, !tbaa !36
  %conv123 = zext i8 %33 to i32
  %shl124 = shl nuw nsw i32 %conv123, 8
  %or125 = or i32 %shl124, %conv121
  %incdec.ptr126 = getelementptr inbounds i8, i8* %b.addr.1.lcssa, i64 1
  %34 = load i8, i8* %b.addr.1.lcssa, align 1, !tbaa !36
  %conv127 = zext i8 %34 to i32
  %shl128 = shl nuw nsw i32 %conv127, 16
  %or129 = or i32 %or125, %shl128
  %incdec.ptr130 = getelementptr inbounds i8, i8* %a.addr.1.lcssa, i64 1
  %35 = load i8, i8* %a.addr.1.lcssa, align 1, !tbaa !36
  %conv131 = zext i8 %35 to i32
  %shl132 = shl nuw i32 %conv131, 24
  %or133 = or i32 %or129, %shl132
  %incdec.ptr134 = getelementptr inbounds i32, i32* %cp.addr.1.lcssa, i64 1
  store i32 %or133, i32* %cp.addr.1.lcssa, align 4, !tbaa !38
  br label %sw.bb135

sw.bb135:                                         ; preds = %for.end, %sw.bb
  %cp.addr.2 = phi i32* [ %incdec.ptr134, %sw.bb ], [ %cp.addr.1.lcssa, %for.end ]
  %r.addr.2 = phi i8* [ %incdec.ptr120, %sw.bb ], [ %r.addr.1.lcssa, %for.end ]
  %g.addr.2 = phi i8* [ %incdec.ptr122, %sw.bb ], [ %g.addr.1.lcssa, %for.end ]
  %b.addr.2 = phi i8* [ %incdec.ptr126, %sw.bb ], [ %b.addr.1.lcssa, %for.end ]
  %a.addr.2 = phi i8* [ %incdec.ptr130, %sw.bb ], [ %a.addr.1.lcssa, %for.end ]
  %incdec.ptr136 = getelementptr inbounds i8, i8* %r.addr.2, i64 1
  %36 = load i8, i8* %r.addr.2, align 1, !tbaa !36
  %conv137 = zext i8 %36 to i32
  %incdec.ptr138 = getelementptr inbounds i8, i8* %g.addr.2, i64 1
  %37 = load i8, i8* %g.addr.2, align 1, !tbaa !36
  %conv139 = zext i8 %37 to i32
  %shl140 = shl nuw nsw i32 %conv139, 8
  %or141 = or i32 %shl140, %conv137
  %incdec.ptr142 = getelementptr inbounds i8, i8* %b.addr.2, i64 1
  %38 = load i8, i8* %b.addr.2, align 1, !tbaa !36
  %conv143 = zext i8 %38 to i32
  %shl144 = shl nuw nsw i32 %conv143, 16
  %or145 = or i32 %or141, %shl144
  %incdec.ptr146 = getelementptr inbounds i8, i8* %a.addr.2, i64 1
  %39 = load i8, i8* %a.addr.2, align 1, !tbaa !36
  %conv147 = zext i8 %39 to i32
  %shl148 = shl nuw i32 %conv147, 24
  %or149 = or i32 %or145, %shl148
  %incdec.ptr150 = getelementptr inbounds i32, i32* %cp.addr.2, i64 1
  store i32 %or149, i32* %cp.addr.2, align 4, !tbaa !38
  br label %sw.bb151

sw.bb151:                                         ; preds = %for.end, %sw.bb135
  %cp.addr.3 = phi i32* [ %incdec.ptr150, %sw.bb135 ], [ %cp.addr.1.lcssa, %for.end ]
  %r.addr.3 = phi i8* [ %incdec.ptr136, %sw.bb135 ], [ %r.addr.1.lcssa, %for.end ]
  %g.addr.3 = phi i8* [ %incdec.ptr138, %sw.bb135 ], [ %g.addr.1.lcssa, %for.end ]
  %b.addr.3 = phi i8* [ %incdec.ptr142, %sw.bb135 ], [ %b.addr.1.lcssa, %for.end ]
  %a.addr.3 = phi i8* [ %incdec.ptr146, %sw.bb135 ], [ %a.addr.1.lcssa, %for.end ]
  %incdec.ptr152 = getelementptr inbounds i8, i8* %r.addr.3, i64 1
  %40 = load i8, i8* %r.addr.3, align 1, !tbaa !36
  %conv153 = zext i8 %40 to i32
  %incdec.ptr154 = getelementptr inbounds i8, i8* %g.addr.3, i64 1
  %41 = load i8, i8* %g.addr.3, align 1, !tbaa !36
  %conv155 = zext i8 %41 to i32
  %shl156 = shl nuw nsw i32 %conv155, 8
  %or157 = or i32 %shl156, %conv153
  %incdec.ptr158 = getelementptr inbounds i8, i8* %b.addr.3, i64 1
  %42 = load i8, i8* %b.addr.3, align 1, !tbaa !36
  %conv159 = zext i8 %42 to i32
  %shl160 = shl nuw nsw i32 %conv159, 16
  %or161 = or i32 %or157, %shl160
  %incdec.ptr162 = getelementptr inbounds i8, i8* %a.addr.3, i64 1
  %43 = load i8, i8* %a.addr.3, align 1, !tbaa !36
  %conv163 = zext i8 %43 to i32
  %shl164 = shl nuw i32 %conv163, 24
  %or165 = or i32 %or161, %shl164
  %incdec.ptr166 = getelementptr inbounds i32, i32* %cp.addr.3, i64 1
  store i32 %or165, i32* %cp.addr.3, align 4, !tbaa !38
  br label %sw.bb167

sw.bb167:                                         ; preds = %for.end, %sw.bb151
  %cp.addr.4 = phi i32* [ %incdec.ptr166, %sw.bb151 ], [ %cp.addr.1.lcssa, %for.end ]
  %r.addr.4 = phi i8* [ %incdec.ptr152, %sw.bb151 ], [ %r.addr.1.lcssa, %for.end ]
  %g.addr.4 = phi i8* [ %incdec.ptr154, %sw.bb151 ], [ %g.addr.1.lcssa, %for.end ]
  %b.addr.4 = phi i8* [ %incdec.ptr158, %sw.bb151 ], [ %b.addr.1.lcssa, %for.end ]
  %a.addr.4 = phi i8* [ %incdec.ptr162, %sw.bb151 ], [ %a.addr.1.lcssa, %for.end ]
  %incdec.ptr168 = getelementptr inbounds i8, i8* %r.addr.4, i64 1
  %44 = load i8, i8* %r.addr.4, align 1, !tbaa !36
  %conv169 = zext i8 %44 to i32
  %incdec.ptr170 = getelementptr inbounds i8, i8* %g.addr.4, i64 1
  %45 = load i8, i8* %g.addr.4, align 1, !tbaa !36
  %conv171 = zext i8 %45 to i32
  %shl172 = shl nuw nsw i32 %conv171, 8
  %or173 = or i32 %shl172, %conv169
  %incdec.ptr174 = getelementptr inbounds i8, i8* %b.addr.4, i64 1
  %46 = load i8, i8* %b.addr.4, align 1, !tbaa !36
  %conv175 = zext i8 %46 to i32
  %shl176 = shl nuw nsw i32 %conv175, 16
  %or177 = or i32 %or173, %shl176
  %incdec.ptr178 = getelementptr inbounds i8, i8* %a.addr.4, i64 1
  %47 = load i8, i8* %a.addr.4, align 1, !tbaa !36
  %conv179 = zext i8 %47 to i32
  %shl180 = shl nuw i32 %conv179, 24
  %or181 = or i32 %or177, %shl180
  %incdec.ptr182 = getelementptr inbounds i32, i32* %cp.addr.4, i64 1
  store i32 %or181, i32* %cp.addr.4, align 4, !tbaa !38
  br label %sw.bb183

sw.bb183:                                         ; preds = %for.end, %sw.bb167
  %cp.addr.5 = phi i32* [ %incdec.ptr182, %sw.bb167 ], [ %cp.addr.1.lcssa, %for.end ]
  %r.addr.5 = phi i8* [ %incdec.ptr168, %sw.bb167 ], [ %r.addr.1.lcssa, %for.end ]
  %g.addr.5 = phi i8* [ %incdec.ptr170, %sw.bb167 ], [ %g.addr.1.lcssa, %for.end ]
  %b.addr.5 = phi i8* [ %incdec.ptr174, %sw.bb167 ], [ %b.addr.1.lcssa, %for.end ]
  %a.addr.5 = phi i8* [ %incdec.ptr178, %sw.bb167 ], [ %a.addr.1.lcssa, %for.end ]
  %incdec.ptr184 = getelementptr inbounds i8, i8* %r.addr.5, i64 1
  %48 = load i8, i8* %r.addr.5, align 1, !tbaa !36
  %conv185 = zext i8 %48 to i32
  %incdec.ptr186 = getelementptr inbounds i8, i8* %g.addr.5, i64 1
  %49 = load i8, i8* %g.addr.5, align 1, !tbaa !36
  %conv187 = zext i8 %49 to i32
  %shl188 = shl nuw nsw i32 %conv187, 8
  %or189 = or i32 %shl188, %conv185
  %incdec.ptr190 = getelementptr inbounds i8, i8* %b.addr.5, i64 1
  %50 = load i8, i8* %b.addr.5, align 1, !tbaa !36
  %conv191 = zext i8 %50 to i32
  %shl192 = shl nuw nsw i32 %conv191, 16
  %or193 = or i32 %or189, %shl192
  %incdec.ptr194 = getelementptr inbounds i8, i8* %a.addr.5, i64 1
  %51 = load i8, i8* %a.addr.5, align 1, !tbaa !36
  %conv195 = zext i8 %51 to i32
  %shl196 = shl nuw i32 %conv195, 24
  %or197 = or i32 %or193, %shl196
  %incdec.ptr198 = getelementptr inbounds i32, i32* %cp.addr.5, i64 1
  store i32 %or197, i32* %cp.addr.5, align 4, !tbaa !38
  br label %sw.bb199

sw.bb199:                                         ; preds = %for.end, %sw.bb183
  %cp.addr.6 = phi i32* [ %incdec.ptr198, %sw.bb183 ], [ %cp.addr.1.lcssa, %for.end ]
  %r.addr.6 = phi i8* [ %incdec.ptr184, %sw.bb183 ], [ %r.addr.1.lcssa, %for.end ]
  %g.addr.6 = phi i8* [ %incdec.ptr186, %sw.bb183 ], [ %g.addr.1.lcssa, %for.end ]
  %b.addr.6 = phi i8* [ %incdec.ptr190, %sw.bb183 ], [ %b.addr.1.lcssa, %for.end ]
  %a.addr.6 = phi i8* [ %incdec.ptr194, %sw.bb183 ], [ %a.addr.1.lcssa, %for.end ]
  %incdec.ptr200 = getelementptr inbounds i8, i8* %r.addr.6, i64 1
  %52 = load i8, i8* %r.addr.6, align 1, !tbaa !36
  %conv201 = zext i8 %52 to i32
  %incdec.ptr202 = getelementptr inbounds i8, i8* %g.addr.6, i64 1
  %53 = load i8, i8* %g.addr.6, align 1, !tbaa !36
  %conv203 = zext i8 %53 to i32
  %shl204 = shl nuw nsw i32 %conv203, 8
  %or205 = or i32 %shl204, %conv201
  %incdec.ptr206 = getelementptr inbounds i8, i8* %b.addr.6, i64 1
  %54 = load i8, i8* %b.addr.6, align 1, !tbaa !36
  %conv207 = zext i8 %54 to i32
  %shl208 = shl nuw nsw i32 %conv207, 16
  %or209 = or i32 %or205, %shl208
  %incdec.ptr210 = getelementptr inbounds i8, i8* %a.addr.6, i64 1
  %55 = load i8, i8* %a.addr.6, align 1, !tbaa !36
  %conv211 = zext i8 %55 to i32
  %shl212 = shl nuw i32 %conv211, 24
  %or213 = or i32 %or209, %shl212
  %incdec.ptr214 = getelementptr inbounds i32, i32* %cp.addr.6, i64 1
  store i32 %or213, i32* %cp.addr.6, align 4, !tbaa !38
  br label %sw.bb215

sw.bb215:                                         ; preds = %for.end, %sw.bb199
  %cp.addr.7 = phi i32* [ %incdec.ptr214, %sw.bb199 ], [ %cp.addr.1.lcssa, %for.end ]
  %r.addr.7 = phi i8* [ %incdec.ptr200, %sw.bb199 ], [ %r.addr.1.lcssa, %for.end ]
  %g.addr.7 = phi i8* [ %incdec.ptr202, %sw.bb199 ], [ %g.addr.1.lcssa, %for.end ]
  %b.addr.7 = phi i8* [ %incdec.ptr206, %sw.bb199 ], [ %b.addr.1.lcssa, %for.end ]
  %a.addr.7 = phi i8* [ %incdec.ptr210, %sw.bb199 ], [ %a.addr.1.lcssa, %for.end ]
  %incdec.ptr216 = getelementptr inbounds i8, i8* %r.addr.7, i64 1
  %56 = load i8, i8* %r.addr.7, align 1, !tbaa !36
  %conv217 = zext i8 %56 to i32
  %incdec.ptr218 = getelementptr inbounds i8, i8* %g.addr.7, i64 1
  %57 = load i8, i8* %g.addr.7, align 1, !tbaa !36
  %conv219 = zext i8 %57 to i32
  %shl220 = shl nuw nsw i32 %conv219, 8
  %or221 = or i32 %shl220, %conv217
  %incdec.ptr222 = getelementptr inbounds i8, i8* %b.addr.7, i64 1
  %58 = load i8, i8* %b.addr.7, align 1, !tbaa !36
  %conv223 = zext i8 %58 to i32
  %shl224 = shl nuw nsw i32 %conv223, 16
  %or225 = or i32 %or221, %shl224
  %incdec.ptr226 = getelementptr inbounds i8, i8* %a.addr.7, i64 1
  %59 = load i8, i8* %a.addr.7, align 1, !tbaa !36
  %conv227 = zext i8 %59 to i32
  %shl228 = shl nuw i32 %conv227, 24
  %or229 = or i32 %or225, %shl228
  %incdec.ptr230 = getelementptr inbounds i32, i32* %cp.addr.7, i64 1
  store i32 %or229, i32* %cp.addr.7, align 4, !tbaa !38
  br label %if.end

if.end:                                           ; preds = %for.end, %sw.bb215
  %cp.addr.8 = phi i32* [ %incdec.ptr230, %sw.bb215 ], [ %cp.addr.1.lcssa, %for.end ]
  %r.addr.8 = phi i8* [ %incdec.ptr216, %sw.bb215 ], [ %r.addr.1.lcssa, %for.end ]
  %g.addr.8 = phi i8* [ %incdec.ptr218, %sw.bb215 ], [ %g.addr.1.lcssa, %for.end ]
  %b.addr.8 = phi i8* [ %incdec.ptr222, %sw.bb215 ], [ %b.addr.1.lcssa, %for.end ]
  %a.addr.8 = phi i8* [ %incdec.ptr226, %sw.bb215 ], [ %a.addr.1.lcssa, %for.end ]
  %add.ptr = getelementptr inbounds i8, i8* %r.addr.8, i64 %idx.ext
  %add.ptr232 = getelementptr inbounds i8, i8* %g.addr.8, i64 %idx.ext
  %add.ptr234 = getelementptr inbounds i8, i8* %b.addr.8, i64 %idx.ext
  %add.ptr236 = getelementptr inbounds i8, i8* %a.addr.8, i64 %idx.ext
  %add.ptr238 = getelementptr inbounds i32, i32* %cp.addr.8, i64 %idx.ext237
  %cmp.not = icmp eq i32 %dec340, 0
  br i1 %cmp.not, label %while.end.loopexit, label %for.cond.preheader, !llvm.loop !112

while.end.loopexit:                               ; preds = %if.end
  br label %while.end

while.end:                                        ; preds = %while.end.loopexit, %entry
  ret void

rolled.pre:                                       ; No predecessors!

rolled.loop:                                      ; No predecessors!
  %60 = phi i8 
  %61 = zext i8 %60 to i64
  %62 = add i64 %61, 1
  %63 = getelementptr i8, i8* %g.addr.1324, i64 %62
  %64 = load i8, i8* %63, align 1
  %65 = zext i8 %64 to i32
  %66 = shl nuw nsw i32 %65, 8
  %67 = zext i8 %60 to i64
  %68 = add i64 %67, 1
  %69 = getelementptr i8, i8* %r.addr.1323, i64 %68
  %70 = load i8, i8* %69, align 1
  %71 = zext i8 %70 to i32
  %72 = or i32 %66, %71
  %73 = zext i8 %60 to i64
  %74 = add i64 %73, 1
  %75 = getelementptr i8, i8* %b.addr.1325, i64 %74
  %76 = load i8, i8* %75, align 1
  %77 = zext i8 %76 to i32
  %78 = shl nuw nsw i32 %77, 16
  %79 = or i32 %72, %78
  %80 = zext i8 %60 to i64
  %81 = add i64 %80, 1
  %82 = getelementptr i8, i8* %a.addr.1326, i64 %81
  %83 = load i8, i8* %82, align 1
  %84 = zext i8 %83 to i32
  %85 = shl nuw i32 %84, 24
  %86 = or i32 %79, %85
  %87 = zext i8 %60 to i64
  %88 = add i64 %87, 1
  %89 = getelementptr i32, i32* %cp.addr.1322, i64 %88
  store i32 %86, i32* %89, align 4
  %90 = add i8 %60, 1
  %91 = icmp ne i8 %90, 8

rolled.exit:                                      ; No predecessors!
}

Done!
; Function Attrs: nofree norecurse nounwind optsize uwtable
define internal void @putRGBAAseparate8bittile(%struct._TIFFRGBAImage* nocapture readnone %img, i32* nocapture %cp, i32 %x, i32 %y, i32 %w, i32 %h, i32 %fromskew, i32 %toskew, i8* nocapture readonly %r, i8* nocapture readonly %g, i8* nocapture readonly %b, i8* nocapture readonly %a) #5 {
entry:
  %cmp.not334 = icmp eq i32 %h, 0
  br i1 %cmp.not334, label %while.end, label %for.cond.preheader.lr.ph

for.cond.preheader.lr.ph:                         ; preds = %entry
  %cmp1321 = icmp ugt i32 %w, 7
  %idx.ext = sext i32 %fromskew to i64
  %idx.ext237 = sext i32 %toskew to i64
  br label %for.cond.preheader

for.cond.preheader:                               ; preds = %for.cond.preheader.lr.ph, %if.end
  %dec340.in = phi i32 [ %h, %for.cond.preheader.lr.ph ], [ %dec340, %if.end ]
  %a.addr.0339 = phi i8* [ %a, %for.cond.preheader.lr.ph ], [ %add.ptr236, %if.end ]
  %b.addr.0338 = phi i8* [ %b, %for.cond.preheader.lr.ph ], [ %add.ptr234, %if.end ]
  %g.addr.0337 = phi i8* [ %g, %for.cond.preheader.lr.ph ], [ %add.ptr232, %if.end ]
  %r.addr.0336 = phi i8* [ %r, %for.cond.preheader.lr.ph ], [ %add.ptr, %if.end ]
  %cp.addr.0335 = phi i32* [ %cp, %for.cond.preheader.lr.ph ], [ %add.ptr238, %if.end ]
  %dec340 = add i32 %dec340.in, -1
  br i1 %cmp1321, label %for.body.preheader, label %for.end

for.body.preheader:                               ; preds = %for.cond.preheader
  br label %for.body

for.body:                                         ; preds = %for.body.preheader, %rolled.exit
  %_x.0327 = phi i32 [ %60, %rolled.exit ], [ %w, %for.body.preheader ]
  %a.addr.1326 = phi i8* [ %incdec.ptr113, %rolled.exit ], [ %a.addr.0339, %for.body.preheader ]
  %b.addr.1325 = phi i8* [ %incdec.ptr109, %rolled.exit ], [ %b.addr.0338, %for.body.preheader ]
  %g.addr.1324 = phi i8* [ %incdec.ptr105, %rolled.exit ], [ %g.addr.0337, %for.body.preheader ]
  %r.addr.1323 = phi i8* [ %incdec.ptr103, %rolled.exit ], [ %r.addr.0336, %for.body.preheader ]
  %cp.addr.1322 = phi i32* [ %incdec.ptr117, %rolled.exit ], [ %cp.addr.0335, %for.body.preheader ]
  %incdec.ptr103 = getelementptr inbounds i8, i8* %r.addr.1323, i64 8
  %incdec.ptr105 = getelementptr inbounds i8, i8* %g.addr.1324, i64 8
  %incdec.ptr109 = getelementptr inbounds i8, i8* %b.addr.1325, i64 8
  %incdec.ptr113 = getelementptr inbounds i8, i8* %a.addr.1326, i64 8
  %incdec.ptr117 = getelementptr inbounds i32, i32* %cp.addr.1322, i64 8
  br label %rolled.pre

for.end.loopexit:                                 ; preds = %rolled.exit
  %incdec.ptr103.lcssa = phi i8* [ %incdec.ptr103, %rolled.exit ]
  %incdec.ptr105.lcssa = phi i8* [ %incdec.ptr105, %rolled.exit ]
  %incdec.ptr109.lcssa = phi i8* [ %incdec.ptr109, %rolled.exit ]
  %incdec.ptr113.lcssa = phi i8* [ %incdec.ptr113, %rolled.exit ]
  %incdec.ptr117.lcssa = phi i32* [ %incdec.ptr117, %rolled.exit ]
  %sub.lcssa = phi i32 [ %60, %rolled.exit ]
  br label %for.end

for.end:                                          ; preds = %for.end.loopexit, %for.cond.preheader
  %cp.addr.1.lcssa = phi i32* [ %cp.addr.0335, %for.cond.preheader ], [ %incdec.ptr117.lcssa, %for.end.loopexit ]
  %r.addr.1.lcssa = phi i8* [ %r.addr.0336, %for.cond.preheader ], [ %incdec.ptr103.lcssa, %for.end.loopexit ]
  %g.addr.1.lcssa = phi i8* [ %g.addr.0337, %for.cond.preheader ], [ %incdec.ptr105.lcssa, %for.end.loopexit ]
  %b.addr.1.lcssa = phi i8* [ %b.addr.0338, %for.cond.preheader ], [ %incdec.ptr109.lcssa, %for.end.loopexit ]
  %a.addr.1.lcssa = phi i8* [ %a.addr.0339, %for.cond.preheader ], [ %incdec.ptr113.lcssa, %for.end.loopexit ]
  %_x.0.lcssa = phi i32 [ %w, %for.cond.preheader ], [ %sub.lcssa, %for.end.loopexit ]
  switch i32 %_x.0.lcssa, label %if.end [
    i32 1, label %sw.bb215
    i32 7, label %sw.bb
    i32 6, label %sw.bb135
    i32 5, label %sw.bb151
    i32 4, label %sw.bb167
    i32 3, label %sw.bb183
    i32 2, label %sw.bb199
  ]

sw.bb:                                            ; preds = %for.end
  %incdec.ptr120 = getelementptr inbounds i8, i8* %r.addr.1.lcssa, i64 1
  %0 = load i8, i8* %r.addr.1.lcssa, align 1, !tbaa !36
  %conv121 = zext i8 %0 to i32
  %incdec.ptr122 = getelementptr inbounds i8, i8* %g.addr.1.lcssa, i64 1
  %1 = load i8, i8* %g.addr.1.lcssa, align 1, !tbaa !36
  %conv123 = zext i8 %1 to i32
  %shl124 = shl nuw nsw i32 %conv123, 8
  %or125 = or i32 %shl124, %conv121
  %incdec.ptr126 = getelementptr inbounds i8, i8* %b.addr.1.lcssa, i64 1
  %2 = load i8, i8* %b.addr.1.lcssa, align 1, !tbaa !36
  %conv127 = zext i8 %2 to i32
  %shl128 = shl nuw nsw i32 %conv127, 16
  %or129 = or i32 %or125, %shl128
  %incdec.ptr130 = getelementptr inbounds i8, i8* %a.addr.1.lcssa, i64 1
  %3 = load i8, i8* %a.addr.1.lcssa, align 1, !tbaa !36
  %conv131 = zext i8 %3 to i32
  %shl132 = shl nuw i32 %conv131, 24
  %or133 = or i32 %or129, %shl132
  %incdec.ptr134 = getelementptr inbounds i32, i32* %cp.addr.1.lcssa, i64 1
  store i32 %or133, i32* %cp.addr.1.lcssa, align 4, !tbaa !38
  br label %sw.bb135

sw.bb135:                                         ; preds = %for.end, %sw.bb
  %cp.addr.2 = phi i32* [ %incdec.ptr134, %sw.bb ], [ %cp.addr.1.lcssa, %for.end ]
  %r.addr.2 = phi i8* [ %incdec.ptr120, %sw.bb ], [ %r.addr.1.lcssa, %for.end ]
  %g.addr.2 = phi i8* [ %incdec.ptr122, %sw.bb ], [ %g.addr.1.lcssa, %for.end ]
  %b.addr.2 = phi i8* [ %incdec.ptr126, %sw.bb ], [ %b.addr.1.lcssa, %for.end ]
  %a.addr.2 = phi i8* [ %incdec.ptr130, %sw.bb ], [ %a.addr.1.lcssa, %for.end ]
  %incdec.ptr136 = getelementptr inbounds i8, i8* %r.addr.2, i64 1
  %4 = load i8, i8* %r.addr.2, align 1, !tbaa !36
  %conv137 = zext i8 %4 to i32
  %incdec.ptr138 = getelementptr inbounds i8, i8* %g.addr.2, i64 1
  %5 = load i8, i8* %g.addr.2, align 1, !tbaa !36
  %conv139 = zext i8 %5 to i32
  %shl140 = shl nuw nsw i32 %conv139, 8
  %or141 = or i32 %shl140, %conv137
  %incdec.ptr142 = getelementptr inbounds i8, i8* %b.addr.2, i64 1
  %6 = load i8, i8* %b.addr.2, align 1, !tbaa !36
  %conv143 = zext i8 %6 to i32
  %shl144 = shl nuw nsw i32 %conv143, 16
  %or145 = or i32 %or141, %shl144
  %incdec.ptr146 = getelementptr inbounds i8, i8* %a.addr.2, i64 1
  %7 = load i8, i8* %a.addr.2, align 1, !tbaa !36
  %conv147 = zext i8 %7 to i32
  %shl148 = shl nuw i32 %conv147, 24
  %or149 = or i32 %or145, %shl148
  %incdec.ptr150 = getelementptr inbounds i32, i32* %cp.addr.2, i64 1
  store i32 %or149, i32* %cp.addr.2, align 4, !tbaa !38
  br label %sw.bb151

sw.bb151:                                         ; preds = %for.end, %sw.bb135
  %cp.addr.3 = phi i32* [ %incdec.ptr150, %sw.bb135 ], [ %cp.addr.1.lcssa, %for.end ]
  %r.addr.3 = phi i8* [ %incdec.ptr136, %sw.bb135 ], [ %r.addr.1.lcssa, %for.end ]
  %g.addr.3 = phi i8* [ %incdec.ptr138, %sw.bb135 ], [ %g.addr.1.lcssa, %for.end ]
  %b.addr.3 = phi i8* [ %incdec.ptr142, %sw.bb135 ], [ %b.addr.1.lcssa, %for.end ]
  %a.addr.3 = phi i8* [ %incdec.ptr146, %sw.bb135 ], [ %a.addr.1.lcssa, %for.end ]
  %incdec.ptr152 = getelementptr inbounds i8, i8* %r.addr.3, i64 1
  %8 = load i8, i8* %r.addr.3, align 1, !tbaa !36
  %conv153 = zext i8 %8 to i32
  %incdec.ptr154 = getelementptr inbounds i8, i8* %g.addr.3, i64 1
  %9 = load i8, i8* %g.addr.3, align 1, !tbaa !36
  %conv155 = zext i8 %9 to i32
  %shl156 = shl nuw nsw i32 %conv155, 8
  %or157 = or i32 %shl156, %conv153
  %incdec.ptr158 = getelementptr inbounds i8, i8* %b.addr.3, i64 1
  %10 = load i8, i8* %b.addr.3, align 1, !tbaa !36
  %conv159 = zext i8 %10 to i32
  %shl160 = shl nuw nsw i32 %conv159, 16
  %or161 = or i32 %or157, %shl160
  %incdec.ptr162 = getelementptr inbounds i8, i8* %a.addr.3, i64 1
  %11 = load i8, i8* %a.addr.3, align 1, !tbaa !36
  %conv163 = zext i8 %11 to i32
  %shl164 = shl nuw i32 %conv163, 24
  %or165 = or i32 %or161, %shl164
  %incdec.ptr166 = getelementptr inbounds i32, i32* %cp.addr.3, i64 1
  store i32 %or165, i32* %cp.addr.3, align 4, !tbaa !38
  br label %sw.bb167

sw.bb167:                                         ; preds = %for.end, %sw.bb151
  %cp.addr.4 = phi i32* [ %incdec.ptr166, %sw.bb151 ], [ %cp.addr.1.lcssa, %for.end ]
  %r.addr.4 = phi i8* [ %incdec.ptr152, %sw.bb151 ], [ %r.addr.1.lcssa, %for.end ]
  %g.addr.4 = phi i8* [ %incdec.ptr154, %sw.bb151 ], [ %g.addr.1.lcssa, %for.end ]
  %b.addr.4 = phi i8* [ %incdec.ptr158, %sw.bb151 ], [ %b.addr.1.lcssa, %for.end ]
  %a.addr.4 = phi i8* [ %incdec.ptr162, %sw.bb151 ], [ %a.addr.1.lcssa, %for.end ]
  %incdec.ptr168 = getelementptr inbounds i8, i8* %r.addr.4, i64 1
  %12 = load i8, i8* %r.addr.4, align 1, !tbaa !36
  %conv169 = zext i8 %12 to i32
  %incdec.ptr170 = getelementptr inbounds i8, i8* %g.addr.4, i64 1
  %13 = load i8, i8* %g.addr.4, align 1, !tbaa !36
  %conv171 = zext i8 %13 to i32
  %shl172 = shl nuw nsw i32 %conv171, 8
  %or173 = or i32 %shl172, %conv169
  %incdec.ptr174 = getelementptr inbounds i8, i8* %b.addr.4, i64 1
  %14 = load i8, i8* %b.addr.4, align 1, !tbaa !36
  %conv175 = zext i8 %14 to i32
  %shl176 = shl nuw nsw i32 %conv175, 16
  %or177 = or i32 %or173, %shl176
  %incdec.ptr178 = getelementptr inbounds i8, i8* %a.addr.4, i64 1
  %15 = load i8, i8* %a.addr.4, align 1, !tbaa !36
  %conv179 = zext i8 %15 to i32
  %shl180 = shl nuw i32 %conv179, 24
  %or181 = or i32 %or177, %shl180
  %incdec.ptr182 = getelementptr inbounds i32, i32* %cp.addr.4, i64 1
  store i32 %or181, i32* %cp.addr.4, align 4, !tbaa !38
  br label %sw.bb183

sw.bb183:                                         ; preds = %for.end, %sw.bb167
  %cp.addr.5 = phi i32* [ %incdec.ptr182, %sw.bb167 ], [ %cp.addr.1.lcssa, %for.end ]
  %r.addr.5 = phi i8* [ %incdec.ptr168, %sw.bb167 ], [ %r.addr.1.lcssa, %for.end ]
  %g.addr.5 = phi i8* [ %incdec.ptr170, %sw.bb167 ], [ %g.addr.1.lcssa, %for.end ]
  %b.addr.5 = phi i8* [ %incdec.ptr174, %sw.bb167 ], [ %b.addr.1.lcssa, %for.end ]
  %a.addr.5 = phi i8* [ %incdec.ptr178, %sw.bb167 ], [ %a.addr.1.lcssa, %for.end ]
  %incdec.ptr184 = getelementptr inbounds i8, i8* %r.addr.5, i64 1
  %16 = load i8, i8* %r.addr.5, align 1, !tbaa !36
  %conv185 = zext i8 %16 to i32
  %incdec.ptr186 = getelementptr inbounds i8, i8* %g.addr.5, i64 1
  %17 = load i8, i8* %g.addr.5, align 1, !tbaa !36
  %conv187 = zext i8 %17 to i32
  %shl188 = shl nuw nsw i32 %conv187, 8
  %or189 = or i32 %shl188, %conv185
  %incdec.ptr190 = getelementptr inbounds i8, i8* %b.addr.5, i64 1
  %18 = load i8, i8* %b.addr.5, align 1, !tbaa !36
  %conv191 = zext i8 %18 to i32
  %shl192 = shl nuw nsw i32 %conv191, 16
  %or193 = or i32 %or189, %shl192
  %incdec.ptr194 = getelementptr inbounds i8, i8* %a.addr.5, i64 1
  %19 = load i8, i8* %a.addr.5, align 1, !tbaa !36
  %conv195 = zext i8 %19 to i32
  %shl196 = shl nuw i32 %conv195, 24
  %or197 = or i32 %or193, %shl196
  %incdec.ptr198 = getelementptr inbounds i32, i32* %cp.addr.5, i64 1
  store i32 %or197, i32* %cp.addr.5, align 4, !tbaa !38
  br label %sw.bb199

sw.bb199:                                         ; preds = %for.end, %sw.bb183
  %cp.addr.6 = phi i32* [ %incdec.ptr198, %sw.bb183 ], [ %cp.addr.1.lcssa, %for.end ]
  %r.addr.6 = phi i8* [ %incdec.ptr184, %sw.bb183 ], [ %r.addr.1.lcssa, %for.end ]
  %g.addr.6 = phi i8* [ %incdec.ptr186, %sw.bb183 ], [ %g.addr.1.lcssa, %for.end ]
  %b.addr.6 = phi i8* [ %incdec.ptr190, %sw.bb183 ], [ %b.addr.1.lcssa, %for.end ]
  %a.addr.6 = phi i8* [ %incdec.ptr194, %sw.bb183 ], [ %a.addr.1.lcssa, %for.end ]
  %incdec.ptr200 = getelementptr inbounds i8, i8* %r.addr.6, i64 1
  %20 = load i8, i8* %r.addr.6, align 1, !tbaa !36
  %conv201 = zext i8 %20 to i32
  %incdec.ptr202 = getelementptr inbounds i8, i8* %g.addr.6, i64 1
  %21 = load i8, i8* %g.addr.6, align 1, !tbaa !36
  %conv203 = zext i8 %21 to i32
  %shl204 = shl nuw nsw i32 %conv203, 8
  %or205 = or i32 %shl204, %conv201
  %incdec.ptr206 = getelementptr inbounds i8, i8* %b.addr.6, i64 1
  %22 = load i8, i8* %b.addr.6, align 1, !tbaa !36
  %conv207 = zext i8 %22 to i32
  %shl208 = shl nuw nsw i32 %conv207, 16
  %or209 = or i32 %or205, %shl208
  %incdec.ptr210 = getelementptr inbounds i8, i8* %a.addr.6, i64 1
  %23 = load i8, i8* %a.addr.6, align 1, !tbaa !36
  %conv211 = zext i8 %23 to i32
  %shl212 = shl nuw i32 %conv211, 24
  %or213 = or i32 %or209, %shl212
  %incdec.ptr214 = getelementptr inbounds i32, i32* %cp.addr.6, i64 1
  store i32 %or213, i32* %cp.addr.6, align 4, !tbaa !38
  br label %sw.bb215

sw.bb215:                                         ; preds = %for.end, %sw.bb199
  %cp.addr.7 = phi i32* [ %incdec.ptr214, %sw.bb199 ], [ %cp.addr.1.lcssa, %for.end ]
  %r.addr.7 = phi i8* [ %incdec.ptr200, %sw.bb199 ], [ %r.addr.1.lcssa, %for.end ]
  %g.addr.7 = phi i8* [ %incdec.ptr202, %sw.bb199 ], [ %g.addr.1.lcssa, %for.end ]
  %b.addr.7 = phi i8* [ %incdec.ptr206, %sw.bb199 ], [ %b.addr.1.lcssa, %for.end ]
  %a.addr.7 = phi i8* [ %incdec.ptr210, %sw.bb199 ], [ %a.addr.1.lcssa, %for.end ]
  %incdec.ptr216 = getelementptr inbounds i8, i8* %r.addr.7, i64 1
  %24 = load i8, i8* %r.addr.7, align 1, !tbaa !36
  %conv217 = zext i8 %24 to i32
  %incdec.ptr218 = getelementptr inbounds i8, i8* %g.addr.7, i64 1
  %25 = load i8, i8* %g.addr.7, align 1, !tbaa !36
  %conv219 = zext i8 %25 to i32
  %shl220 = shl nuw nsw i32 %conv219, 8
  %or221 = or i32 %shl220, %conv217
  %incdec.ptr222 = getelementptr inbounds i8, i8* %b.addr.7, i64 1
  %26 = load i8, i8* %b.addr.7, align 1, !tbaa !36
  %conv223 = zext i8 %26 to i32
  %shl224 = shl nuw nsw i32 %conv223, 16
  %or225 = or i32 %or221, %shl224
  %incdec.ptr226 = getelementptr inbounds i8, i8* %a.addr.7, i64 1
  %27 = load i8, i8* %a.addr.7, align 1, !tbaa !36
  %conv227 = zext i8 %27 to i32
  %shl228 = shl nuw i32 %conv227, 24
  %or229 = or i32 %or225, %shl228
  %incdec.ptr230 = getelementptr inbounds i32, i32* %cp.addr.7, i64 1
  store i32 %or229, i32* %cp.addr.7, align 4, !tbaa !38
  br label %if.end

if.end:                                           ; preds = %for.end, %sw.bb215
  %cp.addr.8 = phi i32* [ %incdec.ptr230, %sw.bb215 ], [ %cp.addr.1.lcssa, %for.end ]
  %r.addr.8 = phi i8* [ %incdec.ptr216, %sw.bb215 ], [ %r.addr.1.lcssa, %for.end ]
  %g.addr.8 = phi i8* [ %incdec.ptr218, %sw.bb215 ], [ %g.addr.1.lcssa, %for.end ]
  %b.addr.8 = phi i8* [ %incdec.ptr222, %sw.bb215 ], [ %b.addr.1.lcssa, %for.end ]
  %a.addr.8 = phi i8* [ %incdec.ptr226, %sw.bb215 ], [ %a.addr.1.lcssa, %for.end ]
  %add.ptr = getelementptr inbounds i8, i8* %r.addr.8, i64 %idx.ext
  %add.ptr232 = getelementptr inbounds i8, i8* %g.addr.8, i64 %idx.ext
  %add.ptr234 = getelementptr inbounds i8, i8* %b.addr.8, i64 %idx.ext
  %add.ptr236 = getelementptr inbounds i8, i8* %a.addr.8, i64 %idx.ext
  %add.ptr238 = getelementptr inbounds i32, i32* %cp.addr.8, i64 %idx.ext237
  %cmp.not = icmp eq i32 %dec340, 0
  br i1 %cmp.not, label %while.end.loopexit, label %for.cond.preheader, !llvm.loop !111

while.end.loopexit:                               ; preds = %if.end
  br label %while.end

while.end:                                        ; preds = %while.end.loopexit, %entry
  ret void

rolled.pre:                                       ; preds = %for.body
  br label %rolled.loop

rolled.loop:                                      ; preds = %rolled.pre, %rolled.loop
  %28 = phi i8 [ 0, %rolled.pre ], [ %58, %rolled.loop ]
  %29 = zext i8 %28 to i64
  %30 = add i64 %29, 1
  %31 = getelementptr i8, i8* %g.addr.1324, i64 %30
  %32 = load i8, i8* %31, align 1
  %33 = zext i8 %32 to i32
  %34 = shl nuw nsw i32 %33, 8
  %35 = zext i8 %28 to i64
  %36 = add i64 %35, 1
  %37 = getelementptr i8, i8* %r.addr.1323, i64 %36
  %38 = load i8, i8* %37, align 1
  %39 = zext i8 %38 to i32
  %40 = or i32 %34, %39
  %41 = zext i8 %28 to i64
  %42 = add i64 %41, 1
  %43 = getelementptr i8, i8* %b.addr.1325, i64 %42
  %44 = load i8, i8* %43, align 1
  %45 = zext i8 %44 to i32
  %46 = shl nuw nsw i32 %45, 16
  %47 = or i32 %40, %46
  %48 = zext i8 %28 to i64
  %49 = add i64 %48, 1
  %50 = getelementptr i8, i8* %a.addr.1326, i64 %49
  %51 = load i8, i8* %50, align 1
  %52 = zext i8 %51 to i32
  %53 = shl nuw i32 %52, 24
  %54 = or i32 %47, %53
  %55 = zext i8 %28 to i64
  %56 = add i64 %55, 1
  %57 = getelementptr i32, i32* %cp.addr.1322, i64 %56
  store i32 %54, i32* %57, align 4
  %58 = add i8 %28, 1
  %59 = icmp ne i8 %58, 8
  br i1 %59, label %rolled.loop, label %rolled.exit

rolled.exit:                                      ; preds = %rolled.loop
  %60 = add i32 %_x.0327, -8
  %61 = icmp ugt i32 %60, 7
  br i1 %61, label %for.body, label %for.end.loopexit, !llvm.loop !112
}

code gen 1
destroying tree
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   %0 = load i8, i8* %r.addr.1259, align 1, !tbaa !2
Skipping:   %incdec.ptr2 = getelementptr inbounds i8, i8* %g.addr.1260, i64 1
Skipping:   %incdec.ptr4 = getelementptr inbounds i8, i8* %b.addr.1261, i64 1
Here ..
Skipping:   %incdec.ptr9 = getelementptr inbounds i32, i32* %cp.addr.1262, i64 1
Skipping:   %incdec.ptr10 = getelementptr inbounds i8, i8* %r.addr.1259, i64 2
Skipping:   %incdec.ptr12 = getelementptr inbounds i8, i8* %g.addr.1260, i64 2
Skipping:   %incdec.ptr16 = getelementptr inbounds i8, i8* %b.addr.1261, i64 2
Here ..
Skipping:   %incdec.ptr21 = getelementptr inbounds i32, i32* %cp.addr.1262, i64 2
Skipping:   %incdec.ptr22 = getelementptr inbounds i8, i8* %r.addr.1259, i64 3
Skipping:   %incdec.ptr24 = getelementptr inbounds i8, i8* %g.addr.1260, i64 3
Skipping:   %incdec.ptr28 = getelementptr inbounds i8, i8* %b.addr.1261, i64 3
Here ..
Skipping:   %incdec.ptr33 = getelementptr inbounds i32, i32* %cp.addr.1262, i64 3
Skipping:   %incdec.ptr34 = getelementptr inbounds i8, i8* %r.addr.1259, i64 4
Skipping:   %incdec.ptr36 = getelementptr inbounds i8, i8* %g.addr.1260, i64 4
Skipping:   %incdec.ptr40 = getelementptr inbounds i8, i8* %b.addr.1261, i64 4
Here ..
Skipping:   %incdec.ptr45 = getelementptr inbounds i32, i32* %cp.addr.1262, i64 4
Skipping:   %incdec.ptr46 = getelementptr inbounds i8, i8* %r.addr.1259, i64 5
Skipping:   %incdec.ptr48 = getelementptr inbounds i8, i8* %g.addr.1260, i64 5
Skipping:   %incdec.ptr52 = getelementptr inbounds i8, i8* %b.addr.1261, i64 5
Here ..
Skipping:   %incdec.ptr57 = getelementptr inbounds i32, i32* %cp.addr.1262, i64 5
Skipping:   %incdec.ptr58 = getelementptr inbounds i8, i8* %r.addr.1259, i64 6
Skipping:   %incdec.ptr60 = getelementptr inbounds i8, i8* %g.addr.1260, i64 6
Skipping:   %incdec.ptr64 = getelementptr inbounds i8, i8* %b.addr.1261, i64 6
Here ..
Skipping:   %incdec.ptr69 = getelementptr inbounds i32, i32* %cp.addr.1262, i64 6
Skipping:   %incdec.ptr70 = getelementptr inbounds i8, i8* %r.addr.1259, i64 7
Skipping:   %incdec.ptr72 = getelementptr inbounds i8, i8* %g.addr.1260, i64 7
Skipping:   %incdec.ptr76 = getelementptr inbounds i8, i8* %b.addr.1261, i64 7
Here ..
Skipping:   %incdec.ptr81 = getelementptr inbounds i32, i32* %cp.addr.1262, i64 7
Skipping:   %incdec.ptr82 = getelementptr inbounds i8, i8* %r.addr.1259, i64 8
Skipping:   %incdec.ptr84 = getelementptr inbounds i8, i8* %g.addr.1260, i64 8
Skipping:   %incdec.ptr88 = getelementptr inbounds i8, i8* %b.addr.1261, i64 8
Here ..
Skipping:   %incdec.ptr93 = getelementptr inbounds i32, i32* %cp.addr.1262, i64 8
Here ..
I:   %sub = add i32 %_x.0263, -8
Last:   %sub = add i32 %_x.0263, -8
Schedulable: 1
code gen 0
Gains: 100 - 19 = 81
Profitable: finishing code generation
; Function Attrs: nofree norecurse nounwind optsize uwtable
define internal void @putRGBseparate8bittile(%struct._TIFFRGBAImage* nocapture readnone %img, i32* nocapture %cp, i32 %x, i32 %y, i32 %w, i32 %h, i32 %fromskew, i32 %toskew, i8* nocapture readonly %r, i8* nocapture readonly %g, i8* nocapture readonly %b, i8* nocapture readnone %a) #5 {
entry:
  %cmp.not269 = icmp eq i32 %h, 0
  br i1 %cmp.not269, label %while.end, label %for.cond.preheader.lr.ph

for.cond.preheader.lr.ph:                         ; preds = %entry
  %cmp1258 = icmp ugt i32 %w, 7
  %idx.ext = sext i32 %fromskew to i64
  %idx.ext190 = sext i32 %toskew to i64
  br label %for.cond.preheader

for.cond.preheader:                               ; preds = %for.cond.preheader.lr.ph, %if.end
  %dec274.in = phi i32 [ %h, %for.cond.preheader.lr.ph ], [ %dec274, %if.end ]
  %cp.addr.0273 = phi i32* [ %cp, %for.cond.preheader.lr.ph ], [ %add.ptr191, %if.end ]
  %b.addr.0272 = phi i8* [ %b, %for.cond.preheader.lr.ph ], [ %add.ptr189, %if.end ]
  %g.addr.0271 = phi i8* [ %g, %for.cond.preheader.lr.ph ], [ %add.ptr187, %if.end ]
  %r.addr.0270 = phi i8* [ %r, %for.cond.preheader.lr.ph ], [ %add.ptr, %if.end ]
  %dec274 = add i32 %dec274.in, -1
  br i1 %cmp1258, label %for.body.preheader, label %for.end

for.body.preheader:                               ; preds = %for.cond.preheader
  br label %for.body

for.body:                                         ; preds = %for.body.preheader, %for.body
  %_x.0263 = phi i32 [ %sub, %for.body ], [ %w, %for.body.preheader ]
  %cp.addr.1262 = phi i32* [ %incdec.ptr93, %for.body ], [ %cp.addr.0273, %for.body.preheader ]
  %b.addr.1261 = phi i8* [ %incdec.ptr88, %for.body ], [ %b.addr.0272, %for.body.preheader ]
  %g.addr.1260 = phi i8* [ %incdec.ptr84, %for.body ], [ %g.addr.0271, %for.body.preheader ]
  %r.addr.1259 = phi i8* [ %incdec.ptr82, %for.body ], [ %r.addr.0270, %for.body.preheader ]
  %incdec.ptr = getelementptr inbounds i8, i8* %r.addr.1259, i64 1
  %0 = load i8, i8* %r.addr.1259, align 1, !tbaa !36
  %conv = zext i8 %0 to i32
  %incdec.ptr2 = getelementptr inbounds i8, i8* %g.addr.1260, i64 1
  %1 = load i8, i8* %g.addr.1260, align 1, !tbaa !36
  %conv3 = zext i8 %1 to i32
  %shl = shl nuw nsw i32 %conv3, 8
  %incdec.ptr4 = getelementptr inbounds i8, i8* %b.addr.1261, i64 1
  %2 = load i8, i8* %b.addr.1261, align 1, !tbaa !36
  %conv5 = zext i8 %2 to i32
  %shl6 = shl nuw nsw i32 %conv5, 16
  %or = or i32 %shl, %conv
  %or7 = or i32 %or, %shl6
  %or8 = or i32 %or7, -16777216
  %incdec.ptr9 = getelementptr inbounds i32, i32* %cp.addr.1262, i64 1
  store i32 %or8, i32* %cp.addr.1262, align 4, !tbaa !38
  %incdec.ptr10 = getelementptr inbounds i8, i8* %r.addr.1259, i64 2
  %3 = load i8, i8* %incdec.ptr, align 1, !tbaa !36
  %conv11 = zext i8 %3 to i32
  %incdec.ptr12 = getelementptr inbounds i8, i8* %g.addr.1260, i64 2
  %4 = load i8, i8* %incdec.ptr2, align 1, !tbaa !36
  %conv13 = zext i8 %4 to i32
  %shl14 = shl nuw nsw i32 %conv13, 8
  %incdec.ptr16 = getelementptr inbounds i8, i8* %b.addr.1261, i64 2
  %5 = load i8, i8* %incdec.ptr4, align 1, !tbaa !36
  %conv17 = zext i8 %5 to i32
  %shl18 = shl nuw nsw i32 %conv17, 16
  %or15 = or i32 %shl14, %conv11
  %or19 = or i32 %or15, %shl18
  %or20 = or i32 %or19, -16777216
  %incdec.ptr21 = getelementptr inbounds i32, i32* %cp.addr.1262, i64 2
  store i32 %or20, i32* %incdec.ptr9, align 4, !tbaa !38
  %incdec.ptr22 = getelementptr inbounds i8, i8* %r.addr.1259, i64 3
  %6 = load i8, i8* %incdec.ptr10, align 1, !tbaa !36
  %conv23 = zext i8 %6 to i32
  %incdec.ptr24 = getelementptr inbounds i8, i8* %g.addr.1260, i64 3
  %7 = load i8, i8* %incdec.ptr12, align 1, !tbaa !36
  %conv25 = zext i8 %7 to i32
  %shl26 = shl nuw nsw i32 %conv25, 8
  %incdec.ptr28 = getelementptr inbounds i8, i8* %b.addr.1261, i64 3
  %8 = load i8, i8* %incdec.ptr16, align 1, !tbaa !36
  %conv29 = zext i8 %8 to i32
  %shl30 = shl nuw nsw i32 %conv29, 16
  %or27 = or i32 %shl26, %conv23
  %or31 = or i32 %or27, %shl30
  %or32 = or i32 %or31, -16777216
  %incdec.ptr33 = getelementptr inbounds i32, i32* %cp.addr.1262, i64 3
  store i32 %or32, i32* %incdec.ptr21, align 4, !tbaa !38
  %incdec.ptr34 = getelementptr inbounds i8, i8* %r.addr.1259, i64 4
  %9 = load i8, i8* %incdec.ptr22, align 1, !tbaa !36
  %conv35 = zext i8 %9 to i32
  %incdec.ptr36 = getelementptr inbounds i8, i8* %g.addr.1260, i64 4
  %10 = load i8, i8* %incdec.ptr24, align 1, !tbaa !36
  %conv37 = zext i8 %10 to i32
  %shl38 = shl nuw nsw i32 %conv37, 8
  %incdec.ptr40 = getelementptr inbounds i8, i8* %b.addr.1261, i64 4
  %11 = load i8, i8* %incdec.ptr28, align 1, !tbaa !36
  %conv41 = zext i8 %11 to i32
  %shl42 = shl nuw nsw i32 %conv41, 16
  %or39 = or i32 %shl38, %conv35
  %or43 = or i32 %or39, %shl42
  %or44 = or i32 %or43, -16777216
  %incdec.ptr45 = getelementptr inbounds i32, i32* %cp.addr.1262, i64 4
  store i32 %or44, i32* %incdec.ptr33, align 4, !tbaa !38
  %incdec.ptr46 = getelementptr inbounds i8, i8* %r.addr.1259, i64 5
  %12 = load i8, i8* %incdec.ptr34, align 1, !tbaa !36
  %conv47 = zext i8 %12 to i32
  %incdec.ptr48 = getelementptr inbounds i8, i8* %g.addr.1260, i64 5
  %13 = load i8, i8* %incdec.ptr36, align 1, !tbaa !36
  %conv49 = zext i8 %13 to i32
  %shl50 = shl nuw nsw i32 %conv49, 8
  %incdec.ptr52 = getelementptr inbounds i8, i8* %b.addr.1261, i64 5
  %14 = load i8, i8* %incdec.ptr40, align 1, !tbaa !36
  %conv53 = zext i8 %14 to i32
  %shl54 = shl nuw nsw i32 %conv53, 16
  %or51 = or i32 %shl50, %conv47
  %or55 = or i32 %or51, %shl54
  %or56 = or i32 %or55, -16777216
  %incdec.ptr57 = getelementptr inbounds i32, i32* %cp.addr.1262, i64 5
  store i32 %or56, i32* %incdec.ptr45, align 4, !tbaa !38
  %incdec.ptr58 = getelementptr inbounds i8, i8* %r.addr.1259, i64 6
  %15 = load i8, i8* %incdec.ptr46, align 1, !tbaa !36
  %conv59 = zext i8 %15 to i32
  %incdec.ptr60 = getelementptr inbounds i8, i8* %g.addr.1260, i64 6
  %16 = load i8, i8* %incdec.ptr48, align 1, !tbaa !36
  %conv61 = zext i8 %16 to i32
  %shl62 = shl nuw nsw i32 %conv61, 8
  %incdec.ptr64 = getelementptr inbounds i8, i8* %b.addr.1261, i64 6
  %17 = load i8, i8* %incdec.ptr52, align 1, !tbaa !36
  %conv65 = zext i8 %17 to i32
  %shl66 = shl nuw nsw i32 %conv65, 16
  %or63 = or i32 %shl62, %conv59
  %or67 = or i32 %or63, %shl66
  %or68 = or i32 %or67, -16777216
  %incdec.ptr69 = getelementptr inbounds i32, i32* %cp.addr.1262, i64 6
  store i32 %or68, i32* %incdec.ptr57, align 4, !tbaa !38
  %incdec.ptr70 = getelementptr inbounds i8, i8* %r.addr.1259, i64 7
  %18 = load i8, i8* %incdec.ptr58, align 1, !tbaa !36
  %conv71 = zext i8 %18 to i32
  %incdec.ptr72 = getelementptr inbounds i8, i8* %g.addr.1260, i64 7
  %19 = load i8, i8* %incdec.ptr60, align 1, !tbaa !36
  %conv73 = zext i8 %19 to i32
  %shl74 = shl nuw nsw i32 %conv73, 8
  %incdec.ptr76 = getelementptr inbounds i8, i8* %b.addr.1261, i64 7
  %20 = load i8, i8* %incdec.ptr64, align 1, !tbaa !36
  %conv77 = zext i8 %20 to i32
  %shl78 = shl nuw nsw i32 %conv77, 16
  %or75 = or i32 %shl74, %conv71
  %or79 = or i32 %or75, %shl78
  %or80 = or i32 %or79, -16777216
  %incdec.ptr81 = getelementptr inbounds i32, i32* %cp.addr.1262, i64 7
  store i32 %or80, i32* %incdec.ptr69, align 4, !tbaa !38
  %incdec.ptr82 = getelementptr inbounds i8, i8* %r.addr.1259, i64 8
  %21 = load i8, i8* %incdec.ptr70, align 1, !tbaa !36
  %conv83 = zext i8 %21 to i32
  %incdec.ptr84 = getelementptr inbounds i8, i8* %g.addr.1260, i64 8
  %22 = load i8, i8* %incdec.ptr72, align 1, !tbaa !36
  %conv85 = zext i8 %22 to i32
  %shl86 = shl nuw nsw i32 %conv85, 8
  %incdec.ptr88 = getelementptr inbounds i8, i8* %b.addr.1261, i64 8
  %23 = load i8, i8* %incdec.ptr76, align 1, !tbaa !36
  %conv89 = zext i8 %23 to i32
  %shl90 = shl nuw nsw i32 %conv89, 16
  %or87 = or i32 %shl86, %conv83
  %or91 = or i32 %or87, %shl90
  %or92 = or i32 %or91, -16777216
  %incdec.ptr93 = getelementptr inbounds i32, i32* %cp.addr.1262, i64 8
  store i32 %or92, i32* %incdec.ptr81, align 4, !tbaa !38
  %sub = add i32 %_x.0263, -8
  %cmp1 = icmp ugt i32 %sub, 7
  br i1 %cmp1, label %for.body, label %for.end.loopexit, !llvm.loop !115

for.end.loopexit:                                 ; preds = %for.body
  %incdec.ptr82.lcssa = phi i8* [ %incdec.ptr82, %for.body ]
  %incdec.ptr84.lcssa = phi i8* [ %incdec.ptr84, %for.body ]
  %incdec.ptr88.lcssa = phi i8* [ %incdec.ptr88, %for.body ]
  %incdec.ptr93.lcssa = phi i32* [ %incdec.ptr93, %for.body ]
  %sub.lcssa = phi i32 [ %sub, %for.body ]
  br label %for.end

for.end:                                          ; preds = %for.end.loopexit, %for.cond.preheader
  %r.addr.1.lcssa = phi i8* [ %r.addr.0270, %for.cond.preheader ], [ %incdec.ptr82.lcssa, %for.end.loopexit ]
  %g.addr.1.lcssa = phi i8* [ %g.addr.0271, %for.cond.preheader ], [ %incdec.ptr84.lcssa, %for.end.loopexit ]
  %b.addr.1.lcssa = phi i8* [ %b.addr.0272, %for.cond.preheader ], [ %incdec.ptr88.lcssa, %for.end.loopexit ]
  %cp.addr.1.lcssa = phi i32* [ %cp.addr.0273, %for.cond.preheader ], [ %incdec.ptr93.lcssa, %for.end.loopexit ]
  %_x.0.lcssa = phi i32 [ %w, %for.cond.preheader ], [ %sub.lcssa, %for.end.loopexit ]
  switch i32 %_x.0.lcssa, label %if.end [
    i32 1, label %sw.bb173
    i32 7, label %sw.bb
    i32 6, label %sw.bb108
    i32 5, label %sw.bb121
    i32 4, label %sw.bb134
    i32 3, label %sw.bb147
    i32 2, label %sw.bb160
  ]

sw.bb:                                            ; preds = %for.end
  %incdec.ptr96 = getelementptr inbounds i8, i8* %r.addr.1.lcssa, i64 1
  %24 = load i8, i8* %r.addr.1.lcssa, align 1, !tbaa !36
  %conv97 = zext i8 %24 to i32
  %incdec.ptr98 = getelementptr inbounds i8, i8* %g.addr.1.lcssa, i64 1
  %25 = load i8, i8* %g.addr.1.lcssa, align 1, !tbaa !36
  %conv99 = zext i8 %25 to i32
  %shl100 = shl nuw nsw i32 %conv99, 8
  %incdec.ptr102 = getelementptr inbounds i8, i8* %b.addr.1.lcssa, i64 1
  %26 = load i8, i8* %b.addr.1.lcssa, align 1, !tbaa !36
  %conv103 = zext i8 %26 to i32
  %shl104 = shl nuw nsw i32 %conv103, 16
  %or101 = or i32 %shl100, %conv97
  %or105 = or i32 %or101, %shl104
  %or106 = or i32 %or105, -16777216
  %incdec.ptr107 = getelementptr inbounds i32, i32* %cp.addr.1.lcssa, i64 1
  store i32 %or106, i32* %cp.addr.1.lcssa, align 4, !tbaa !38
  br label %sw.bb108

sw.bb108:                                         ; preds = %for.end, %sw.bb
  %r.addr.2 = phi i8* [ %incdec.ptr96, %sw.bb ], [ %r.addr.1.lcssa, %for.end ]
  %g.addr.2 = phi i8* [ %incdec.ptr98, %sw.bb ], [ %g.addr.1.lcssa, %for.end ]
  %b.addr.2 = phi i8* [ %incdec.ptr102, %sw.bb ], [ %b.addr.1.lcssa, %for.end ]
  %cp.addr.2 = phi i32* [ %incdec.ptr107, %sw.bb ], [ %cp.addr.1.lcssa, %for.end ]
  %incdec.ptr109 = getelementptr inbounds i8, i8* %r.addr.2, i64 1
  %27 = load i8, i8* %r.addr.2, align 1, !tbaa !36
  %conv110 = zext i8 %27 to i32
  %incdec.ptr111 = getelementptr inbounds i8, i8* %g.addr.2, i64 1
  %28 = load i8, i8* %g.addr.2, align 1, !tbaa !36
  %conv112 = zext i8 %28 to i32
  %shl113 = shl nuw nsw i32 %conv112, 8
  %incdec.ptr115 = getelementptr inbounds i8, i8* %b.addr.2, i64 1
  %29 = load i8, i8* %b.addr.2, align 1, !tbaa !36
  %conv116 = zext i8 %29 to i32
  %shl117 = shl nuw nsw i32 %conv116, 16
  %or114 = or i32 %shl113, %conv110
  %or118 = or i32 %or114, %shl117
  %or119 = or i32 %or118, -16777216
  %incdec.ptr120 = getelementptr inbounds i32, i32* %cp.addr.2, i64 1
  store i32 %or119, i32* %cp.addr.2, align 4, !tbaa !38
  br label %sw.bb121

sw.bb121:                                         ; preds = %for.end, %sw.bb108
  %r.addr.3 = phi i8* [ %incdec.ptr109, %sw.bb108 ], [ %r.addr.1.lcssa, %for.end ]
  %g.addr.3 = phi i8* [ %incdec.ptr111, %sw.bb108 ], [ %g.addr.1.lcssa, %for.end ]
  %b.addr.3 = phi i8* [ %incdec.ptr115, %sw.bb108 ], [ %b.addr.1.lcssa, %for.end ]
  %cp.addr.3 = phi i32* [ %incdec.ptr120, %sw.bb108 ], [ %cp.addr.1.lcssa, %for.end ]
  %incdec.ptr122 = getelementptr inbounds i8, i8* %r.addr.3, i64 1
  %30 = load i8, i8* %r.addr.3, align 1, !tbaa !36
  %conv123 = zext i8 %30 to i32
  %incdec.ptr124 = getelementptr inbounds i8, i8* %g.addr.3, i64 1
  %31 = load i8, i8* %g.addr.3, align 1, !tbaa !36
  %conv125 = zext i8 %31 to i32
  %shl126 = shl nuw nsw i32 %conv125, 8
  %incdec.ptr128 = getelementptr inbounds i8, i8* %b.addr.3, i64 1
  %32 = load i8, i8* %b.addr.3, align 1, !tbaa !36
  %conv129 = zext i8 %32 to i32
  %shl130 = shl nuw nsw i32 %conv129, 16
  %or127 = or i32 %shl126, %conv123
  %or131 = or i32 %or127, %shl130
  %or132 = or i32 %or131, -16777216
  %incdec.ptr133 = getelementptr inbounds i32, i32* %cp.addr.3, i64 1
  store i32 %or132, i32* %cp.addr.3, align 4, !tbaa !38
  br label %sw.bb134

sw.bb134:                                         ; preds = %for.end, %sw.bb121
  %r.addr.4 = phi i8* [ %incdec.ptr122, %sw.bb121 ], [ %r.addr.1.lcssa, %for.end ]
  %g.addr.4 = phi i8* [ %incdec.ptr124, %sw.bb121 ], [ %g.addr.1.lcssa, %for.end ]
  %b.addr.4 = phi i8* [ %incdec.ptr128, %sw.bb121 ], [ %b.addr.1.lcssa, %for.end ]
  %cp.addr.4 = phi i32* [ %incdec.ptr133, %sw.bb121 ], [ %cp.addr.1.lcssa, %for.end ]
  %incdec.ptr135 = getelementptr inbounds i8, i8* %r.addr.4, i64 1
  %33 = load i8, i8* %r.addr.4, align 1, !tbaa !36
  %conv136 = zext i8 %33 to i32
  %incdec.ptr137 = getelementptr inbounds i8, i8* %g.addr.4, i64 1
  %34 = load i8, i8* %g.addr.4, align 1, !tbaa !36
  %conv138 = zext i8 %34 to i32
  %shl139 = shl nuw nsw i32 %conv138, 8
  %incdec.ptr141 = getelementptr inbounds i8, i8* %b.addr.4, i64 1
  %35 = load i8, i8* %b.addr.4, align 1, !tbaa !36
  %conv142 = zext i8 %35 to i32
  %shl143 = shl nuw nsw i32 %conv142, 16
  %or140 = or i32 %shl139, %conv136
  %or144 = or i32 %or140, %shl143
  %or145 = or i32 %or144, -16777216
  %incdec.ptr146 = getelementptr inbounds i32, i32* %cp.addr.4, i64 1
  store i32 %or145, i32* %cp.addr.4, align 4, !tbaa !38
  br label %sw.bb147

sw.bb147:                                         ; preds = %for.end, %sw.bb134
  %r.addr.5 = phi i8* [ %incdec.ptr135, %sw.bb134 ], [ %r.addr.1.lcssa, %for.end ]
  %g.addr.5 = phi i8* [ %incdec.ptr137, %sw.bb134 ], [ %g.addr.1.lcssa, %for.end ]
  %b.addr.5 = phi i8* [ %incdec.ptr141, %sw.bb134 ], [ %b.addr.1.lcssa, %for.end ]
  %cp.addr.5 = phi i32* [ %incdec.ptr146, %sw.bb134 ], [ %cp.addr.1.lcssa, %for.end ]
  %incdec.ptr148 = getelementptr inbounds i8, i8* %r.addr.5, i64 1
  %36 = load i8, i8* %r.addr.5, align 1, !tbaa !36
  %conv149 = zext i8 %36 to i32
  %incdec.ptr150 = getelementptr inbounds i8, i8* %g.addr.5, i64 1
  %37 = load i8, i8* %g.addr.5, align 1, !tbaa !36
  %conv151 = zext i8 %37 to i32
  %shl152 = shl nuw nsw i32 %conv151, 8
  %incdec.ptr154 = getelementptr inbounds i8, i8* %b.addr.5, i64 1
  %38 = load i8, i8* %b.addr.5, align 1, !tbaa !36
  %conv155 = zext i8 %38 to i32
  %shl156 = shl nuw nsw i32 %conv155, 16
  %or153 = or i32 %shl152, %conv149
  %or157 = or i32 %or153, %shl156
  %or158 = or i32 %or157, -16777216
  %incdec.ptr159 = getelementptr inbounds i32, i32* %cp.addr.5, i64 1
  store i32 %or158, i32* %cp.addr.5, align 4, !tbaa !38
  br label %sw.bb160

sw.bb160:                                         ; preds = %for.end, %sw.bb147
  %r.addr.6 = phi i8* [ %incdec.ptr148, %sw.bb147 ], [ %r.addr.1.lcssa, %for.end ]
  %g.addr.6 = phi i8* [ %incdec.ptr150, %sw.bb147 ], [ %g.addr.1.lcssa, %for.end ]
  %b.addr.6 = phi i8* [ %incdec.ptr154, %sw.bb147 ], [ %b.addr.1.lcssa, %for.end ]
  %cp.addr.6 = phi i32* [ %incdec.ptr159, %sw.bb147 ], [ %cp.addr.1.lcssa, %for.end ]
  %incdec.ptr161 = getelementptr inbounds i8, i8* %r.addr.6, i64 1
  %39 = load i8, i8* %r.addr.6, align 1, !tbaa !36
  %conv162 = zext i8 %39 to i32
  %incdec.ptr163 = getelementptr inbounds i8, i8* %g.addr.6, i64 1
  %40 = load i8, i8* %g.addr.6, align 1, !tbaa !36
  %conv164 = zext i8 %40 to i32
  %shl165 = shl nuw nsw i32 %conv164, 8
  %incdec.ptr167 = getelementptr inbounds i8, i8* %b.addr.6, i64 1
  %41 = load i8, i8* %b.addr.6, align 1, !tbaa !36
  %conv168 = zext i8 %41 to i32
  %shl169 = shl nuw nsw i32 %conv168, 16
  %or166 = or i32 %shl165, %conv162
  %or170 = or i32 %or166, %shl169
  %or171 = or i32 %or170, -16777216
  %incdec.ptr172 = getelementptr inbounds i32, i32* %cp.addr.6, i64 1
  store i32 %or171, i32* %cp.addr.6, align 4, !tbaa !38
  br label %sw.bb173

sw.bb173:                                         ; preds = %for.end, %sw.bb160
  %r.addr.7 = phi i8* [ %incdec.ptr161, %sw.bb160 ], [ %r.addr.1.lcssa, %for.end ]
  %g.addr.7 = phi i8* [ %incdec.ptr163, %sw.bb160 ], [ %g.addr.1.lcssa, %for.end ]
  %b.addr.7 = phi i8* [ %incdec.ptr167, %sw.bb160 ], [ %b.addr.1.lcssa, %for.end ]
  %cp.addr.7 = phi i32* [ %incdec.ptr172, %sw.bb160 ], [ %cp.addr.1.lcssa, %for.end ]
  %incdec.ptr174 = getelementptr inbounds i8, i8* %r.addr.7, i64 1
  %42 = load i8, i8* %r.addr.7, align 1, !tbaa !36
  %conv175 = zext i8 %42 to i32
  %incdec.ptr176 = getelementptr inbounds i8, i8* %g.addr.7, i64 1
  %43 = load i8, i8* %g.addr.7, align 1, !tbaa !36
  %conv177 = zext i8 %43 to i32
  %shl178 = shl nuw nsw i32 %conv177, 8
  %incdec.ptr180 = getelementptr inbounds i8, i8* %b.addr.7, i64 1
  %44 = load i8, i8* %b.addr.7, align 1, !tbaa !36
  %conv181 = zext i8 %44 to i32
  %shl182 = shl nuw nsw i32 %conv181, 16
  %or179 = or i32 %shl178, %conv175
  %or183 = or i32 %or179, %shl182
  %or184 = or i32 %or183, -16777216
  %incdec.ptr185 = getelementptr inbounds i32, i32* %cp.addr.7, i64 1
  store i32 %or184, i32* %cp.addr.7, align 4, !tbaa !38
  br label %if.end

if.end:                                           ; preds = %for.end, %sw.bb173
  %r.addr.8 = phi i8* [ %incdec.ptr174, %sw.bb173 ], [ %r.addr.1.lcssa, %for.end ]
  %g.addr.8 = phi i8* [ %incdec.ptr176, %sw.bb173 ], [ %g.addr.1.lcssa, %for.end ]
  %b.addr.8 = phi i8* [ %incdec.ptr180, %sw.bb173 ], [ %b.addr.1.lcssa, %for.end ]
  %cp.addr.8 = phi i32* [ %incdec.ptr185, %sw.bb173 ], [ %cp.addr.1.lcssa, %for.end ]
  %add.ptr = getelementptr inbounds i8, i8* %r.addr.8, i64 %idx.ext
  %add.ptr187 = getelementptr inbounds i8, i8* %g.addr.8, i64 %idx.ext
  %add.ptr189 = getelementptr inbounds i8, i8* %b.addr.8, i64 %idx.ext
  %add.ptr191 = getelementptr inbounds i32, i32* %cp.addr.8, i64 %idx.ext190
  %cmp.not = icmp eq i32 %dec274, 0
  br i1 %cmp.not, label %while.end.loopexit, label %for.cond.preheader, !llvm.loop !116

while.end.loopexit:                               ; preds = %if.end
  br label %while.end

while.end:                                        ; preds = %while.end.loopexit, %entry
  ret void

rolled.pre:                                       ; No predecessors!

rolled.loop:                                      ; No predecessors!
  %45 = phi i8 
  %46 = zext i8 %45 to i64
  %47 = add i64 %46, 1
  %48 = getelementptr i8, i8* %g.addr.1260, i64 %47
  %49 = load i8, i8* %48, align 1
  %50 = zext i8 %49 to i32
  %51 = shl nuw nsw i32 %50, 8
  %52 = zext i8 %45 to i64
  %53 = add i64 %52, 1
  %54 = getelementptr i8, i8* %r.addr.1259, i64 %53
  %55 = load i8, i8* %54, align 1
  %56 = zext i8 %55 to i32
  %57 = or i32 %51, %56
  %58 = zext i8 %45 to i64
  %59 = add i64 %58, 1
  %60 = getelementptr i8, i8* %b.addr.1261, i64 %59
  %61 = load i8, i8* %60, align 1
  %62 = zext i8 %61 to i32
  %63 = shl nuw nsw i32 %62, 16
  %64 = or i32 %57, %63
  %65 = or i32 %64, -16777216
  %66 = zext i8 %45 to i64
  %67 = add i64 %66, 1
  %68 = getelementptr i32, i32* %cp.addr.1262, i64 %67
  store i32 %65, i32* %68, align 4
  %69 = add i8 %45, 1
  %70 = icmp ne i8 %69, 8

rolled.exit:                                      ; No predecessors!
}

Done!
; Function Attrs: nofree norecurse nounwind optsize uwtable
define internal void @putRGBseparate8bittile(%struct._TIFFRGBAImage* nocapture readnone %img, i32* nocapture %cp, i32 %x, i32 %y, i32 %w, i32 %h, i32 %fromskew, i32 %toskew, i8* nocapture readonly %r, i8* nocapture readonly %g, i8* nocapture readonly %b, i8* nocapture readnone %a) #5 {
entry:
  %cmp.not269 = icmp eq i32 %h, 0
  br i1 %cmp.not269, label %while.end, label %for.cond.preheader.lr.ph

for.cond.preheader.lr.ph:                         ; preds = %entry
  %cmp1258 = icmp ugt i32 %w, 7
  %idx.ext = sext i32 %fromskew to i64
  %idx.ext190 = sext i32 %toskew to i64
  br label %for.cond.preheader

for.cond.preheader:                               ; preds = %for.cond.preheader.lr.ph, %if.end
  %dec274.in = phi i32 [ %h, %for.cond.preheader.lr.ph ], [ %dec274, %if.end ]
  %cp.addr.0273 = phi i32* [ %cp, %for.cond.preheader.lr.ph ], [ %add.ptr191, %if.end ]
  %b.addr.0272 = phi i8* [ %b, %for.cond.preheader.lr.ph ], [ %add.ptr189, %if.end ]
  %g.addr.0271 = phi i8* [ %g, %for.cond.preheader.lr.ph ], [ %add.ptr187, %if.end ]
  %r.addr.0270 = phi i8* [ %r, %for.cond.preheader.lr.ph ], [ %add.ptr, %if.end ]
  %dec274 = add i32 %dec274.in, -1
  br i1 %cmp1258, label %for.body.preheader, label %for.end

for.body.preheader:                               ; preds = %for.cond.preheader
  br label %for.body

for.body:                                         ; preds = %for.body.preheader, %rolled.exit
  %_x.0263 = phi i32 [ %47, %rolled.exit ], [ %w, %for.body.preheader ]
  %cp.addr.1262 = phi i32* [ %incdec.ptr93, %rolled.exit ], [ %cp.addr.0273, %for.body.preheader ]
  %b.addr.1261 = phi i8* [ %incdec.ptr88, %rolled.exit ], [ %b.addr.0272, %for.body.preheader ]
  %g.addr.1260 = phi i8* [ %incdec.ptr84, %rolled.exit ], [ %g.addr.0271, %for.body.preheader ]
  %r.addr.1259 = phi i8* [ %incdec.ptr82, %rolled.exit ], [ %r.addr.0270, %for.body.preheader ]
  %incdec.ptr82 = getelementptr inbounds i8, i8* %r.addr.1259, i64 8
  %incdec.ptr84 = getelementptr inbounds i8, i8* %g.addr.1260, i64 8
  %incdec.ptr88 = getelementptr inbounds i8, i8* %b.addr.1261, i64 8
  %incdec.ptr93 = getelementptr inbounds i32, i32* %cp.addr.1262, i64 8
  br label %rolled.pre

for.end.loopexit:                                 ; preds = %rolled.exit
  %incdec.ptr82.lcssa = phi i8* [ %incdec.ptr82, %rolled.exit ]
  %incdec.ptr84.lcssa = phi i8* [ %incdec.ptr84, %rolled.exit ]
  %incdec.ptr88.lcssa = phi i8* [ %incdec.ptr88, %rolled.exit ]
  %incdec.ptr93.lcssa = phi i32* [ %incdec.ptr93, %rolled.exit ]
  %sub.lcssa = phi i32 [ %47, %rolled.exit ]
  br label %for.end

for.end:                                          ; preds = %for.end.loopexit, %for.cond.preheader
  %r.addr.1.lcssa = phi i8* [ %r.addr.0270, %for.cond.preheader ], [ %incdec.ptr82.lcssa, %for.end.loopexit ]
  %g.addr.1.lcssa = phi i8* [ %g.addr.0271, %for.cond.preheader ], [ %incdec.ptr84.lcssa, %for.end.loopexit ]
  %b.addr.1.lcssa = phi i8* [ %b.addr.0272, %for.cond.preheader ], [ %incdec.ptr88.lcssa, %for.end.loopexit ]
  %cp.addr.1.lcssa = phi i32* [ %cp.addr.0273, %for.cond.preheader ], [ %incdec.ptr93.lcssa, %for.end.loopexit ]
  %_x.0.lcssa = phi i32 [ %w, %for.cond.preheader ], [ %sub.lcssa, %for.end.loopexit ]
  switch i32 %_x.0.lcssa, label %if.end [
    i32 1, label %sw.bb173
    i32 7, label %sw.bb
    i32 6, label %sw.bb108
    i32 5, label %sw.bb121
    i32 4, label %sw.bb134
    i32 3, label %sw.bb147
    i32 2, label %sw.bb160
  ]

sw.bb:                                            ; preds = %for.end
  %incdec.ptr96 = getelementptr inbounds i8, i8* %r.addr.1.lcssa, i64 1
  %0 = load i8, i8* %r.addr.1.lcssa, align 1, !tbaa !36
  %conv97 = zext i8 %0 to i32
  %incdec.ptr98 = getelementptr inbounds i8, i8* %g.addr.1.lcssa, i64 1
  %1 = load i8, i8* %g.addr.1.lcssa, align 1, !tbaa !36
  %conv99 = zext i8 %1 to i32
  %shl100 = shl nuw nsw i32 %conv99, 8
  %incdec.ptr102 = getelementptr inbounds i8, i8* %b.addr.1.lcssa, i64 1
  %2 = load i8, i8* %b.addr.1.lcssa, align 1, !tbaa !36
  %conv103 = zext i8 %2 to i32
  %shl104 = shl nuw nsw i32 %conv103, 16
  %or101 = or i32 %shl100, %conv97
  %or105 = or i32 %or101, %shl104
  %or106 = or i32 %or105, -16777216
  %incdec.ptr107 = getelementptr inbounds i32, i32* %cp.addr.1.lcssa, i64 1
  store i32 %or106, i32* %cp.addr.1.lcssa, align 4, !tbaa !38
  br label %sw.bb108

sw.bb108:                                         ; preds = %for.end, %sw.bb
  %r.addr.2 = phi i8* [ %incdec.ptr96, %sw.bb ], [ %r.addr.1.lcssa, %for.end ]
  %g.addr.2 = phi i8* [ %incdec.ptr98, %sw.bb ], [ %g.addr.1.lcssa, %for.end ]
  %b.addr.2 = phi i8* [ %incdec.ptr102, %sw.bb ], [ %b.addr.1.lcssa, %for.end ]
  %cp.addr.2 = phi i32* [ %incdec.ptr107, %sw.bb ], [ %cp.addr.1.lcssa, %for.end ]
  %incdec.ptr109 = getelementptr inbounds i8, i8* %r.addr.2, i64 1
  %3 = load i8, i8* %r.addr.2, align 1, !tbaa !36
  %conv110 = zext i8 %3 to i32
  %incdec.ptr111 = getelementptr inbounds i8, i8* %g.addr.2, i64 1
  %4 = load i8, i8* %g.addr.2, align 1, !tbaa !36
  %conv112 = zext i8 %4 to i32
  %shl113 = shl nuw nsw i32 %conv112, 8
  %incdec.ptr115 = getelementptr inbounds i8, i8* %b.addr.2, i64 1
  %5 = load i8, i8* %b.addr.2, align 1, !tbaa !36
  %conv116 = zext i8 %5 to i32
  %shl117 = shl nuw nsw i32 %conv116, 16
  %or114 = or i32 %shl113, %conv110
  %or118 = or i32 %or114, %shl117
  %or119 = or i32 %or118, -16777216
  %incdec.ptr120 = getelementptr inbounds i32, i32* %cp.addr.2, i64 1
  store i32 %or119, i32* %cp.addr.2, align 4, !tbaa !38
  br label %sw.bb121

sw.bb121:                                         ; preds = %for.end, %sw.bb108
  %r.addr.3 = phi i8* [ %incdec.ptr109, %sw.bb108 ], [ %r.addr.1.lcssa, %for.end ]
  %g.addr.3 = phi i8* [ %incdec.ptr111, %sw.bb108 ], [ %g.addr.1.lcssa, %for.end ]
  %b.addr.3 = phi i8* [ %incdec.ptr115, %sw.bb108 ], [ %b.addr.1.lcssa, %for.end ]
  %cp.addr.3 = phi i32* [ %incdec.ptr120, %sw.bb108 ], [ %cp.addr.1.lcssa, %for.end ]
  %incdec.ptr122 = getelementptr inbounds i8, i8* %r.addr.3, i64 1
  %6 = load i8, i8* %r.addr.3, align 1, !tbaa !36
  %conv123 = zext i8 %6 to i32
  %incdec.ptr124 = getelementptr inbounds i8, i8* %g.addr.3, i64 1
  %7 = load i8, i8* %g.addr.3, align 1, !tbaa !36
  %conv125 = zext i8 %7 to i32
  %shl126 = shl nuw nsw i32 %conv125, 8
  %incdec.ptr128 = getelementptr inbounds i8, i8* %b.addr.3, i64 1
  %8 = load i8, i8* %b.addr.3, align 1, !tbaa !36
  %conv129 = zext i8 %8 to i32
  %shl130 = shl nuw nsw i32 %conv129, 16
  %or127 = or i32 %shl126, %conv123
  %or131 = or i32 %or127, %shl130
  %or132 = or i32 %or131, -16777216
  %incdec.ptr133 = getelementptr inbounds i32, i32* %cp.addr.3, i64 1
  store i32 %or132, i32* %cp.addr.3, align 4, !tbaa !38
  br label %sw.bb134

sw.bb134:                                         ; preds = %for.end, %sw.bb121
  %r.addr.4 = phi i8* [ %incdec.ptr122, %sw.bb121 ], [ %r.addr.1.lcssa, %for.end ]
  %g.addr.4 = phi i8* [ %incdec.ptr124, %sw.bb121 ], [ %g.addr.1.lcssa, %for.end ]
  %b.addr.4 = phi i8* [ %incdec.ptr128, %sw.bb121 ], [ %b.addr.1.lcssa, %for.end ]
  %cp.addr.4 = phi i32* [ %incdec.ptr133, %sw.bb121 ], [ %cp.addr.1.lcssa, %for.end ]
  %incdec.ptr135 = getelementptr inbounds i8, i8* %r.addr.4, i64 1
  %9 = load i8, i8* %r.addr.4, align 1, !tbaa !36
  %conv136 = zext i8 %9 to i32
  %incdec.ptr137 = getelementptr inbounds i8, i8* %g.addr.4, i64 1
  %10 = load i8, i8* %g.addr.4, align 1, !tbaa !36
  %conv138 = zext i8 %10 to i32
  %shl139 = shl nuw nsw i32 %conv138, 8
  %incdec.ptr141 = getelementptr inbounds i8, i8* %b.addr.4, i64 1
  %11 = load i8, i8* %b.addr.4, align 1, !tbaa !36
  %conv142 = zext i8 %11 to i32
  %shl143 = shl nuw nsw i32 %conv142, 16
  %or140 = or i32 %shl139, %conv136
  %or144 = or i32 %or140, %shl143
  %or145 = or i32 %or144, -16777216
  %incdec.ptr146 = getelementptr inbounds i32, i32* %cp.addr.4, i64 1
  store i32 %or145, i32* %cp.addr.4, align 4, !tbaa !38
  br label %sw.bb147

sw.bb147:                                         ; preds = %for.end, %sw.bb134
  %r.addr.5 = phi i8* [ %incdec.ptr135, %sw.bb134 ], [ %r.addr.1.lcssa, %for.end ]
  %g.addr.5 = phi i8* [ %incdec.ptr137, %sw.bb134 ], [ %g.addr.1.lcssa, %for.end ]
  %b.addr.5 = phi i8* [ %incdec.ptr141, %sw.bb134 ], [ %b.addr.1.lcssa, %for.end ]
  %cp.addr.5 = phi i32* [ %incdec.ptr146, %sw.bb134 ], [ %cp.addr.1.lcssa, %for.end ]
  %incdec.ptr148 = getelementptr inbounds i8, i8* %r.addr.5, i64 1
  %12 = load i8, i8* %r.addr.5, align 1, !tbaa !36
  %conv149 = zext i8 %12 to i32
  %incdec.ptr150 = getelementptr inbounds i8, i8* %g.addr.5, i64 1
  %13 = load i8, i8* %g.addr.5, align 1, !tbaa !36
  %conv151 = zext i8 %13 to i32
  %shl152 = shl nuw nsw i32 %conv151, 8
  %incdec.ptr154 = getelementptr inbounds i8, i8* %b.addr.5, i64 1
  %14 = load i8, i8* %b.addr.5, align 1, !tbaa !36
  %conv155 = zext i8 %14 to i32
  %shl156 = shl nuw nsw i32 %conv155, 16
  %or153 = or i32 %shl152, %conv149
  %or157 = or i32 %or153, %shl156
  %or158 = or i32 %or157, -16777216
  %incdec.ptr159 = getelementptr inbounds i32, i32* %cp.addr.5, i64 1
  store i32 %or158, i32* %cp.addr.5, align 4, !tbaa !38
  br label %sw.bb160

sw.bb160:                                         ; preds = %for.end, %sw.bb147
  %r.addr.6 = phi i8* [ %incdec.ptr148, %sw.bb147 ], [ %r.addr.1.lcssa, %for.end ]
  %g.addr.6 = phi i8* [ %incdec.ptr150, %sw.bb147 ], [ %g.addr.1.lcssa, %for.end ]
  %b.addr.6 = phi i8* [ %incdec.ptr154, %sw.bb147 ], [ %b.addr.1.lcssa, %for.end ]
  %cp.addr.6 = phi i32* [ %incdec.ptr159, %sw.bb147 ], [ %cp.addr.1.lcssa, %for.end ]
  %incdec.ptr161 = getelementptr inbounds i8, i8* %r.addr.6, i64 1
  %15 = load i8, i8* %r.addr.6, align 1, !tbaa !36
  %conv162 = zext i8 %15 to i32
  %incdec.ptr163 = getelementptr inbounds i8, i8* %g.addr.6, i64 1
  %16 = load i8, i8* %g.addr.6, align 1, !tbaa !36
  %conv164 = zext i8 %16 to i32
  %shl165 = shl nuw nsw i32 %conv164, 8
  %incdec.ptr167 = getelementptr inbounds i8, i8* %b.addr.6, i64 1
  %17 = load i8, i8* %b.addr.6, align 1, !tbaa !36
  %conv168 = zext i8 %17 to i32
  %shl169 = shl nuw nsw i32 %conv168, 16
  %or166 = or i32 %shl165, %conv162
  %or170 = or i32 %or166, %shl169
  %or171 = or i32 %or170, -16777216
  %incdec.ptr172 = getelementptr inbounds i32, i32* %cp.addr.6, i64 1
  store i32 %or171, i32* %cp.addr.6, align 4, !tbaa !38
  br label %sw.bb173

sw.bb173:                                         ; preds = %for.end, %sw.bb160
  %r.addr.7 = phi i8* [ %incdec.ptr161, %sw.bb160 ], [ %r.addr.1.lcssa, %for.end ]
  %g.addr.7 = phi i8* [ %incdec.ptr163, %sw.bb160 ], [ %g.addr.1.lcssa, %for.end ]
  %b.addr.7 = phi i8* [ %incdec.ptr167, %sw.bb160 ], [ %b.addr.1.lcssa, %for.end ]
  %cp.addr.7 = phi i32* [ %incdec.ptr172, %sw.bb160 ], [ %cp.addr.1.lcssa, %for.end ]
  %incdec.ptr174 = getelementptr inbounds i8, i8* %r.addr.7, i64 1
  %18 = load i8, i8* %r.addr.7, align 1, !tbaa !36
  %conv175 = zext i8 %18 to i32
  %incdec.ptr176 = getelementptr inbounds i8, i8* %g.addr.7, i64 1
  %19 = load i8, i8* %g.addr.7, align 1, !tbaa !36
  %conv177 = zext i8 %19 to i32
  %shl178 = shl nuw nsw i32 %conv177, 8
  %incdec.ptr180 = getelementptr inbounds i8, i8* %b.addr.7, i64 1
  %20 = load i8, i8* %b.addr.7, align 1, !tbaa !36
  %conv181 = zext i8 %20 to i32
  %shl182 = shl nuw nsw i32 %conv181, 16
  %or179 = or i32 %shl178, %conv175
  %or183 = or i32 %or179, %shl182
  %or184 = or i32 %or183, -16777216
  %incdec.ptr185 = getelementptr inbounds i32, i32* %cp.addr.7, i64 1
  store i32 %or184, i32* %cp.addr.7, align 4, !tbaa !38
  br label %if.end

if.end:                                           ; preds = %for.end, %sw.bb173
  %r.addr.8 = phi i8* [ %incdec.ptr174, %sw.bb173 ], [ %r.addr.1.lcssa, %for.end ]
  %g.addr.8 = phi i8* [ %incdec.ptr176, %sw.bb173 ], [ %g.addr.1.lcssa, %for.end ]
  %b.addr.8 = phi i8* [ %incdec.ptr180, %sw.bb173 ], [ %b.addr.1.lcssa, %for.end ]
  %cp.addr.8 = phi i32* [ %incdec.ptr185, %sw.bb173 ], [ %cp.addr.1.lcssa, %for.end ]
  %add.ptr = getelementptr inbounds i8, i8* %r.addr.8, i64 %idx.ext
  %add.ptr187 = getelementptr inbounds i8, i8* %g.addr.8, i64 %idx.ext
  %add.ptr189 = getelementptr inbounds i8, i8* %b.addr.8, i64 %idx.ext
  %add.ptr191 = getelementptr inbounds i32, i32* %cp.addr.8, i64 %idx.ext190
  %cmp.not = icmp eq i32 %dec274, 0
  br i1 %cmp.not, label %while.end.loopexit, label %for.cond.preheader, !llvm.loop !115

while.end.loopexit:                               ; preds = %if.end
  br label %while.end

while.end:                                        ; preds = %while.end.loopexit, %entry
  ret void

rolled.pre:                                       ; preds = %for.body
  br label %rolled.loop

rolled.loop:                                      ; preds = %rolled.pre, %rolled.loop
  %21 = phi i8 [ 0, %rolled.pre ], [ %45, %rolled.loop ]
  %22 = zext i8 %21 to i64
  %23 = add i64 %22, 1
  %24 = getelementptr i8, i8* %g.addr.1260, i64 %23
  %25 = load i8, i8* %24, align 1
  %26 = zext i8 %25 to i32
  %27 = shl nuw nsw i32 %26, 8
  %28 = zext i8 %21 to i64
  %29 = add i64 %28, 1
  %30 = getelementptr i8, i8* %r.addr.1259, i64 %29
  %31 = load i8, i8* %30, align 1
  %32 = zext i8 %31 to i32
  %33 = or i32 %27, %32
  %34 = zext i8 %21 to i64
  %35 = add i64 %34, 1
  %36 = getelementptr i8, i8* %b.addr.1261, i64 %35
  %37 = load i8, i8* %36, align 1
  %38 = zext i8 %37 to i32
  %39 = shl nuw nsw i32 %38, 16
  %40 = or i32 %33, %39
  %41 = or i32 %40, -16777216
  %42 = zext i8 %21 to i64
  %43 = add i64 %42, 1
  %44 = getelementptr i32, i32* %cp.addr.1262, i64 %43
  store i32 %41, i32* %44, align 4
  %45 = add i8 %21, 1
  %46 = icmp ne i8 %45, 8
  br i1 %46, label %rolled.loop, label %rolled.exit

rolled.exit:                                      ; preds = %rolled.loop
  %47 = add i32 %_x.0263, -8
  %48 = icmp ugt i32 %47, 7
  br i1 %48, label %for.body, label %for.end.loopexit, !llvm.loop !116
}

code gen 1
destroying tree
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
/home/rodrigo/llvm/loop-rerolling/build/release/bin/clang -std=gnu89 -B /usr/bin -Os -fno-vectorize -fno-slp-vectorize -fno-unroll-loops -c src/tif_read.c -o src/tif_read.o   -fuse-ld=
clang-12: warning: argument unused during compilation: '-fuse-ld=' [-Wunused-command-line-argument]
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   %tif_rawdatasize = getelementptr inbounds %struct.tiff, %struct.tiff* %tif, i64 0, i32 41
Here ..
Skipping:   store i8* %bp, i8** %tif_rawdata, align 8, !tbaa !2
destroying tree
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   %tif_rawdatasize11 = getelementptr inbounds %struct.tiff, %struct.tiff* %tif, i64 0, i32 41
Here ..
Skipping:   %call = tail call i8* @_TIFFmalloc(i32 %div) #3
destroying tree
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   %tif_curstrip = getelementptr inbounds %struct.tiff, %struct.tiff* %tif, i64 0, i32 13
Here ..
Skipping:   %td_stripsperimage = getelementptr inbounds %struct.tiff, %struct.tiff* %tif, i64 0, i32 6, i32 42
Skipping:   %3 = load i32, i32* %td_stripsperimage, align 8, !tbaa !15
destroying tree
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
destroying tree
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
destroying tree
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
destroying tree
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
Done Loop Roller!
/home/rodrigo/llvm/loop-rerolling/build/release/bin/clang -std=gnu89 -B /usr/bin -Os -fno-vectorize -fno-slp-vectorize -fno-unroll-loops -c src/tif_dir.c -o src/tif_dir.o   -fuse-ld=
clang-12: warning: argument unused during compilation: '-fuse-ld=' [-Wunused-command-line-argument]
src/tif_dir.c:170:8: warning: logical not is only applied to the left hand side of this comparison [-Wlogical-not-parentheses]
                if ( ! tif->tif_mode == O_RDONLY ) { 
                     ^               ~~
src/tif_dir.c:170:8: note: add parentheses after the '!' to evaluate the comparison first
                if ( ! tif->tif_mode == O_RDONLY ) { 
                     ^
                       (                        )
src/tif_dir.c:170:8: note: add parentheses around left hand side expression to silence this warning
                if ( ! tif->tif_mode == O_RDONLY ) { 
                     ^
                     (              )
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
Done Loop Roller!
stores
calls
Done Loop Roller!
stores
calls
Done Loop Roller!
stores
calls
Done Loop Roller!
stores
calls
Done Loop Roller!
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
Done Loop Roller!
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
destroying tree
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
destroying tree
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
destroying tree
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   store i32 %246, i32* %td_tilelength622, align 8, !tbaa !32
Here ..
Skipping:   %tif_flags623 = getelementptr inbounds %struct.tiff, %struct.tiff* %tif, i64 0, i32 3
Skipping:   %249 = load i32, i32* %tif_flags623, align 8, !tbaa !14
destroying tree
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   %call1122 = call %struct.TIFFFieldInfo* @_TIFFFieldWithTag(%struct.tiff* %tif, i32 %tag) #6
Here ..
Skipping:   %field_bit = getelementptr inbounds %struct.TIFFFieldInfo, %struct.TIFFFieldInfo* %call1122, i64 0, i32 4
Skipping:   %461 = load i16, i16* %field_bit, align 4, !tbaa !67
destroying tree
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
Done Loop Roller!
stores
calls
Done Loop Roller!
stores
calls
Done Loop Roller!
stores
calls
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   %nextdir = alloca i32, align 4
Skipping:   %off = alloca i32, align 4
Here ..
Skipping:   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1) #4
destroying tree
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
destroying tree
calls
stores
calls
stores
calls
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1) #4
Here ..
Here ..
I:   ret i32 %retval.0
Last:   ret i32 %retval.0
Schedulable: 1
code gen 0
Gains: 6 - 11 = -5
Unprofitable: deleting generated code
Done!
code gen 1
destroying tree
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
1 warning generated.
/home/rodrigo/llvm/loop-rerolling/build/release/bin/clang -std=gnu89 -B /usr/bin -Os -fno-vectorize -fno-slp-vectorize -fno-unroll-loops -c src/tif_codec.c -o src/tif_codec.o   -fuse-ld=
clang-12: warning: argument unused during compilation: '-fuse-ld=' [-Wunused-command-line-argument]
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   %tif_setupdecode = getelementptr inbounds %struct.tiff, %struct.tiff* %tif, i64 0, i32 21
Here ..
Here ..
Here ..
I:   ret i32 1
Last:   ret i32 1
Schedulable: 1
code gen 0
Gains: 4 - 15 = -11
Unprofitable: deleting generated code
Done!
code gen 1
destroying tree
calls
Done Loop Roller!
stores
calls
Done Loop Roller!
/home/rodrigo/llvm/loop-rerolling/build/release/bin/clang -std=gnu89 -B /usr/bin -Os -fno-vectorize -fno-slp-vectorize -fno-unroll-loops -c src/tif_jpeg.c -o src/tif_jpeg.o   -fuse-ld=
clang-12: warning: argument unused during compilation: '-fuse-ld=' [-Wunused-command-line-argument]
/home/rodrigo/llvm/loop-rerolling/build/release/bin/clang -std=gnu89 -B /usr/bin -Os -fno-vectorize -fno-slp-vectorize -fno-unroll-loops -c src/tif_thunder.c -o src/tif_thunder.o   -fuse-ld=
clang-12: warning: argument unused during compilation: '-fuse-ld=' [-Wunused-command-line-argument]
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   %tif_decoderow = getelementptr inbounds %struct.tiff, %struct.tiff* %tif, i64 0, i32 26
Here ..
Here ..
Here ..
I:   ret i32 1
Last:   ret i32 1
Schedulable: 1
code gen 0
Gains: 4 - 15 = -11
Unprofitable: deleting generated code
Done!
code gen 1
destroying tree
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
/home/rodrigo/llvm/loop-rerolling/build/release/bin/clang -std=gnu89 -B /usr/bin -Os -fno-vectorize -fno-slp-vectorize -fno-unroll-loops -c src/tif_lzw.c -o src/tif_lzw.o   -fuse-ld=
clang-12: warning: argument unused during compilation: '-fuse-ld=' [-Wunused-command-line-argument]
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   %tif_setupdecode = getelementptr inbounds %struct.tiff, %struct.tiff* %tif, i64 0, i32 21
Here ..
Skipping:   %tif_predecode = getelementptr inbounds %struct.tiff, %struct.tiff* %tif, i64 0, i32 22
Skipping:   store i32 (%struct.tiff*, i16)* @LZWPreDecode, i32 (%struct.tiff*, i16)** %tif_predecode, align 8, !tbaa !21
destroying tree
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
destroying tree
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   %tif_decoderow = getelementptr inbounds %struct.tiff, %struct.tiff* %tif, i64 0, i32 26
Here ..
Here ..
Here ..
Here ..
I:   %tif_setupdecode = getelementptr inbounds %struct.tiff, %struct.tiff* %tif, i64 0, i32 21
Last:   %tif_setupdecode = getelementptr inbounds %struct.tiff, %struct.tiff* %tif, i64 0, i32 21
Schedulable: 1
code gen 0
Gains: 6 - 19 = -13
Unprofitable: deleting generated code
Done!
code gen 1
destroying tree
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
/home/rodrigo/llvm/loop-rerolling/build/release/bin/clang -std=gnu89 -B /usr/bin -Os -fno-vectorize -fno-slp-vectorize -fno-unroll-loops -c src/tif_error.c -o src/tif_error.o   -fuse-ld=
clang-12: warning: argument unused during compilation: '-fuse-ld=' [-Wunused-command-line-argument]
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
Done Loop Roller!
/home/rodrigo/llvm/loop-rerolling/build/release/bin/clang -std=gnu89 -B /usr/bin -Os -fno-vectorize -fno-slp-vectorize -fno-unroll-loops -c src/tif_write.c -o src/tif_write.o   -fuse-ld=
clang-12: warning: argument unused during compilation: '-fuse-ld=' [-Wunused-command-line-argument]
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   %mul = shl i32 %7, 2
Here ..
Here ..
Skipping:   %11 = load i32, i32* %td_nstrips, align 4, !tbaa !18
destroying tree
calls
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   %mul = shl i32 %7, 2
Here ..
Skipping:   %td_stripoffset = getelementptr inbounds %struct.tiff, %struct.tiff* %tif, i64 0, i32 6, i32 44
Skipping:   %10 = bitcast i32** %td_stripoffset to i8**
Skipping:   store i8* %call35, i8** %10, align 8, !tbaa !20
destroying tree
stores
calls
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   %15 = load i32, i32* %td_nstrips, align 4, !tbaa !18
Here ..
Skipping:   %16 = load i8*, i8** %12, align 8, !tbaa !21
destroying tree
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   %mul.i = shl i32 %12, 2
Here ..
Here ..
Skipping:   %16 = load i32, i32* %td_nstrips.i, align 4, !tbaa !21
destroying tree
calls
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   %mul.i = shl i32 %12, 2
Here ..
Skipping:   %15 = bitcast i32** %td_stripoffset to i8**
Skipping:   store i8* %call35.i, i8** %15, align 8, !tbaa !23
destroying tree
stores
calls
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   %20 = load i32, i32* %td_nstrips.i, align 4, !tbaa !21
Here ..
Skipping:   %21 = load i8*, i8** %17, align 8, !tbaa !24
destroying tree
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
destroying tree
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   store i8* %bp.addr.1, i8** %tif_rawdata, align 8, !tbaa !2
Here ..
Skipping:   %tif_rawdatasize = getelementptr inbounds %struct.tiff, %struct.tiff* %tif, i64 0, i32 41
Skipping:   store i32 %size.addr.054, i32* %tif_rawdatasize, align 8, !tbaa !16
destroying tree
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   %td_stripoffset = getelementptr inbounds %struct.tiff, %struct.tiff* %tif, i64 0, i32 6, i32 44
Here ..
Here ..
Here ..
Here ..
Here ..
I:   %7 = load i32*, i32** %td_stripoffset, align 8, !tbaa !11
Last:   %7 = load i32*, i32** %td_stripoffset, align 8, !tbaa !11
Schedulable: 1
code gen 0
Gains: 19 - 29 = -10
Unprofitable: deleting generated code
Done!
code gen 1
destroying tree
calls
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   %td_stripoffset = getelementptr inbounds %struct.tiff, %struct.tiff* %tif, i64 0, i32 6, i32 44
Here ..
Skipping:   store i8* %call, i8** %4, align 8, !tbaa !11
destroying tree
stores
calls
stores
calls
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   %12 = load i32, i32* %td_nstrips, align 4, !tbaa !12
Here ..
Skipping:   %14 = load i32*, i32** %td_stripbytecount, align 8, !tbaa !13
destroying tree
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   %tif_curstrip = getelementptr inbounds %struct.tiff, %struct.tiff* %tif, i64 0, i32 13
Here ..
Skipping:   %td_stripsperimage21 = getelementptr inbounds %struct.tiff, %struct.tiff* %tif, i64 0, i32 6, i32 42
Skipping:   %8 = load i32, i32* %td_stripsperimage21, align 8, !tbaa !18
destroying tree
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   %tif_curstrip = getelementptr inbounds %struct.tiff, %struct.tiff* %tif, i64 0, i32 13
Here ..
Skipping:   %td_stripsperimage18 = getelementptr inbounds %struct.tiff, %struct.tiff* %tif, i64 0, i32 6, i32 42
Skipping:   %7 = load i32, i32* %td_stripsperimage18, align 8, !tbaa !16
destroying tree
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
destroying tree
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
Done Loop Roller!
/home/rodrigo/llvm/loop-rerolling/build/release/bin/clang -std=gnu89 -B /usr/bin -Os -fno-vectorize -fno-slp-vectorize -fno-unroll-loops -c src/tif_dirread.c -o src/tif_dirread.o   -fuse-ld=
clang-12: warning: argument unused during compilation: '-fuse-ld=' [-Wunused-command-line-argument]
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #4
Here ..
Skipping:   %1 = bitcast float* %v to i8*
Here ..
I:   %call = call fastcc i32 @TIFFFetchData(%struct.tiff* %tif, %struct.TIFFDirEntry* %dir, i8* nonnull %0) #5
Last:   %call = call fastcc i32 @TIFFFetchData(%struct.tiff* %tif, %struct.TIFFDirEntry* %dir, i8* nonnull %0) #5
Schedulable: 1
code gen 0
Gains: 6 - 22 = -16
Unprofitable: deleting generated code
Done!
code gen 1
destroying tree
stores
calls
stores
calls
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1) #4
Here ..
Here ..
I:   ret float %cond
Last:   ret float %cond
Schedulable: 1
code gen 0
Gains: 6 - 22 = -16
Unprofitable: deleting generated code
Done!
code gen 1
destroying tree
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %60) #5
Here ..
Skipping:   %61 = bitcast float* %v.i to i8*
Here ..
I:   %call.i381 = call fastcc i32 @TIFFFetchData(%struct.tiff* %tif, %struct.TIFFDirEntry* nonnull %dp, i8* nonnull %60) #3
Last:   %call.i381 = call fastcc i32 @TIFFFetchData(%struct.tiff* %tif, %struct.TIFFDirEntry* nonnull %dp, i8* nonnull %60) #3
Schedulable: 1
code gen 0
Gains: 6 - 22 = -16
Unprofitable: deleting generated code
Done!
code gen 1
destroying tree
stores
calls
stores
calls
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %61) #5
Here ..
Here ..
I:   br label %cond.end200
Last:   br label %cond.end200
Schedulable: 1
code gen 0
Gains: 6 - 22 = -16
Unprofitable: deleting generated code
Done!
code gen 1
destroying tree
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   %sub = add i32 %1, -1
Here ..
Here ..
Skipping:   %5 = bitcast i8* %call8 to i32*
Here ..
I:   %6 = bitcast i8* %call12 to i32*
Last:   %6 = bitcast i8* %call12 to i32*
Schedulable: 1
code gen 0
Gains: 12 - 34 = -22
Unprofitable: deleting generated code
Done!
code gen 1
destroying tree
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
destroying tree
calls
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   %11 = bitcast i32** %td_stripbytecount to i8**
Here ..
Here ..
Here ..
I:   store i8* %call8, i8** %11, align 8, !tbaa !2
Last:   store i8* %call8, i8** %11, align 8, !tbaa !2
Schedulable: 1
code gen 0
Gains: 6 - 17 = -11
Unprofitable: deleting generated code
Done!
code gen 1
destroying tree
stores
calls
Done Loop Roller!
stores
calls
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %0) #3
Here ..
Skipping:   %1 = bitcast i16* %dircount to i8*
Here ..
Skipping:   %2 = bitcast i32* %nextdiroff to i8*
Here ..
I:   %tif_nextdiroff = getelementptr inbounds %struct.tiff, %struct.tiff* %tif, i64 0, i32 5
Last:   %tif_nextdiroff = getelementptr inbounds %struct.tiff, %struct.tiff* %tif, i64 0, i32 5
Schedulable: 1
code gen 0
Gains: 9 - 28 = -19
Unprofitable: deleting generated code
Done!
code gen 1
destroying tree
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   store i32 %44, i32* %tif_nextdiroff, align 8, !tbaa !2
Here ..
Skipping:   %and113 = and i32 %43, -65
Here ..
I:   call void @TIFFFreeDirectory(%struct.tiff* nonnull %tif) #4
Last:   call void @TIFFFreeDirectory(%struct.tiff* nonnull %tif) #4
Schedulable: 1
code gen 0
Gains: 2 - 15 = -13
Unprofitable: deleting generated code
Done!
code gen 1
destroying tree
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
destroying tree
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
destroying tree
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   %sub.i = add i32 %250, -1
Here ..
Here ..
Skipping:   %254 = bitcast i8* %call8.i1029 to i32*
Here ..
I:   %255 = bitcast i8* %call12.i to i32*
Last:   %255 = bitcast i8* %call12.i to i32*
Schedulable: 1
code gen 0
Gains: 12 - 34 = -22
Unprofitable: deleting generated code
Done!
code gen 1
destroying tree
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
destroying tree
calls
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   %260 = bitcast i32** %td_stripbytecount.i to i8**
Here ..
Here ..
Here ..
I:   store i8* %call8.i1029, i8** %260, align 8, !tbaa !75
Last:   store i8* %call8.i1029, i8** %260, align 8, !tbaa !75
Schedulable: 1
code gen 0
Gains: 6 - 17 = -11
Unprofitable: deleting generated code
Done!
code gen 1
destroying tree
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
destroying tree
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #3
Here ..
Here ..
Here ..
I:   ret i32 %retval.1
Last:   ret i32 %retval.1
Schedulable: 1
code gen 0
Gains: 9 - 28 = -19
Unprofitable: deleting generated code
Done!
code gen 1
destroying tree
Done Loop Roller!
/home/rodrigo/llvm/loop-rerolling/build/release/bin/clang -std=gnu89 -B /usr/bin -Os -fno-vectorize -fno-slp-vectorize -fno-unroll-loops -c src/tif_warning.c -o src/tif_warning.o   -fuse-ld=
clang-12: warning: argument unused during compilation: '-fuse-ld=' [-Wunused-command-line-argument]
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
Done Loop Roller!
/home/rodrigo/llvm/loop-rerolling/build/release/bin/clang -std=gnu89 -B /usr/bin -Os -fno-vectorize -fno-slp-vectorize -fno-unroll-loops -c src/tif_tile.c -o src/tif_tile.o   -fuse-ld=
clang-12: warning: argument unused during compilation: '-fuse-ld=' [-Wunused-command-line-argument]
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
Done Loop Roller!
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
/home/rodrigo/llvm/loop-rerolling/build/release/bin/clang -std=gnu89 -B /usr/bin -Os -fno-vectorize -fno-slp-vectorize -fno-unroll-loops -c src/tif_open.c -o src/tif_open.o   -fuse-ld=
clang-12: warning: argument unused during compilation: '-fuse-ld=' [-Wunused-command-line-argument]
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   %tif_name = bitcast i8* %call3 to i8**
Here ..
Skipping:   %call9 = tail call i8* @strcpy(i8* nonnull %add.ptr, i8* nonnull dereferenceable(1) %name) #6
destroying tree
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
destroying tree
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   store i32 %or168, i32* %15, align 8, !tbaa !26
Here ..
Skipping:   %tif_rawdata = getelementptr inbounds i8, i8* %call3, i64 720
Skipping:   %48 = bitcast i8* %tif_rawdata to i8**
Skipping:   store i8* null, i8** %48, align 8, !tbaa !35
destroying tree
calls
stores
calls
stores
calls
stores
calls
stores
calls
stores
Grow Tree 0
Grow Tree 1
Scheduling order
Attempting scheduling...
Here 1
Here 2
Here 3
Start:   store i32 -1, i32* %60, align 8, !tbaa !39
Here ..
Skipping:   %61 = load i32, i32* %15, align 8, !tbaa !26
destroying tree
calls
stores
calls
stores
calls
stores
calls
stores
calls
Done Loop Roller!
stores
calls
Done Loop Roller!
stores
calls
Done Loop Roller!
stores
calls
Done Loop Roller!
stores
calls
Done Loop Roller!
stores
calls
Done Loop Roller!
stores
calls
Done Loop Roller!
stores
calls
Done Loop Roller!
stores
calls
Done Loop Roller!
stores
calls
Done Loop Roller!
stores
calls
Done Loop Roller!
stores
calls
Done Loop Roller!
/home/rodrigo/llvm/loop-rerolling/build/release/bin/clang++ -std=gnu++98 -B /usr/bin src/tif_jpeg.o src/tif_thunder.o src/tif_unix.o src/tif_aux.o src/tif_close.o src/tif_luv.o src/tif_fax3sm.o src/tif_version.o src/tif_next.o src/tif_flush.o src/tif_read.o src/tif_dir.o src/tif_dirwrite.o src/tif_dirread.o src/tif_tile.o src/tif_open.o src/tif_write.o src/tif_zip.o src/tif_strip.o src/getopt.o src/tif_codec.o src/tif_pixarlog.o src/tif_swab.o src/tif_dumpmode.o src/tif_fax3.o src/ctuning-rtl.o src/tif_predict.o src/tif_compress.o src/tif_packbits.o src/tif_getimage.o src/tiff2bw.o src/tif_dirinfo.o src/tif_lzw.o src/tif_print.o src/tif_error.o src/tif_warning.o -Oz  -fuse-ld= -o build/main -lm
